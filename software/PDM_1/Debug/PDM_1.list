
PDM_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044e0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080045a0  080045a0  000055a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045e0  080045e0  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080045e0  080045e0  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045e0  080045e0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045e0  080045e0  000055e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045e4  080045e4  000055e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080045e8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  2000000c  080045f4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  080045f4  00006204  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce9b  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002111  00000000  00000000  00012ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00014fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f6  00000000  00000000  00015d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d39c  00000000  00000000  000166fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e57a  00000000  00000000  00033a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000beafc  00000000  00000000  00042014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00100b10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002eb8  00000000  00000000  00100b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00103a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004588 	.word	0x08004588

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004588 	.word	0x08004588

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fcfb 	bl	8000c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f8d7 	bl	80003dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 fa75 	bl	800071c <MX_GPIO_Init>
  MX_DMA_Init();
 8000232:	f000 fa55 	bl	80006e0 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8000236:	f000 f9cd 	bl	80005d4 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 800023a:	f000 fa13 	bl	8000664 <MX_SPI1_Init>
  MX_ADC1_Init();
 800023e:	f000 f92b 	bl	8000498 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_SPI_TransmitReceive(&hspi1, tx_buffer, rx_buffer, 10, 100);
  // sleep -> ready
  tx_buffer[0] = OUT_READY;
 8000242:	4b56      	ldr	r3, [pc, #344]	@ (800039c <main+0x17c>)
 8000244:	228f      	movs	r2, #143	@ 0x8f
 8000246:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = OUT_READY;
 8000248:	4b54      	ldr	r3, [pc, #336]	@ (800039c <main+0x17c>)
 800024a:	228f      	movs	r2, #143	@ 0x8f
 800024c:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = OUT_READY;
 800024e:	4b53      	ldr	r3, [pc, #332]	@ (800039c <main+0x17c>)
 8000250:	228f      	movs	r2, #143	@ 0x8f
 8000252:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = OUT_READY;
 8000254:	4b51      	ldr	r3, [pc, #324]	@ (800039c <main+0x17c>)
 8000256:	228f      	movs	r2, #143	@ 0x8f
 8000258:	70da      	strb	r2, [r3, #3]

  error[0] = HAL_SPI_TransmitReceive(&hspi1, tx_buffer, rx_buffer + 0, 5, 100);
 800025a:	4a51      	ldr	r2, [pc, #324]	@ (80003a0 <main+0x180>)
 800025c:	494f      	ldr	r1, [pc, #316]	@ (800039c <main+0x17c>)
 800025e:	4851      	ldr	r0, [pc, #324]	@ (80003a4 <main+0x184>)
 8000260:	2364      	movs	r3, #100	@ 0x64
 8000262:	9300      	str	r3, [sp, #0]
 8000264:	2305      	movs	r3, #5
 8000266:	f003 fd03 	bl	8003c70 <HAL_SPI_TransmitReceive>
 800026a:	0003      	movs	r3, r0
 800026c:	001a      	movs	r2, r3
 800026e:	4b4e      	ldr	r3, [pc, #312]	@ (80003a8 <main+0x188>)
 8000270:	601a      	str	r2, [r3, #0]
  // ready -> active
  tx_buffer[0] = DCR_ACTIVE;
 8000272:	4b4a      	ldr	r3, [pc, #296]	@ (800039c <main+0x17c>)
 8000274:	22fd      	movs	r2, #253	@ 0xfd
 8000276:	701a      	strb	r2, [r3, #0]
  tx_buffer[1] = DCR_ACTIVE;
 8000278:	4b48      	ldr	r3, [pc, #288]	@ (800039c <main+0x17c>)
 800027a:	22fd      	movs	r2, #253	@ 0xfd
 800027c:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = DCR_ACTIVE;
 800027e:	4b47      	ldr	r3, [pc, #284]	@ (800039c <main+0x17c>)
 8000280:	22fd      	movs	r2, #253	@ 0xfd
 8000282:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = DCR_ACTIVE;
 8000284:	4b45      	ldr	r3, [pc, #276]	@ (800039c <main+0x17c>)
 8000286:	22fd      	movs	r2, #253	@ 0xfd
 8000288:	70da      	strb	r2, [r3, #3]
  error[1] = HAL_SPI_TransmitReceive(&hspi1, tx_buffer, rx_buffer + 5, 5, 100);
 800028a:	4a48      	ldr	r2, [pc, #288]	@ (80003ac <main+0x18c>)
 800028c:	4943      	ldr	r1, [pc, #268]	@ (800039c <main+0x17c>)
 800028e:	4845      	ldr	r0, [pc, #276]	@ (80003a4 <main+0x184>)
 8000290:	2364      	movs	r3, #100	@ 0x64
 8000292:	9300      	str	r3, [sp, #0]
 8000294:	2305      	movs	r3, #5
 8000296:	f003 fceb 	bl	8003c70 <HAL_SPI_TransmitReceive>
 800029a:	0003      	movs	r3, r0
 800029c:	001a      	movs	r2, r3
 800029e:	4b42      	ldr	r3, [pc, #264]	@ (80003a8 <main+0x188>)
 80002a0:	605a      	str	r2, [r3, #4]



  tx_buffer[0]=WRNDIAG;
 80002a2:	4b3e      	ldr	r3, [pc, #248]	@ (800039c <main+0x17c>)
 80002a4:	2202      	movs	r2, #2
 80002a6:	701a      	strb	r2, [r3, #0]
  tx_buffer[1]=WRNDIAG;
 80002a8:	4b3c      	ldr	r3, [pc, #240]	@ (800039c <main+0x17c>)
 80002aa:	2202      	movs	r2, #2
 80002ac:	705a      	strb	r2, [r3, #1]
  tx_buffer[2]=WRNDIAG;
 80002ae:	4b3b      	ldr	r3, [pc, #236]	@ (800039c <main+0x17c>)
 80002b0:	2202      	movs	r2, #2
 80002b2:	709a      	strb	r2, [r3, #2]
  tx_buffer[3]=WRNDIAG;
 80002b4:	4b39      	ldr	r3, [pc, #228]	@ (800039c <main+0x17c>)
 80002b6:	2202      	movs	r2, #2
 80002b8:	70da      	strb	r2, [r3, #3]
  tx_buffer[4]=WRNDIAG;
 80002ba:	4b38      	ldr	r3, [pc, #224]	@ (800039c <main+0x17c>)
 80002bc:	2202      	movs	r2, #2
 80002be:	711a      	strb	r2, [r3, #4]

error[2]=HAL_SPI_TransmitReceive(&hspi1, tx_buffer, rx_buffer+10, 5, 100);
 80002c0:	4a3b      	ldr	r2, [pc, #236]	@ (80003b0 <main+0x190>)
 80002c2:	4936      	ldr	r1, [pc, #216]	@ (800039c <main+0x17c>)
 80002c4:	4837      	ldr	r0, [pc, #220]	@ (80003a4 <main+0x184>)
 80002c6:	2364      	movs	r3, #100	@ 0x64
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	2305      	movs	r3, #5
 80002cc:	f003 fcd0 	bl	8003c70 <HAL_SPI_TransmitReceive>
 80002d0:	0003      	movs	r3, r0
 80002d2:	001a      	movs	r2, r3
 80002d4:	4b34      	ldr	r3, [pc, #208]	@ (80003a8 <main+0x188>)
 80002d6:	609a      	str	r2, [r3, #8]

// select channel 0
 tx_buffer[0] = DCR_CHANNEL0;
 80002d8:	4b30      	ldr	r3, [pc, #192]	@ (800039c <main+0x17c>)
 80002da:	22f8      	movs	r2, #248	@ 0xf8
 80002dc:	701a      	strb	r2, [r3, #0]
 tx_buffer[1] = DCR_CHANNEL0;
 80002de:	4b2f      	ldr	r3, [pc, #188]	@ (800039c <main+0x17c>)
 80002e0:	22f8      	movs	r2, #248	@ 0xf8
 80002e2:	705a      	strb	r2, [r3, #1]
 tx_buffer[2] = DCR_CHANNEL0;
 80002e4:	4b2d      	ldr	r3, [pc, #180]	@ (800039c <main+0x17c>)
 80002e6:	22f8      	movs	r2, #248	@ 0xf8
 80002e8:	709a      	strb	r2, [r3, #2]
 tx_buffer[3] = DCR_CHANNEL0;
 80002ea:	4b2c      	ldr	r3, [pc, #176]	@ (800039c <main+0x17c>)
 80002ec:	22f8      	movs	r2, #248	@ 0xf8
 80002ee:	70da      	strb	r2, [r3, #3]
 error[3] = HAL_SPI_TransmitReceive(&hspi1, tx_buffer, rx_buffer + 15, 5, 100);
 80002f0:	4a30      	ldr	r2, [pc, #192]	@ (80003b4 <main+0x194>)
 80002f2:	492a      	ldr	r1, [pc, #168]	@ (800039c <main+0x17c>)
 80002f4:	482b      	ldr	r0, [pc, #172]	@ (80003a4 <main+0x184>)
 80002f6:	2364      	movs	r3, #100	@ 0x64
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	2305      	movs	r3, #5
 80002fc:	f003 fcb8 	bl	8003c70 <HAL_SPI_TransmitReceive>
 8000300:	0003      	movs	r3, r0
 8000302:	001a      	movs	r2, r3
 8000304:	4b28      	ldr	r3, [pc, #160]	@ (80003a8 <main+0x188>)
 8000306:	60da      	str	r2, [r3, #12]


  //HAL_ADCEx_Calibration_Start(&hadc1);
  HAL_ADC_Start_DMA(&hadc1, adc_buffer, ADC_BUF_SIZE);
 8000308:	492b      	ldr	r1, [pc, #172]	@ (80003b8 <main+0x198>)
 800030a:	4b2c      	ldr	r3, [pc, #176]	@ (80003bc <main+0x19c>)
 800030c:	2204      	movs	r2, #4
 800030e:	0018      	movs	r0, r3
 8000310:	f001 f842 	bl	8001398 <HAL_ADC_Start_DMA>
  while (1)
  {
//	  while(adc_ready != 1){
//
//	  }
	  HAL_Delay(100);
 8000314:	2064      	movs	r0, #100	@ 0x64
 8000316:	f000 fd09 	bl	8000d2c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800031a:	2380      	movs	r3, #128	@ 0x80
 800031c:	009a      	lsls	r2, r3, #2
 800031e:	23a0      	movs	r3, #160	@ 0xa0
 8000320:	05db      	lsls	r3, r3, #23
 8000322:	0011      	movs	r1, r2
 8000324:	0018      	movs	r0, r3
 8000326:	f002 fc4a 	bl	8002bbe <HAL_GPIO_TogglePin>
	  adc_ready = 0;
 800032a:	4b25      	ldr	r3, [pc, #148]	@ (80003c0 <main+0x1a0>)
 800032c:	2200      	movs	r2, #0
 800032e:	701a      	strb	r2, [r3, #0]
	  fuse1_is = __HAL_ADC_CALC_DATA_TO_VOLTAGE(__VREFANALOG_VOLTAGE__, adc_buffer[0], ADC_RESOLUTION12b);
 8000330:	4b21      	ldr	r3, [pc, #132]	@ (80003b8 <main+0x198>)
 8000332:	881b      	ldrh	r3, [r3, #0]
 8000334:	001a      	movs	r2, r3
 8000336:	4b23      	ldr	r3, [pc, #140]	@ (80003c4 <main+0x1a4>)
 8000338:	4353      	muls	r3, r2
 800033a:	4923      	ldr	r1, [pc, #140]	@ (80003c8 <main+0x1a8>)
 800033c:	0018      	movs	r0, r3
 800033e:	f7ff fee3 	bl	8000108 <__udivsi3>
 8000342:	0003      	movs	r3, r0
 8000344:	001a      	movs	r2, r3
 8000346:	4b21      	ldr	r3, [pc, #132]	@ (80003cc <main+0x1ac>)
 8000348:	601a      	str	r2, [r3, #0]
	  fuse2_is = __HAL_ADC_CALC_DATA_TO_VOLTAGE(__VREFANALOG_VOLTAGE__, adc_buffer[1], ADC_RESOLUTION12b);
 800034a:	4b1b      	ldr	r3, [pc, #108]	@ (80003b8 <main+0x198>)
 800034c:	885b      	ldrh	r3, [r3, #2]
 800034e:	001a      	movs	r2, r3
 8000350:	4b1c      	ldr	r3, [pc, #112]	@ (80003c4 <main+0x1a4>)
 8000352:	4353      	muls	r3, r2
 8000354:	491c      	ldr	r1, [pc, #112]	@ (80003c8 <main+0x1a8>)
 8000356:	0018      	movs	r0, r3
 8000358:	f7ff fed6 	bl	8000108 <__udivsi3>
 800035c:	0003      	movs	r3, r0
 800035e:	001a      	movs	r2, r3
 8000360:	4b1b      	ldr	r3, [pc, #108]	@ (80003d0 <main+0x1b0>)
 8000362:	601a      	str	r2, [r3, #0]
	  fuse3_is = __HAL_ADC_CALC_DATA_TO_VOLTAGE(__VREFANALOG_VOLTAGE__, adc_buffer[2], ADC_RESOLUTION12b);
 8000364:	4b14      	ldr	r3, [pc, #80]	@ (80003b8 <main+0x198>)
 8000366:	889b      	ldrh	r3, [r3, #4]
 8000368:	001a      	movs	r2, r3
 800036a:	4b16      	ldr	r3, [pc, #88]	@ (80003c4 <main+0x1a4>)
 800036c:	4353      	muls	r3, r2
 800036e:	4916      	ldr	r1, [pc, #88]	@ (80003c8 <main+0x1a8>)
 8000370:	0018      	movs	r0, r3
 8000372:	f7ff fec9 	bl	8000108 <__udivsi3>
 8000376:	0003      	movs	r3, r0
 8000378:	001a      	movs	r2, r3
 800037a:	4b16      	ldr	r3, [pc, #88]	@ (80003d4 <main+0x1b4>)
 800037c:	601a      	str	r2, [r3, #0]
	  fuse4_is = __HAL_ADC_CALC_DATA_TO_VOLTAGE(__VREFANALOG_VOLTAGE__, adc_buffer[3], ADC_RESOLUTION12b);
 800037e:	4b0e      	ldr	r3, [pc, #56]	@ (80003b8 <main+0x198>)
 8000380:	88db      	ldrh	r3, [r3, #6]
 8000382:	001a      	movs	r2, r3
 8000384:	4b0f      	ldr	r3, [pc, #60]	@ (80003c4 <main+0x1a4>)
 8000386:	4353      	muls	r3, r2
 8000388:	490f      	ldr	r1, [pc, #60]	@ (80003c8 <main+0x1a8>)
 800038a:	0018      	movs	r0, r3
 800038c:	f7ff febc 	bl	8000108 <__udivsi3>
 8000390:	0003      	movs	r3, r0
 8000392:	001a      	movs	r2, r3
 8000394:	4b10      	ldr	r3, [pc, #64]	@ (80003d8 <main+0x1b8>)
 8000396:	601a      	str	r2, [r3, #0]
	  HAL_Delay(100);
 8000398:	46c0      	nop			@ (mov r8, r8)
 800039a:	e7bb      	b.n	8000314 <main+0xf4>
 800039c:	200001c0 	.word	0x200001c0
 80003a0:	200001c8 	.word	0x200001c8
 80003a4:	20000150 	.word	0x20000150
 80003a8:	200001ec 	.word	0x200001ec
 80003ac:	200001cd 	.word	0x200001cd
 80003b0:	200001d2 	.word	0x200001d2
 80003b4:	200001d7 	.word	0x200001d7
 80003b8:	200001b4 	.word	0x200001b4
 80003bc:	20000028 	.word	0x20000028
 80003c0:	200001bc 	.word	0x200001bc
 80003c4:	00000ce4 	.word	0x00000ce4
 80003c8:	00000fff 	.word	0x00000fff
 80003cc:	200001dc 	.word	0x200001dc
 80003d0:	200001e0 	.word	0x200001e0
 80003d4:	200001e4 	.word	0x200001e4
 80003d8:	200001e8 	.word	0x200001e8

080003dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003dc:	b590      	push	{r4, r7, lr}
 80003de:	b095      	sub	sp, #84	@ 0x54
 80003e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e2:	2414      	movs	r4, #20
 80003e4:	193b      	adds	r3, r7, r4
 80003e6:	0018      	movs	r0, r3
 80003e8:	233c      	movs	r3, #60	@ 0x3c
 80003ea:	001a      	movs	r2, r3
 80003ec:	2100      	movs	r1, #0
 80003ee:	f004 f89f 	bl	8004530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	0018      	movs	r0, r3
 80003f6:	2310      	movs	r3, #16
 80003f8:	001a      	movs	r2, r3
 80003fa:	2100      	movs	r1, #0
 80003fc:	f004 f898 	bl	8004530 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000400:	2380      	movs	r3, #128	@ 0x80
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	0018      	movs	r0, r3
 8000406:	f002 fbf5 	bl	8002bf4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800040a:	193b      	adds	r3, r7, r4
 800040c:	2202      	movs	r2, #2
 800040e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000410:	193b      	adds	r3, r7, r4
 8000412:	2280      	movs	r2, #128	@ 0x80
 8000414:	0052      	lsls	r2, r2, #1
 8000416:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000418:	0021      	movs	r1, r4
 800041a:	187b      	adds	r3, r7, r1
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000420:	187b      	adds	r3, r7, r1
 8000422:	2240      	movs	r2, #64	@ 0x40
 8000424:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000426:	187b      	adds	r3, r7, r1
 8000428:	2202      	movs	r2, #2
 800042a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800042c:	187b      	adds	r3, r7, r1
 800042e:	2202      	movs	r2, #2
 8000430:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000432:	187b      	adds	r3, r7, r1
 8000434:	2200      	movs	r2, #0
 8000436:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000438:	187b      	adds	r3, r7, r1
 800043a:	2208      	movs	r2, #8
 800043c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800043e:	187b      	adds	r3, r7, r1
 8000440:	22c0      	movs	r2, #192	@ 0xc0
 8000442:	02d2      	lsls	r2, r2, #11
 8000444:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000446:	187b      	adds	r3, r7, r1
 8000448:	22c0      	movs	r2, #192	@ 0xc0
 800044a:	04d2      	lsls	r2, r2, #19
 800044c:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2280      	movs	r2, #128	@ 0x80
 8000452:	0592      	lsls	r2, r2, #22
 8000454:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000456:	187b      	adds	r3, r7, r1
 8000458:	0018      	movs	r0, r3
 800045a:	f002 fc0b 	bl	8002c74 <HAL_RCC_OscConfig>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000462:	f000 f9fb 	bl	800085c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	2207      	movs	r2, #7
 800046a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	2202      	movs	r2, #2
 8000470:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	2102      	movs	r1, #2
 8000482:	0018      	movs	r0, r3
 8000484:	f002 ff56 	bl	8003334 <HAL_RCC_ClockConfig>
 8000488:	1e03      	subs	r3, r0, #0
 800048a:	d001      	beq.n	8000490 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800048c:	f000 f9e6 	bl	800085c <Error_Handler>
  }
}
 8000490:	46c0      	nop			@ (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	b015      	add	sp, #84	@ 0x54
 8000496:	bd90      	pop	{r4, r7, pc}

08000498 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	0018      	movs	r0, r3
 80004a2:	230c      	movs	r3, #12
 80004a4:	001a      	movs	r2, r3
 80004a6:	2100      	movs	r1, #0
 80004a8:	f004 f842 	bl	8004530 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004ac:	4b44      	ldr	r3, [pc, #272]	@ (80005c0 <MX_ADC1_Init+0x128>)
 80004ae:	4a45      	ldr	r2, [pc, #276]	@ (80005c4 <MX_ADC1_Init+0x12c>)
 80004b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80004b2:	4b43      	ldr	r3, [pc, #268]	@ (80005c0 <MX_ADC1_Init+0x128>)
 80004b4:	2280      	movs	r2, #128	@ 0x80
 80004b6:	0352      	lsls	r2, r2, #13
 80004b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004ba:	4b41      	ldr	r3, [pc, #260]	@ (80005c0 <MX_ADC1_Init+0x128>)
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004c0:	4b3f      	ldr	r3, [pc, #252]	@ (80005c0 <MX_ADC1_Init+0x128>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004c6:	4b3e      	ldr	r3, [pc, #248]	@ (80005c0 <MX_ADC1_Init+0x128>)
 80004c8:	2280      	movs	r2, #128	@ 0x80
 80004ca:	0392      	lsls	r2, r2, #14
 80004cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004ce:	4b3c      	ldr	r3, [pc, #240]	@ (80005c0 <MX_ADC1_Init+0x128>)
 80004d0:	2204      	movs	r2, #4
 80004d2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004d4:	4b3a      	ldr	r3, [pc, #232]	@ (80005c0 <MX_ADC1_Init+0x128>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80004da:	4b39      	ldr	r3, [pc, #228]	@ (80005c0 <MX_ADC1_Init+0x128>)
 80004dc:	2200      	movs	r2, #0
 80004de:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004e0:	4b37      	ldr	r3, [pc, #220]	@ (80005c0 <MX_ADC1_Init+0x128>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 80004e6:	4b36      	ldr	r3, [pc, #216]	@ (80005c0 <MX_ADC1_Init+0x128>)
 80004e8:	2204      	movs	r2, #4
 80004ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004ec:	4b34      	ldr	r3, [pc, #208]	@ (80005c0 <MX_ADC1_Init+0x128>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004f2:	4b33      	ldr	r3, [pc, #204]	@ (80005c0 <MX_ADC1_Init+0x128>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80004f8:	4b31      	ldr	r3, [pc, #196]	@ (80005c0 <MX_ADC1_Init+0x128>)
 80004fa:	222c      	movs	r2, #44	@ 0x2c
 80004fc:	2101      	movs	r1, #1
 80004fe:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000500:	4b2f      	ldr	r3, [pc, #188]	@ (80005c0 <MX_ADC1_Init+0x128>)
 8000502:	2200      	movs	r2, #0
 8000504:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8000506:	4b2e      	ldr	r3, [pc, #184]	@ (80005c0 <MX_ADC1_Init+0x128>)
 8000508:	2206      	movs	r2, #6
 800050a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_19CYCLES_5;
 800050c:	4b2c      	ldr	r3, [pc, #176]	@ (80005c0 <MX_ADC1_Init+0x128>)
 800050e:	2204      	movs	r2, #4
 8000510:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000512:	4b2b      	ldr	r3, [pc, #172]	@ (80005c0 <MX_ADC1_Init+0x128>)
 8000514:	223c      	movs	r2, #60	@ 0x3c
 8000516:	2100      	movs	r1, #0
 8000518:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800051a:	4b29      	ldr	r3, [pc, #164]	@ (80005c0 <MX_ADC1_Init+0x128>)
 800051c:	2200      	movs	r2, #0
 800051e:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000520:	4b27      	ldr	r3, [pc, #156]	@ (80005c0 <MX_ADC1_Init+0x128>)
 8000522:	0018      	movs	r0, r3
 8000524:	f000 fd90 	bl	8001048 <HAL_ADC_Init>
 8000528:	1e03      	subs	r3, r0, #0
 800052a:	d001      	beq.n	8000530 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800052c:	f000 f996 	bl	800085c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	4a25      	ldr	r2, [pc, #148]	@ (80005c8 <MX_ADC1_Init+0x130>)
 8000534:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2200      	movs	r2, #0
 800053a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000542:	1d3a      	adds	r2, r7, #4
 8000544:	4b1e      	ldr	r3, [pc, #120]	@ (80005c0 <MX_ADC1_Init+0x128>)
 8000546:	0011      	movs	r1, r2
 8000548:	0018      	movs	r0, r3
 800054a:	f001 f8eb 	bl	8001724 <HAL_ADC_ConfigChannel>
 800054e:	1e03      	subs	r3, r0, #0
 8000550:	d001      	beq.n	8000556 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8000552:	f000 f983 	bl	800085c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	4a1c      	ldr	r2, [pc, #112]	@ (80005cc <MX_ADC1_Init+0x134>)
 800055a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2204      	movs	r2, #4
 8000560:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000562:	1d3a      	adds	r2, r7, #4
 8000564:	4b16      	ldr	r3, [pc, #88]	@ (80005c0 <MX_ADC1_Init+0x128>)
 8000566:	0011      	movs	r1, r2
 8000568:	0018      	movs	r0, r3
 800056a:	f001 f8db 	bl	8001724 <HAL_ADC_ConfigChannel>
 800056e:	1e03      	subs	r3, r0, #0
 8000570:	d001      	beq.n	8000576 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000572:	f000 f973 	bl	800085c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	4a15      	ldr	r2, [pc, #84]	@ (80005d0 <MX_ADC1_Init+0x138>)
 800057a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2208      	movs	r2, #8
 8000580:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000582:	1d3a      	adds	r2, r7, #4
 8000584:	4b0e      	ldr	r3, [pc, #56]	@ (80005c0 <MX_ADC1_Init+0x128>)
 8000586:	0011      	movs	r1, r2
 8000588:	0018      	movs	r0, r3
 800058a:	f001 f8cb 	bl	8001724 <HAL_ADC_ConfigChannel>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000592:	f000 f963 	bl	800085c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	2201      	movs	r2, #1
 800059a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	220c      	movs	r2, #12
 80005a0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a2:	1d3a      	adds	r2, r7, #4
 80005a4:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <MX_ADC1_Init+0x128>)
 80005a6:	0011      	movs	r1, r2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 f8bb 	bl	8001724 <HAL_ADC_ConfigChannel>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 80005b2:	f000 f953 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005b6:	46c0      	nop			@ (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b004      	add	sp, #16
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			@ (mov r8, r8)
 80005c0:	20000028 	.word	0x20000028
 80005c4:	40012400 	.word	0x40012400
 80005c8:	0c000008 	.word	0x0c000008
 80005cc:	08000004 	.word	0x08000004
 80005d0:	04000002 	.word	0x04000002

080005d4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80005d8:	4b20      	ldr	r3, [pc, #128]	@ (800065c <MX_FDCAN1_Init+0x88>)
 80005da:	4a21      	ldr	r2, [pc, #132]	@ (8000660 <MX_FDCAN1_Init+0x8c>)
 80005dc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80005de:	4b1f      	ldr	r3, [pc, #124]	@ (800065c <MX_FDCAN1_Init+0x88>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80005e4:	4b1d      	ldr	r3, [pc, #116]	@ (800065c <MX_FDCAN1_Init+0x88>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80005ea:	4b1c      	ldr	r3, [pc, #112]	@ (800065c <MX_FDCAN1_Init+0x88>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80005f0:	4b1a      	ldr	r3, [pc, #104]	@ (800065c <MX_FDCAN1_Init+0x88>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80005f6:	4b19      	ldr	r3, [pc, #100]	@ (800065c <MX_FDCAN1_Init+0x88>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80005fc:	4b17      	ldr	r3, [pc, #92]	@ (800065c <MX_FDCAN1_Init+0x88>)
 80005fe:	2200      	movs	r2, #0
 8000600:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000602:	4b16      	ldr	r3, [pc, #88]	@ (800065c <MX_FDCAN1_Init+0x88>)
 8000604:	2210      	movs	r2, #16
 8000606:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000608:	4b14      	ldr	r3, [pc, #80]	@ (800065c <MX_FDCAN1_Init+0x88>)
 800060a:	2201      	movs	r2, #1
 800060c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800060e:	4b13      	ldr	r3, [pc, #76]	@ (800065c <MX_FDCAN1_Init+0x88>)
 8000610:	2202      	movs	r2, #2
 8000612:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000614:	4b11      	ldr	r3, [pc, #68]	@ (800065c <MX_FDCAN1_Init+0x88>)
 8000616:	2202      	movs	r2, #2
 8000618:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800061a:	4b10      	ldr	r3, [pc, #64]	@ (800065c <MX_FDCAN1_Init+0x88>)
 800061c:	2201      	movs	r2, #1
 800061e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000620:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <MX_FDCAN1_Init+0x88>)
 8000622:	2201      	movs	r2, #1
 8000624:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000626:	4b0d      	ldr	r3, [pc, #52]	@ (800065c <MX_FDCAN1_Init+0x88>)
 8000628:	2201      	movs	r2, #1
 800062a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800062c:	4b0b      	ldr	r3, [pc, #44]	@ (800065c <MX_FDCAN1_Init+0x88>)
 800062e:	2201      	movs	r2, #1
 8000630:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000632:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <MX_FDCAN1_Init+0x88>)
 8000634:	2200      	movs	r2, #0
 8000636:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000638:	4b08      	ldr	r3, [pc, #32]	@ (800065c <MX_FDCAN1_Init+0x88>)
 800063a:	2200      	movs	r2, #0
 800063c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800063e:	4b07      	ldr	r3, [pc, #28]	@ (800065c <MX_FDCAN1_Init+0x88>)
 8000640:	2200      	movs	r2, #0
 8000642:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000644:	4b05      	ldr	r3, [pc, #20]	@ (800065c <MX_FDCAN1_Init+0x88>)
 8000646:	0018      	movs	r0, r3
 8000648:	f001 ff5e 	bl	8002508 <HAL_FDCAN_Init>
 800064c:	1e03      	subs	r3, r0, #0
 800064e:	d001      	beq.n	8000654 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000650:	f000 f904 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000654:	46c0      	nop			@ (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	46c0      	nop			@ (mov r8, r8)
 800065c:	200000ec 	.word	0x200000ec
 8000660:	40006400 	.word	0x40006400

08000664 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000668:	4b1b      	ldr	r3, [pc, #108]	@ (80006d8 <MX_SPI1_Init+0x74>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <MX_SPI1_Init+0x78>)
 800066c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800066e:	4b1a      	ldr	r3, [pc, #104]	@ (80006d8 <MX_SPI1_Init+0x74>)
 8000670:	2282      	movs	r2, #130	@ 0x82
 8000672:	0052      	lsls	r2, r2, #1
 8000674:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000676:	4b18      	ldr	r3, [pc, #96]	@ (80006d8 <MX_SPI1_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800067c:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <MX_SPI1_Init+0x74>)
 800067e:	22e0      	movs	r2, #224	@ 0xe0
 8000680:	00d2      	lsls	r2, r2, #3
 8000682:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000684:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <MX_SPI1_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800068a:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <MX_SPI1_Init+0x74>)
 800068c:	2200      	movs	r2, #0
 800068e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000690:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <MX_SPI1_Init+0x74>)
 8000692:	2280      	movs	r2, #128	@ 0x80
 8000694:	0092      	lsls	r2, r2, #2
 8000696:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000698:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <MX_SPI1_Init+0x74>)
 800069a:	2228      	movs	r2, #40	@ 0x28
 800069c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800069e:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <MX_SPI1_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <MX_SPI1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	@ (80006d8 <MX_SPI1_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006b0:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <MX_SPI1_Init+0x74>)
 80006b2:	2207      	movs	r2, #7
 80006b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <MX_SPI1_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006bc:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <MX_SPI1_Init+0x74>)
 80006be:	2208      	movs	r2, #8
 80006c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006c2:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <MX_SPI1_Init+0x74>)
 80006c4:	0018      	movs	r0, r3
 80006c6:	f003 fa1b 	bl	8003b00 <HAL_SPI_Init>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006ce:	f000 f8c5 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000150 	.word	0x20000150
 80006dc:	40013000 	.word	0x40013000

080006e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <MX_DMA_Init+0x38>)
 80006e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <MX_DMA_Init+0x38>)
 80006ec:	2101      	movs	r1, #1
 80006ee:	430a      	orrs	r2, r1
 80006f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80006f2:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <MX_DMA_Init+0x38>)
 80006f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006f6:	2201      	movs	r2, #1
 80006f8:	4013      	ands	r3, r2
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	2009      	movs	r0, #9
 8000704:	f001 fbc6 	bl	8001e94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000708:	2009      	movs	r0, #9
 800070a:	f001 fbd8 	bl	8001ebe <HAL_NVIC_EnableIRQ>

}
 800070e:	46c0      	nop			@ (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b002      	add	sp, #8
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	40021000 	.word	0x40021000

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b089      	sub	sp, #36	@ 0x24
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	240c      	movs	r4, #12
 8000724:	193b      	adds	r3, r7, r4
 8000726:	0018      	movs	r0, r3
 8000728:	2314      	movs	r3, #20
 800072a:	001a      	movs	r2, r3
 800072c:	2100      	movs	r1, #0
 800072e:	f003 feff 	bl	8004530 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	4b46      	ldr	r3, [pc, #280]	@ (800084c <MX_GPIO_Init+0x130>)
 8000734:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000736:	4b45      	ldr	r3, [pc, #276]	@ (800084c <MX_GPIO_Init+0x130>)
 8000738:	2101      	movs	r1, #1
 800073a:	430a      	orrs	r2, r1
 800073c:	635a      	str	r2, [r3, #52]	@ 0x34
 800073e:	4b43      	ldr	r3, [pc, #268]	@ (800084c <MX_GPIO_Init+0x130>)
 8000740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000742:	2201      	movs	r2, #1
 8000744:	4013      	ands	r3, r2
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	4b40      	ldr	r3, [pc, #256]	@ (800084c <MX_GPIO_Init+0x130>)
 800074c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800074e:	4b3f      	ldr	r3, [pc, #252]	@ (800084c <MX_GPIO_Init+0x130>)
 8000750:	2102      	movs	r1, #2
 8000752:	430a      	orrs	r2, r1
 8000754:	635a      	str	r2, [r3, #52]	@ 0x34
 8000756:	4b3d      	ldr	r3, [pc, #244]	@ (800084c <MX_GPIO_Init+0x130>)
 8000758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800075a:	2202      	movs	r2, #2
 800075c:	4013      	ands	r3, r2
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000762:	4b3a      	ldr	r3, [pc, #232]	@ (800084c <MX_GPIO_Init+0x130>)
 8000764:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000766:	4b39      	ldr	r3, [pc, #228]	@ (800084c <MX_GPIO_Init+0x130>)
 8000768:	2108      	movs	r1, #8
 800076a:	430a      	orrs	r2, r1
 800076c:	635a      	str	r2, [r3, #52]	@ 0x34
 800076e:	4b37      	ldr	r3, [pc, #220]	@ (800084c <MX_GPIO_Init+0x130>)
 8000770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000772:	2208      	movs	r2, #8
 8000774:	4013      	ands	r3, r2
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LHI_3_Pin|LHI_4_Pin|LED3_Pin, GPIO_PIN_RESET);
 800077a:	4935      	ldr	r1, [pc, #212]	@ (8000850 <MX_GPIO_Init+0x134>)
 800077c:	4b35      	ldr	r3, [pc, #212]	@ (8000854 <MX_GPIO_Init+0x138>)
 800077e:	2200      	movs	r2, #0
 8000780:	0018      	movs	r0, r3
 8000782:	f002 f9ff 	bl	8002b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000786:	23c0      	movs	r3, #192	@ 0xc0
 8000788:	0099      	lsls	r1, r3, #2
 800078a:	23a0      	movs	r3, #160	@ 0xa0
 800078c:	05db      	lsls	r3, r3, #23
 800078e:	2200      	movs	r2, #0
 8000790:	0018      	movs	r0, r3
 8000792:	f002 f9f7 	bl	8002b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LHI_1_Pin|LHI_2_Pin, GPIO_PIN_RESET);
 8000796:	4b30      	ldr	r3, [pc, #192]	@ (8000858 <MX_GPIO_Init+0x13c>)
 8000798:	2200      	movs	r2, #0
 800079a:	210c      	movs	r1, #12
 800079c:	0018      	movs	r0, r3
 800079e:	f002 f9f1 	bl	8002b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LHI_3_Pin LHI_4_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LHI_3_Pin|LHI_4_Pin|LED3_Pin;
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	4a2a      	ldr	r2, [pc, #168]	@ (8000850 <MX_GPIO_Init+0x134>)
 80007a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	2201      	movs	r2, #1
 80007ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	4a25      	ldr	r2, [pc, #148]	@ (8000854 <MX_GPIO_Init+0x138>)
 80007be:	0019      	movs	r1, r3
 80007c0:	0010      	movs	r0, r2
 80007c2:	f002 f873 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 80007c6:	0021      	movs	r1, r4
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	22c0      	movs	r2, #192	@ 0xc0
 80007cc:	0092      	lsls	r2, r2, #2
 80007ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	000c      	movs	r4, r1
 80007d2:	193b      	adds	r3, r7, r4
 80007d4:	2201      	movs	r2, #1
 80007d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	193b      	adds	r3, r7, r4
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	193a      	adds	r2, r7, r4
 80007e6:	23a0      	movs	r3, #160	@ 0xa0
 80007e8:	05db      	lsls	r3, r3, #23
 80007ea:	0011      	movs	r1, r2
 80007ec:	0018      	movs	r0, r3
 80007ee:	f002 f85d 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LHI_1_Pin LHI_2_Pin */
  GPIO_InitStruct.Pin = LHI_1_Pin|LHI_2_Pin;
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	220c      	movs	r2, #12
 80007f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	2201      	movs	r2, #1
 80007fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	193b      	adds	r3, r7, r4
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800080a:	193b      	adds	r3, r7, r4
 800080c:	4a12      	ldr	r2, [pc, #72]	@ (8000858 <MX_GPIO_Init+0x13c>)
 800080e:	0019      	movs	r1, r3
 8000810:	0010      	movs	r0, r2
 8000812:	f002 f84b 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000816:	0021      	movs	r1, r4
 8000818:	187b      	adds	r3, r7, r1
 800081a:	22c0      	movs	r2, #192	@ 0xc0
 800081c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2202      	movs	r2, #2
 8000822:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	187b      	adds	r3, r7, r1
 8000838:	4a06      	ldr	r2, [pc, #24]	@ (8000854 <MX_GPIO_Init+0x138>)
 800083a:	0019      	movs	r1, r3
 800083c:	0010      	movs	r0, r2
 800083e:	f002 f835 	bl	80028ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000842:	46c0      	nop			@ (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	b009      	add	sp, #36	@ 0x24
 8000848:	bd90      	pop	{r4, r7, pc}
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	40021000 	.word	0x40021000
 8000850:	00008003 	.word	0x00008003
 8000854:	50000400 	.word	0x50000400
 8000858:	50000c00 	.word	0x50000c00

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000864:	46c0      	nop			@ (mov r8, r8)
 8000866:	e7fd      	b.n	8000864 <Error_Handler+0x8>

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <HAL_MspInit+0x4c>)
 8000870:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000872:	4b10      	ldr	r3, [pc, #64]	@ (80008b4 <HAL_MspInit+0x4c>)
 8000874:	2101      	movs	r1, #1
 8000876:	430a      	orrs	r2, r1
 8000878:	641a      	str	r2, [r3, #64]	@ 0x40
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	2201      	movs	r2, #1
 8000880:	4013      	ands	r3, r2
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <HAL_MspInit+0x4c>)
 8000888:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800088a:	4b0a      	ldr	r3, [pc, #40]	@ (80008b4 <HAL_MspInit+0x4c>)
 800088c:	2180      	movs	r1, #128	@ 0x80
 800088e:	0549      	lsls	r1, r1, #21
 8000890:	430a      	orrs	r2, r1
 8000892:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000894:	4b07      	ldr	r3, [pc, #28]	@ (80008b4 <HAL_MspInit+0x4c>)
 8000896:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000898:	2380      	movs	r3, #128	@ 0x80
 800089a:	055b      	lsls	r3, r3, #21
 800089c:	4013      	ands	r3, r2
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80008a2:	23c0      	movs	r3, #192	@ 0xc0
 80008a4:	00db      	lsls	r3, r3, #3
 80008a6:	0018      	movs	r0, r3
 80008a8:	f000 fa64 	bl	8000d74 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ac:	46c0      	nop			@ (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b002      	add	sp, #8
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40021000 	.word	0x40021000

080008b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b09f      	sub	sp, #124	@ 0x7c
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	2364      	movs	r3, #100	@ 0x64
 80008c2:	18fb      	adds	r3, r7, r3
 80008c4:	0018      	movs	r0, r3
 80008c6:	2314      	movs	r3, #20
 80008c8:	001a      	movs	r2, r3
 80008ca:	2100      	movs	r1, #0
 80008cc:	f003 fe30 	bl	8004530 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d0:	2414      	movs	r4, #20
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	0018      	movs	r0, r3
 80008d6:	2350      	movs	r3, #80	@ 0x50
 80008d8:	001a      	movs	r2, r3
 80008da:	2100      	movs	r1, #0
 80008dc:	f003 fe28 	bl	8004530 <memset>
  if(hadc->Instance==ADC1)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a39      	ldr	r2, [pc, #228]	@ (80009cc <HAL_ADC_MspInit+0x114>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d16c      	bne.n	80009c4 <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	2280      	movs	r2, #128	@ 0x80
 80008ee:	01d2      	lsls	r2, r2, #7
 80008f0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	2200      	movs	r2, #0
 80008f6:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	0018      	movs	r0, r3
 80008fc:	f002 fea4 	bl	8003648 <HAL_RCCEx_PeriphCLKConfig>
 8000900:	1e03      	subs	r3, r0, #0
 8000902:	d001      	beq.n	8000908 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000904:	f7ff ffaa 	bl	800085c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000908:	4b31      	ldr	r3, [pc, #196]	@ (80009d0 <HAL_ADC_MspInit+0x118>)
 800090a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800090c:	4b30      	ldr	r3, [pc, #192]	@ (80009d0 <HAL_ADC_MspInit+0x118>)
 800090e:	2180      	movs	r1, #128	@ 0x80
 8000910:	0349      	lsls	r1, r1, #13
 8000912:	430a      	orrs	r2, r1
 8000914:	641a      	str	r2, [r3, #64]	@ 0x40
 8000916:	4b2e      	ldr	r3, [pc, #184]	@ (80009d0 <HAL_ADC_MspInit+0x118>)
 8000918:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800091a:	2380      	movs	r3, #128	@ 0x80
 800091c:	035b      	lsls	r3, r3, #13
 800091e:	4013      	ands	r3, r2
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000924:	4b2a      	ldr	r3, [pc, #168]	@ (80009d0 <HAL_ADC_MspInit+0x118>)
 8000926:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000928:	4b29      	ldr	r3, [pc, #164]	@ (80009d0 <HAL_ADC_MspInit+0x118>)
 800092a:	2101      	movs	r1, #1
 800092c:	430a      	orrs	r2, r1
 800092e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000930:	4b27      	ldr	r3, [pc, #156]	@ (80009d0 <HAL_ADC_MspInit+0x118>)
 8000932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000934:	2201      	movs	r2, #1
 8000936:	4013      	ands	r3, r2
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = FUSE1_IS_Pin|FUSE2_IS_Pin|FUSE3_IS_Pin|FUSE4_IS_Pin;
 800093c:	2164      	movs	r1, #100	@ 0x64
 800093e:	187b      	adds	r3, r7, r1
 8000940:	220f      	movs	r2, #15
 8000942:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2203      	movs	r2, #3
 8000948:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000950:	187a      	adds	r2, r7, r1
 8000952:	23a0      	movs	r3, #160	@ 0xa0
 8000954:	05db      	lsls	r3, r3, #23
 8000956:	0011      	movs	r1, r2
 8000958:	0018      	movs	r0, r3
 800095a:	f001 ffa7 	bl	80028ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800095e:	4b1d      	ldr	r3, [pc, #116]	@ (80009d4 <HAL_ADC_MspInit+0x11c>)
 8000960:	4a1d      	ldr	r2, [pc, #116]	@ (80009d8 <HAL_ADC_MspInit+0x120>)
 8000962:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000964:	4b1b      	ldr	r3, [pc, #108]	@ (80009d4 <HAL_ADC_MspInit+0x11c>)
 8000966:	2205      	movs	r2, #5
 8000968:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800096a:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <HAL_ADC_MspInit+0x11c>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000970:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <HAL_ADC_MspInit+0x11c>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000976:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <HAL_ADC_MspInit+0x11c>)
 8000978:	2280      	movs	r2, #128	@ 0x80
 800097a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800097c:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <HAL_ADC_MspInit+0x11c>)
 800097e:	2280      	movs	r2, #128	@ 0x80
 8000980:	0052      	lsls	r2, r2, #1
 8000982:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000984:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <HAL_ADC_MspInit+0x11c>)
 8000986:	2280      	movs	r2, #128	@ 0x80
 8000988:	00d2      	lsls	r2, r2, #3
 800098a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800098c:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <HAL_ADC_MspInit+0x11c>)
 800098e:	2220      	movs	r2, #32
 8000990:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000992:	4b10      	ldr	r3, [pc, #64]	@ (80009d4 <HAL_ADC_MspInit+0x11c>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000998:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <HAL_ADC_MspInit+0x11c>)
 800099a:	0018      	movs	r0, r3
 800099c:	f001 faac 	bl	8001ef8 <HAL_DMA_Init>
 80009a0:	1e03      	subs	r3, r0, #0
 80009a2:	d001      	beq.n	80009a8 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 80009a4:	f7ff ff5a 	bl	800085c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a0a      	ldr	r2, [pc, #40]	@ (80009d4 <HAL_ADC_MspInit+0x11c>)
 80009ac:	651a      	str	r2, [r3, #80]	@ 0x50
 80009ae:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <HAL_ADC_MspInit+0x11c>)
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2100      	movs	r1, #0
 80009b8:	200c      	movs	r0, #12
 80009ba:	f001 fa6b 	bl	8001e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80009be:	200c      	movs	r0, #12
 80009c0:	f001 fa7d 	bl	8001ebe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009c4:	46c0      	nop			@ (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b01f      	add	sp, #124	@ 0x7c
 80009ca:	bd90      	pop	{r4, r7, pc}
 80009cc:	40012400 	.word	0x40012400
 80009d0:	40021000 	.word	0x40021000
 80009d4:	2000008c 	.word	0x2000008c
 80009d8:	40020008 	.word	0x40020008

080009dc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b09f      	sub	sp, #124	@ 0x7c
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	2364      	movs	r3, #100	@ 0x64
 80009e6:	18fb      	adds	r3, r7, r3
 80009e8:	0018      	movs	r0, r3
 80009ea:	2314      	movs	r3, #20
 80009ec:	001a      	movs	r2, r3
 80009ee:	2100      	movs	r1, #0
 80009f0:	f003 fd9e 	bl	8004530 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f4:	2414      	movs	r4, #20
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	0018      	movs	r0, r3
 80009fa:	2350      	movs	r3, #80	@ 0x50
 80009fc:	001a      	movs	r2, r3
 80009fe:	2100      	movs	r1, #0
 8000a00:	f003 fd96 	bl	8004530 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a23      	ldr	r2, [pc, #140]	@ (8000a98 <HAL_FDCAN_MspInit+0xbc>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d140      	bne.n	8000a90 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	2280      	movs	r2, #128	@ 0x80
 8000a12:	0492      	lsls	r2, r2, #18
 8000a14:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000a16:	193b      	adds	r3, r7, r4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a1c:	193b      	adds	r3, r7, r4
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f002 fe12 	bl	8003648 <HAL_RCCEx_PeriphCLKConfig>
 8000a24:	1e03      	subs	r3, r0, #0
 8000a26:	d001      	beq.n	8000a2c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000a28:	f7ff ff18 	bl	800085c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a9c <HAL_FDCAN_MspInit+0xc0>)
 8000a2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a30:	4b1a      	ldr	r3, [pc, #104]	@ (8000a9c <HAL_FDCAN_MspInit+0xc0>)
 8000a32:	2180      	movs	r1, #128	@ 0x80
 8000a34:	0149      	lsls	r1, r1, #5
 8000a36:	430a      	orrs	r2, r1
 8000a38:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a3a:	4b18      	ldr	r3, [pc, #96]	@ (8000a9c <HAL_FDCAN_MspInit+0xc0>)
 8000a3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a3e:	2380      	movs	r3, #128	@ 0x80
 8000a40:	015b      	lsls	r3, r3, #5
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	4b14      	ldr	r3, [pc, #80]	@ (8000a9c <HAL_FDCAN_MspInit+0xc0>)
 8000a4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a4c:	4b13      	ldr	r3, [pc, #76]	@ (8000a9c <HAL_FDCAN_MspInit+0xc0>)
 8000a4e:	2101      	movs	r1, #1
 8000a50:	430a      	orrs	r2, r1
 8000a52:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a54:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <HAL_FDCAN_MspInit+0xc0>)
 8000a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a58:	2201      	movs	r2, #1
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11 [PA9]     ------> FDCAN1_RX
    PA12 [PA10]     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a60:	2164      	movs	r1, #100	@ 0x64
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	22c0      	movs	r2, #192	@ 0xc0
 8000a66:	0152      	lsls	r2, r2, #5
 8000a68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2203      	movs	r2, #3
 8000a80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	187a      	adds	r2, r7, r1
 8000a84:	23a0      	movs	r3, #160	@ 0xa0
 8000a86:	05db      	lsls	r3, r3, #23
 8000a88:	0011      	movs	r1, r2
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f001 ff0e 	bl	80028ac <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000a90:	46c0      	nop			@ (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b01f      	add	sp, #124	@ 0x7c
 8000a96:	bd90      	pop	{r4, r7, pc}
 8000a98:	40006400 	.word	0x40006400
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b08b      	sub	sp, #44	@ 0x2c
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	2414      	movs	r4, #20
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	0018      	movs	r0, r3
 8000aae:	2314      	movs	r3, #20
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	f003 fd3c 	bl	8004530 <memset>
  if(hspi->Instance==SPI1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a1f      	ldr	r2, [pc, #124]	@ (8000b3c <HAL_SPI_MspInit+0x9c>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d138      	bne.n	8000b34 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b40 <HAL_SPI_MspInit+0xa0>)
 8000ac4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b40 <HAL_SPI_MspInit+0xa0>)
 8000ac8:	2180      	movs	r1, #128	@ 0x80
 8000aca:	0149      	lsls	r1, r1, #5
 8000acc:	430a      	orrs	r2, r1
 8000ace:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b40 <HAL_SPI_MspInit+0xa0>)
 8000ad2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ad4:	2380      	movs	r3, #128	@ 0x80
 8000ad6:	015b      	lsls	r3, r3, #5
 8000ad8:	4013      	ands	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <HAL_SPI_MspInit+0xa0>)
 8000ae0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ae2:	4b17      	ldr	r3, [pc, #92]	@ (8000b40 <HAL_SPI_MspInit+0xa0>)
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aea:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <HAL_SPI_MspInit+0xa0>)
 8000aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aee:	2201      	movs	r2, #1
 8000af0:	4013      	ands	r3, r2
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000af6:	0021      	movs	r1, r4
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	22f0      	movs	r2, #240	@ 0xf0
 8000afc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2202      	movs	r2, #2
 8000b02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	187a      	adds	r2, r7, r1
 8000b18:	23a0      	movs	r3, #160	@ 0xa0
 8000b1a:	05db      	lsls	r3, r3, #23
 8000b1c:	0011      	movs	r1, r2
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f001 fec4 	bl	80028ac <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	2019      	movs	r0, #25
 8000b2a:	f001 f9b3 	bl	8001e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b2e:	2019      	movs	r0, #25
 8000b30:	f001 f9c5 	bl	8001ebe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b34:	46c0      	nop			@ (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b00b      	add	sp, #44	@ 0x2c
 8000b3a:	bd90      	pop	{r4, r7, pc}
 8000b3c:	40013000 	.word	0x40013000
 8000b40:	40021000 	.word	0x40021000

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b48:	46c0      	nop			@ (mov r8, r8)
 8000b4a:	e7fd      	b.n	8000b48 <NMI_Handler+0x4>

08000b4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b50:	46c0      	nop			@ (mov r8, r8)
 8000b52:	e7fd      	b.n	8000b50 <HardFault_Handler+0x4>

08000b54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b58:	46c0      	nop			@ (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6c:	f000 f8c2 	bl	8000cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b70:	46c0      	nop			@ (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b7c:	4b03      	ldr	r3, [pc, #12]	@ (8000b8c <DMA1_Channel1_IRQHandler+0x14>)
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f001 fb54 	bl	800222c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b84:	46c0      	nop			@ (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	2000008c 	.word	0x2000008c

08000b90 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1,COMP2, COMP3 Interrupts (combined with EXTI 17 & 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b94:	4b03      	ldr	r3, [pc, #12]	@ (8000ba4 <ADC1_COMP_IRQHandler+0x14>)
 8000b96:	0018      	movs	r0, r3
 8000b98:	f000 fc8c 	bl	80014b4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8000b9c:	46c0      	nop			@ (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	20000028 	.word	0x20000028

08000ba8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1/I2S1 Interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000bac:	4b03      	ldr	r3, [pc, #12]	@ (8000bbc <SPI1_IRQHandler+0x14>)
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f003 fa40 	bl	8004034 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000bb4:	46c0      	nop			@ (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	20000150 	.word	0x20000150

08000bc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc4:	46c0      	nop			@ (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bcc:	480d      	ldr	r0, [pc, #52]	@ (8000c04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bd0:	f7ff fff6 	bl	8000bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd4:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bd6:	490d      	ldr	r1, [pc, #52]	@ (8000c0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c10 <LoopForever+0xe>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bec:	4c0a      	ldr	r4, [pc, #40]	@ (8000c18 <LoopForever+0x16>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bfa:	f003 fca1 	bl	8004540 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000bfe:	f7ff fb0f 	bl	8000220 <main>

08000c02 <LoopForever>:

LoopForever:
  b LoopForever
 8000c02:	e7fe      	b.n	8000c02 <LoopForever>
  ldr   r0, =_estack
 8000c04:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c10:	080045e8 	.word	0x080045e8
  ldr r2, =_sbss
 8000c14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c18:	20000204 	.word	0x20000204

08000c1c <AES_RNG_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <AES_RNG_IRQHandler>
	...

08000c20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <HAL_Init+0x3c>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <HAL_Init+0x3c>)
 8000c32:	2180      	movs	r1, #128	@ 0x80
 8000c34:	0049      	lsls	r1, r1, #1
 8000c36:	430a      	orrs	r2, r1
 8000c38:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c3a:	2003      	movs	r0, #3
 8000c3c:	f000 f810 	bl	8000c60 <HAL_InitTick>
 8000c40:	1e03      	subs	r3, r0, #0
 8000c42:	d003      	beq.n	8000c4c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c44:	1dfb      	adds	r3, r7, #7
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
 8000c4a:	e001      	b.n	8000c50 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c4c:	f7ff fe0c 	bl	8000868 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c50:	1dfb      	adds	r3, r7, #7
 8000c52:	781b      	ldrb	r3, [r3, #0]
}
 8000c54:	0018      	movs	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b002      	add	sp, #8
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40022000 	.word	0x40022000

08000c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c68:	230f      	movs	r3, #15
 8000c6a:	18fb      	adds	r3, r7, r3
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c70:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce8 <HAL_InitTick+0x88>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d02b      	beq.n	8000cd0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c78:	4b1c      	ldr	r3, [pc, #112]	@ (8000cec <HAL_InitTick+0x8c>)
 8000c7a:	681c      	ldr	r4, [r3, #0]
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <HAL_InitTick+0x88>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	0019      	movs	r1, r3
 8000c82:	23fa      	movs	r3, #250	@ 0xfa
 8000c84:	0098      	lsls	r0, r3, #2
 8000c86:	f7ff fa3f 	bl	8000108 <__udivsi3>
 8000c8a:	0003      	movs	r3, r0
 8000c8c:	0019      	movs	r1, r3
 8000c8e:	0020      	movs	r0, r4
 8000c90:	f7ff fa3a 	bl	8000108 <__udivsi3>
 8000c94:	0003      	movs	r3, r0
 8000c96:	0018      	movs	r0, r3
 8000c98:	f001 f921 	bl	8001ede <HAL_SYSTICK_Config>
 8000c9c:	1e03      	subs	r3, r0, #0
 8000c9e:	d112      	bne.n	8000cc6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	d80a      	bhi.n	8000cbc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	2301      	movs	r3, #1
 8000caa:	425b      	negs	r3, r3
 8000cac:	2200      	movs	r2, #0
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f001 f8f0 	bl	8001e94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <HAL_InitTick+0x90>)
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	e00d      	b.n	8000cd8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	18fb      	adds	r3, r7, r3
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	701a      	strb	r2, [r3, #0]
 8000cc4:	e008      	b.n	8000cd8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cc6:	230f      	movs	r3, #15
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
 8000cce:	e003      	b.n	8000cd8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000cd8:	230f      	movs	r3, #15
 8000cda:	18fb      	adds	r3, r7, r3
 8000cdc:	781b      	ldrb	r3, [r3, #0]
}
 8000cde:	0018      	movs	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b005      	add	sp, #20
 8000ce4:	bd90      	pop	{r4, r7, pc}
 8000ce6:	46c0      	nop			@ (mov r8, r8)
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	20000004 	.word	0x20000004

08000cf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cf8:	4b05      	ldr	r3, [pc, #20]	@ (8000d10 <HAL_IncTick+0x1c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	4b05      	ldr	r3, [pc, #20]	@ (8000d14 <HAL_IncTick+0x20>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	18d2      	adds	r2, r2, r3
 8000d04:	4b03      	ldr	r3, [pc, #12]	@ (8000d14 <HAL_IncTick+0x20>)
 8000d06:	601a      	str	r2, [r3, #0]
}
 8000d08:	46c0      	nop			@ (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	20000008 	.word	0x20000008
 8000d14:	20000200 	.word	0x20000200

08000d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b02      	ldr	r3, [pc, #8]	@ (8000d28 <HAL_GetTick+0x10>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	0018      	movs	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	46c0      	nop			@ (mov r8, r8)
 8000d28:	20000200 	.word	0x20000200

08000d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d34:	f7ff fff0 	bl	8000d18 <HAL_GetTick>
 8000d38:	0003      	movs	r3, r0
 8000d3a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	3301      	adds	r3, #1
 8000d44:	d005      	beq.n	8000d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d46:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <HAL_Delay+0x44>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	001a      	movs	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	189b      	adds	r3, r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d52:	46c0      	nop			@ (mov r8, r8)
 8000d54:	f7ff ffe0 	bl	8000d18 <HAL_GetTick>
 8000d58:	0002      	movs	r2, r0
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d8f7      	bhi.n	8000d54 <HAL_Delay+0x28>
  {
  }
}
 8000d64:	46c0      	nop			@ (mov r8, r8)
 8000d66:	46c0      	nop			@ (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	b004      	add	sp, #16
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	46c0      	nop			@ (mov r8, r8)
 8000d70:	20000008 	.word	0x20000008

08000d74 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000d7c:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a06      	ldr	r2, [pc, #24]	@ (8000d9c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000d82:	4013      	ands	r3, r2
 8000d84:	0019      	movs	r1, r3
 8000d86:	4b04      	ldr	r3, [pc, #16]	@ (8000d98 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	601a      	str	r2, [r3, #0]
}
 8000d8e:	46c0      	nop			@ (mov r8, r8)
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b002      	add	sp, #8
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			@ (mov r8, r8)
 8000d98:	40010000 	.word	0x40010000
 8000d9c:	fffff9ff 	.word	0xfffff9ff

08000da0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a05      	ldr	r2, [pc, #20]	@ (8000dc4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000db0:	401a      	ands	r2, r3
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	431a      	orrs	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	601a      	str	r2, [r3, #0]
}
 8000dba:	46c0      	nop			@ (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b002      	add	sp, #8
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			@ (mov r8, r8)
 8000dc4:	fe3fffff 	.word	0xfe3fffff

08000dc8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	23e0      	movs	r3, #224	@ 0xe0
 8000dd6:	045b      	lsls	r3, r3, #17
 8000dd8:	4013      	ands	r3, r2
}
 8000dda:	0018      	movs	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b002      	add	sp, #8
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b084      	sub	sp, #16
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	60f8      	str	r0, [r7, #12]
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	2104      	movs	r1, #4
 8000df6:	400a      	ands	r2, r1
 8000df8:	2107      	movs	r1, #7
 8000dfa:	4091      	lsls	r1, r2
 8000dfc:	000a      	movs	r2, r1
 8000dfe:	43d2      	mvns	r2, r2
 8000e00:	401a      	ands	r2, r3
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	2104      	movs	r1, #4
 8000e06:	400b      	ands	r3, r1
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	4099      	lsls	r1, r3
 8000e0c:	000b      	movs	r3, r1
 8000e0e:	431a      	orrs	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000e14:	46c0      	nop			@ (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b004      	add	sp, #16
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	683a      	ldr	r2, [r7, #0]
 8000e2c:	2104      	movs	r1, #4
 8000e2e:	400a      	ands	r2, r1
 8000e30:	2107      	movs	r1, #7
 8000e32:	4091      	lsls	r1, r2
 8000e34:	000a      	movs	r2, r1
 8000e36:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000e3e:	40da      	lsrs	r2, r3
 8000e40:	0013      	movs	r3, r2
}
 8000e42:	0018      	movs	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b002      	add	sp, #8
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68da      	ldr	r2, [r3, #12]
 8000e56:	23c0      	movs	r3, #192	@ 0xc0
 8000e58:	011b      	lsls	r3, r3, #4
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	d101      	bne.n	8000e62 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e000      	b.n	8000e64 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	0018      	movs	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b002      	add	sp, #8
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e7c:	68ba      	ldr	r2, [r7, #8]
 8000e7e:	211f      	movs	r1, #31
 8000e80:	400a      	ands	r2, r1
 8000e82:	210f      	movs	r1, #15
 8000e84:	4091      	lsls	r1, r2
 8000e86:	000a      	movs	r2, r1
 8000e88:	43d2      	mvns	r2, r2
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	0e9b      	lsrs	r3, r3, #26
 8000e90:	210f      	movs	r1, #15
 8000e92:	4019      	ands	r1, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	201f      	movs	r0, #31
 8000e98:	4003      	ands	r3, r0
 8000e9a:	4099      	lsls	r1, r3
 8000e9c:	000b      	movs	r3, r1
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ea4:	46c0      	nop			@ (mov r8, r8)
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b004      	add	sp, #16
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	035b      	lsls	r3, r3, #13
 8000ebe:	0b5b      	lsrs	r3, r3, #13
 8000ec0:	431a      	orrs	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b002      	add	sp, #8
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
 8000ed6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000edc:	683a      	ldr	r2, [r7, #0]
 8000ede:	0352      	lsls	r2, r2, #13
 8000ee0:	0b52      	lsrs	r2, r2, #13
 8000ee2:	43d2      	mvns	r2, r2
 8000ee4:	401a      	ands	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000eea:	46c0      	nop			@ (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	2203      	movs	r2, #3
 8000f00:	4013      	ands	r3, r2
}
 8000f02:	0018      	movs	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b002      	add	sp, #8
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	68ba      	ldr	r2, [r7, #8]
 8000f1e:	0212      	lsls	r2, r2, #8
 8000f20:	43d2      	mvns	r2, r2
 8000f22:	401a      	ands	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	021b      	lsls	r3, r3, #8
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	400b      	ands	r3, r1
 8000f2c:	4904      	ldr	r1, [pc, #16]	@ (8000f40 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000f2e:	400b      	ands	r3, r1
 8000f30:	431a      	orrs	r2, r3
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000f36:	46c0      	nop			@ (mov r8, r8)
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b004      	add	sp, #16
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			@ (mov r8, r8)
 8000f40:	07ffff00 	.word	0x07ffff00

08000f44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	4a05      	ldr	r2, [pc, #20]	@ (8000f68 <LL_ADC_EnableInternalRegulator+0x24>)
 8000f52:	4013      	ands	r3, r2
 8000f54:	2280      	movs	r2, #128	@ 0x80
 8000f56:	0552      	lsls	r2, r2, #21
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b002      	add	sp, #8
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	46c0      	nop			@ (mov r8, r8)
 8000f68:	6fffffe8 	.word	0x6fffffe8

08000f6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	2380      	movs	r3, #128	@ 0x80
 8000f7a:	055b      	lsls	r3, r3, #21
 8000f7c:	401a      	ands	r2, r3
 8000f7e:	2380      	movs	r3, #128	@ 0x80
 8000f80:	055b      	lsls	r3, r3, #21
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d101      	bne.n	8000f8a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000f86:	2301      	movs	r3, #1
 8000f88:	e000      	b.n	8000f8c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b002      	add	sp, #8
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	4a04      	ldr	r2, [pc, #16]	@ (8000fb4 <LL_ADC_Enable+0x20>)
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000fac:	46c0      	nop			@ (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b002      	add	sp, #8
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	7fffffe8 	.word	0x7fffffe8

08000fb8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	4a04      	ldr	r2, [pc, #16]	@ (8000fd8 <LL_ADC_Disable+0x20>)
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	2202      	movs	r2, #2
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000fd0:	46c0      	nop			@ (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b002      	add	sp, #8
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	7fffffe8 	.word	0x7fffffe8

08000fdc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	4013      	ands	r3, r2
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d101      	bne.n	8000ff4 <LL_ADC_IsEnabled+0x18>
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e000      	b.n	8000ff6 <LL_ADC_IsEnabled+0x1a>
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b002      	add	sp, #8
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	4a04      	ldr	r2, [pc, #16]	@ (8001020 <LL_ADC_REG_StartConversion+0x20>)
 800100e:	4013      	ands	r3, r2
 8001010:	2204      	movs	r2, #4
 8001012:	431a      	orrs	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001018:	46c0      	nop			@ (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	b002      	add	sp, #8
 800101e:	bd80      	pop	{r7, pc}
 8001020:	7fffffe8 	.word	0x7fffffe8

08001024 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	2204      	movs	r2, #4
 8001032:	4013      	ands	r3, r2
 8001034:	2b04      	cmp	r3, #4
 8001036:	d101      	bne.n	800103c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001038:	2301      	movs	r3, #1
 800103a:	e000      	b.n	800103e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800103c:	2300      	movs	r3, #0
}
 800103e:	0018      	movs	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	b002      	add	sp, #8
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001050:	231f      	movs	r3, #31
 8001052:	18fb      	adds	r3, r7, r3
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001058:	2300      	movs	r3, #0
 800105a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e17f      	b.n	800136e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10a      	bne.n	800108c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	0018      	movs	r0, r3
 800107a:	f7ff fc1d 	bl	80008b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2254      	movs	r2, #84	@ 0x54
 8001088:	2100      	movs	r1, #0
 800108a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	0018      	movs	r0, r3
 8001092:	f7ff ff6b 	bl	8000f6c <LL_ADC_IsInternalRegulatorEnabled>
 8001096:	1e03      	subs	r3, r0, #0
 8001098:	d115      	bne.n	80010c6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	0018      	movs	r0, r3
 80010a0:	f7ff ff50 	bl	8000f44 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010a4:	4bb4      	ldr	r3, [pc, #720]	@ (8001378 <HAL_ADC_Init+0x330>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	49b4      	ldr	r1, [pc, #720]	@ (800137c <HAL_ADC_Init+0x334>)
 80010aa:	0018      	movs	r0, r3
 80010ac:	f7ff f82c 	bl	8000108 <__udivsi3>
 80010b0:	0003      	movs	r3, r0
 80010b2:	3301      	adds	r3, #1
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010b8:	e002      	b.n	80010c0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3b01      	subs	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f9      	bne.n	80010ba <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	0018      	movs	r0, r3
 80010cc:	f7ff ff4e 	bl	8000f6c <LL_ADC_IsInternalRegulatorEnabled>
 80010d0:	1e03      	subs	r3, r0, #0
 80010d2:	d10f      	bne.n	80010f4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d8:	2210      	movs	r2, #16
 80010da:	431a      	orrs	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010e4:	2201      	movs	r2, #1
 80010e6:	431a      	orrs	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80010ec:	231f      	movs	r3, #31
 80010ee:	18fb      	adds	r3, r7, r3
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	0018      	movs	r0, r3
 80010fa:	f7ff ff93 	bl	8001024 <LL_ADC_REG_IsConversionOngoing>
 80010fe:	0003      	movs	r3, r0
 8001100:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001106:	2210      	movs	r2, #16
 8001108:	4013      	ands	r3, r2
 800110a:	d000      	beq.n	800110e <HAL_ADC_Init+0xc6>
 800110c:	e122      	b.n	8001354 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d000      	beq.n	8001116 <HAL_ADC_Init+0xce>
 8001114:	e11e      	b.n	8001354 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800111a:	4a99      	ldr	r2, [pc, #612]	@ (8001380 <HAL_ADC_Init+0x338>)
 800111c:	4013      	ands	r3, r2
 800111e:	2202      	movs	r2, #2
 8001120:	431a      	orrs	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	0018      	movs	r0, r3
 800112c:	f7ff ff56 	bl	8000fdc <LL_ADC_IsEnabled>
 8001130:	1e03      	subs	r3, r0, #0
 8001132:	d000      	beq.n	8001136 <HAL_ADC_Init+0xee>
 8001134:	e0ad      	b.n	8001292 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	7e1b      	ldrb	r3, [r3, #24]
 800113e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001140:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7e5b      	ldrb	r3, [r3, #25]
 8001146:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001148:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7e9b      	ldrb	r3, [r3, #26]
 800114e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001150:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	2b00      	cmp	r3, #0
 8001158:	d002      	beq.n	8001160 <HAL_ADC_Init+0x118>
 800115a:	2380      	movs	r3, #128	@ 0x80
 800115c:	015b      	lsls	r3, r3, #5
 800115e:	e000      	b.n	8001162 <HAL_ADC_Init+0x11a>
 8001160:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001162:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001168:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	2b00      	cmp	r3, #0
 8001170:	da04      	bge.n	800117c <HAL_ADC_Init+0x134>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	085b      	lsrs	r3, r3, #1
 800117a:	e001      	b.n	8001180 <HAL_ADC_Init+0x138>
 800117c:	2380      	movs	r3, #128	@ 0x80
 800117e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001180:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	212c      	movs	r1, #44	@ 0x2c
 8001186:	5c5b      	ldrb	r3, [r3, r1]
 8001188:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800118a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2220      	movs	r2, #32
 8001196:	5c9b      	ldrb	r3, [r3, r2]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d115      	bne.n	80011c8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	7e9b      	ldrb	r3, [r3, #26]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d105      	bne.n	80011b0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	2280      	movs	r2, #128	@ 0x80
 80011a8:	0252      	lsls	r2, r2, #9
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
 80011ae:	e00b      	b.n	80011c8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b4:	2220      	movs	r2, #32
 80011b6:	431a      	orrs	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011c0:	2201      	movs	r2, #1
 80011c2:	431a      	orrs	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d00a      	beq.n	80011e6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011d4:	23e0      	movs	r3, #224	@ 0xe0
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80011de:	4313      	orrs	r3, r2
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	4a65      	ldr	r2, [pc, #404]	@ (8001384 <HAL_ADC_Init+0x33c>)
 80011ee:	4013      	ands	r3, r2
 80011f0:	0019      	movs	r1, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	0f9b      	lsrs	r3, r3, #30
 8001202:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001208:	4313      	orrs	r3, r2
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	4313      	orrs	r3, r2
 800120e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	223c      	movs	r2, #60	@ 0x3c
 8001214:	5c9b      	ldrb	r3, [r3, r2]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d111      	bne.n	800123e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	0f9b      	lsrs	r3, r3, #30
 8001220:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001226:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800122c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001232:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	4313      	orrs	r3, r2
 8001238:	2201      	movs	r2, #1
 800123a:	4313      	orrs	r3, r2
 800123c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	4a50      	ldr	r2, [pc, #320]	@ (8001388 <HAL_ADC_Init+0x340>)
 8001246:	4013      	ands	r3, r2
 8001248:	0019      	movs	r1, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	430a      	orrs	r2, r1
 8001252:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	23c0      	movs	r3, #192	@ 0xc0
 800125a:	061b      	lsls	r3, r3, #24
 800125c:	429a      	cmp	r2, r3
 800125e:	d018      	beq.n	8001292 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001264:	2380      	movs	r3, #128	@ 0x80
 8001266:	05db      	lsls	r3, r3, #23
 8001268:	429a      	cmp	r2, r3
 800126a:	d012      	beq.n	8001292 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001270:	2380      	movs	r3, #128	@ 0x80
 8001272:	061b      	lsls	r3, r3, #24
 8001274:	429a      	cmp	r2, r3
 8001276:	d00c      	beq.n	8001292 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001278:	4b44      	ldr	r3, [pc, #272]	@ (800138c <HAL_ADC_Init+0x344>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a44      	ldr	r2, [pc, #272]	@ (8001390 <HAL_ADC_Init+0x348>)
 800127e:	4013      	ands	r3, r2
 8001280:	0019      	movs	r1, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	23f0      	movs	r3, #240	@ 0xf0
 8001288:	039b      	lsls	r3, r3, #14
 800128a:	401a      	ands	r2, r3
 800128c:	4b3f      	ldr	r3, [pc, #252]	@ (800138c <HAL_ADC_Init+0x344>)
 800128e:	430a      	orrs	r2, r1
 8001290:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6818      	ldr	r0, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800129a:	001a      	movs	r2, r3
 800129c:	2100      	movs	r1, #0
 800129e:	f7ff fda0 	bl	8000de2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6818      	ldr	r0, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012aa:	493a      	ldr	r1, [pc, #232]	@ (8001394 <HAL_ADC_Init+0x34c>)
 80012ac:	001a      	movs	r2, r3
 80012ae:	f7ff fd98 	bl	8000de2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d109      	bne.n	80012ce <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2110      	movs	r1, #16
 80012c6:	4249      	negs	r1, r1
 80012c8:	430a      	orrs	r2, r1
 80012ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80012cc:	e018      	b.n	8001300 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691a      	ldr	r2, [r3, #16]
 80012d2:	2380      	movs	r3, #128	@ 0x80
 80012d4:	039b      	lsls	r3, r3, #14
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d112      	bne.n	8001300 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	221c      	movs	r2, #28
 80012ea:	4013      	ands	r3, r2
 80012ec:	2210      	movs	r2, #16
 80012ee:	4252      	negs	r2, r2
 80012f0:	409a      	lsls	r2, r3
 80012f2:	0011      	movs	r1, r2
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2100      	movs	r1, #0
 8001306:	0018      	movs	r0, r3
 8001308:	f7ff fd88 	bl	8000e1c <LL_ADC_GetSamplingTimeCommonChannels>
 800130c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001312:	429a      	cmp	r2, r3
 8001314:	d10b      	bne.n	800132e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001320:	2203      	movs	r2, #3
 8001322:	4393      	bics	r3, r2
 8001324:	2201      	movs	r2, #1
 8001326:	431a      	orrs	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800132c:	e01c      	b.n	8001368 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001332:	2212      	movs	r2, #18
 8001334:	4393      	bics	r3, r2
 8001336:	2210      	movs	r2, #16
 8001338:	431a      	orrs	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001342:	2201      	movs	r2, #1
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800134a:	231f      	movs	r3, #31
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001352:	e009      	b.n	8001368 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001358:	2210      	movs	r2, #16
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001360:	231f      	movs	r3, #31
 8001362:	18fb      	adds	r3, r7, r3
 8001364:	2201      	movs	r2, #1
 8001366:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001368:	231f      	movs	r3, #31
 800136a:	18fb      	adds	r3, r7, r3
 800136c:	781b      	ldrb	r3, [r3, #0]
}
 800136e:	0018      	movs	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	b008      	add	sp, #32
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			@ (mov r8, r8)
 8001378:	20000000 	.word	0x20000000
 800137c:	00030d40 	.word	0x00030d40
 8001380:	fffffefd 	.word	0xfffffefd
 8001384:	ffde0201 	.word	0xffde0201
 8001388:	1ffffc02 	.word	0x1ffffc02
 800138c:	40012708 	.word	0x40012708
 8001390:	ffc3ffff 	.word	0xffc3ffff
 8001394:	07ffff04 	.word	0x07ffff04

08001398 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001398:	b5b0      	push	{r4, r5, r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7ff fe3b 	bl	8001024 <LL_ADC_REG_IsConversionOngoing>
 80013ae:	1e03      	subs	r3, r0, #0
 80013b0:	d16c      	bne.n	800148c <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2254      	movs	r2, #84	@ 0x54
 80013b6:	5c9b      	ldrb	r3, [r3, r2]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d101      	bne.n	80013c0 <HAL_ADC_Start_DMA+0x28>
 80013bc:	2302      	movs	r3, #2
 80013be:	e06c      	b.n	800149a <HAL_ADC_Start_DMA+0x102>
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2254      	movs	r2, #84	@ 0x54
 80013c4:	2101      	movs	r1, #1
 80013c6:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	2201      	movs	r2, #1
 80013d0:	4013      	ands	r3, r2
 80013d2:	d113      	bne.n	80013fc <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	0018      	movs	r0, r3
 80013da:	f7ff fdff 	bl	8000fdc <LL_ADC_IsEnabled>
 80013de:	1e03      	subs	r3, r0, #0
 80013e0:	d004      	beq.n	80013ec <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	0018      	movs	r0, r3
 80013e8:	f7ff fde6 	bl	8000fb8 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2101      	movs	r1, #1
 80013f8:	430a      	orrs	r2, r1
 80013fa:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80013fc:	2517      	movs	r5, #23
 80013fe:	197c      	adds	r4, r7, r5
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	0018      	movs	r0, r3
 8001404:	f000 fb66 	bl	8001ad4 <ADC_Enable>
 8001408:	0003      	movs	r3, r0
 800140a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800140c:	002c      	movs	r4, r5
 800140e:	193b      	adds	r3, r7, r4
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d13e      	bne.n	8001494 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141a:	4a22      	ldr	r2, [pc, #136]	@ (80014a4 <HAL_ADC_Start_DMA+0x10c>)
 800141c:	4013      	ands	r3, r2
 800141e:	2280      	movs	r2, #128	@ 0x80
 8001420:	0052      	lsls	r2, r2, #1
 8001422:	431a      	orrs	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2200      	movs	r2, #0
 800142c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001432:	4a1d      	ldr	r2, [pc, #116]	@ (80014a8 <HAL_ADC_Start_DMA+0x110>)
 8001434:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800143a:	4a1c      	ldr	r2, [pc, #112]	@ (80014ac <HAL_ADC_Start_DMA+0x114>)
 800143c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001442:	4a1b      	ldr	r2, [pc, #108]	@ (80014b0 <HAL_ADC_Start_DMA+0x118>)
 8001444:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	221c      	movs	r2, #28
 800144c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2254      	movs	r2, #84	@ 0x54
 8001452:	2100      	movs	r1, #0
 8001454:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2110      	movs	r1, #16
 8001462:	430a      	orrs	r2, r1
 8001464:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	3340      	adds	r3, #64	@ 0x40
 8001470:	0019      	movs	r1, r3
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	193c      	adds	r4, r7, r4
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f000 fdea 	bl	8002050 <HAL_DMA_Start_IT>
 800147c:	0003      	movs	r3, r0
 800147e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	0018      	movs	r0, r3
 8001486:	f7ff fdbb 	bl	8001000 <LL_ADC_REG_StartConversion>
 800148a:	e003      	b.n	8001494 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800148c:	2317      	movs	r3, #23
 800148e:	18fb      	adds	r3, r7, r3
 8001490:	2202      	movs	r2, #2
 8001492:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001494:	2317      	movs	r3, #23
 8001496:	18fb      	adds	r3, r7, r3
 8001498:	781b      	ldrb	r3, [r3, #0]
}
 800149a:	0018      	movs	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	b006      	add	sp, #24
 80014a0:	bdb0      	pop	{r4, r5, r7, pc}
 80014a2:	46c0      	nop			@ (mov r8, r8)
 80014a4:	fffff0fe 	.word	0xfffff0fe
 80014a8:	08001be1 	.word	0x08001be1
 80014ac:	08001ca9 	.word	0x08001ca9
 80014b0:	08001cc7 	.word	0x08001cc7

080014b4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	2202      	movs	r2, #2
 80014d4:	4013      	ands	r3, r2
 80014d6:	d017      	beq.n	8001508 <HAL_ADC_IRQHandler+0x54>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2202      	movs	r2, #2
 80014dc:	4013      	ands	r3, r2
 80014de:	d013      	beq.n	8001508 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e4:	2210      	movs	r2, #16
 80014e6:	4013      	ands	r3, r2
 80014e8:	d106      	bne.n	80014f8 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ee:	2280      	movs	r2, #128	@ 0x80
 80014f0:	0112      	lsls	r2, r2, #4
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	0018      	movs	r0, r3
 80014fc:	f000 fc0e 	bl	8001d1c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2202      	movs	r2, #2
 8001506:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	2204      	movs	r2, #4
 800150c:	4013      	ands	r3, r2
 800150e:	d003      	beq.n	8001518 <HAL_ADC_IRQHandler+0x64>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2204      	movs	r2, #4
 8001514:	4013      	ands	r3, r2
 8001516:	d107      	bne.n	8001528 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	2208      	movs	r2, #8
 800151c:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800151e:	d04d      	beq.n	80015bc <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2208      	movs	r2, #8
 8001524:	4013      	ands	r3, r2
 8001526:	d049      	beq.n	80015bc <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152c:	2210      	movs	r2, #16
 800152e:	4013      	ands	r3, r2
 8001530:	d106      	bne.n	8001540 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001536:	2280      	movs	r2, #128	@ 0x80
 8001538:	0092      	lsls	r2, r2, #2
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	0018      	movs	r0, r3
 8001546:	f7ff fc80 	bl	8000e4a <LL_ADC_REG_IsTriggerSourceSWStart>
 800154a:	1e03      	subs	r3, r0, #0
 800154c:	d02e      	beq.n	80015ac <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7e9b      	ldrb	r3, [r3, #26]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d12a      	bne.n	80015ac <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2208      	movs	r2, #8
 800155e:	4013      	ands	r3, r2
 8001560:	2b08      	cmp	r3, #8
 8001562:	d123      	bne.n	80015ac <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	0018      	movs	r0, r3
 800156a:	f7ff fd5b 	bl	8001024 <LL_ADC_REG_IsConversionOngoing>
 800156e:	1e03      	subs	r3, r0, #0
 8001570:	d110      	bne.n	8001594 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	210c      	movs	r1, #12
 800157e:	438a      	bics	r2, r1
 8001580:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001586:	4a56      	ldr	r2, [pc, #344]	@ (80016e0 <HAL_ADC_IRQHandler+0x22c>)
 8001588:	4013      	ands	r3, r2
 800158a:	2201      	movs	r2, #1
 800158c:	431a      	orrs	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	659a      	str	r2, [r3, #88]	@ 0x58
 8001592:	e00b      	b.n	80015ac <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001598:	2220      	movs	r2, #32
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a4:	2201      	movs	r2, #1
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	0018      	movs	r0, r3
 80015b0:	f000 f898 	bl	80016e4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	220c      	movs	r2, #12
 80015ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	2280      	movs	r2, #128	@ 0x80
 80015c0:	4013      	ands	r3, r2
 80015c2:	d012      	beq.n	80015ea <HAL_ADC_IRQHandler+0x136>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2280      	movs	r2, #128	@ 0x80
 80015c8:	4013      	ands	r3, r2
 80015ca:	d00e      	beq.n	80015ea <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d0:	2280      	movs	r2, #128	@ 0x80
 80015d2:	0252      	lsls	r2, r2, #9
 80015d4:	431a      	orrs	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	0018      	movs	r0, r3
 80015de:	f000 f891 	bl	8001704 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2280      	movs	r2, #128	@ 0x80
 80015e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	2380      	movs	r3, #128	@ 0x80
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4013      	ands	r3, r2
 80015f2:	d014      	beq.n	800161e <HAL_ADC_IRQHandler+0x16a>
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	2380      	movs	r3, #128	@ 0x80
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4013      	ands	r3, r2
 80015fc:	d00f      	beq.n	800161e <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001602:	2280      	movs	r2, #128	@ 0x80
 8001604:	0292      	lsls	r2, r2, #10
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	0018      	movs	r0, r3
 8001610:	f000 fb74 	bl	8001cfc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2280      	movs	r2, #128	@ 0x80
 800161a:	0052      	lsls	r2, r2, #1
 800161c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	2380      	movs	r3, #128	@ 0x80
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4013      	ands	r3, r2
 8001626:	d014      	beq.n	8001652 <HAL_ADC_IRQHandler+0x19e>
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	2380      	movs	r3, #128	@ 0x80
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4013      	ands	r3, r2
 8001630:	d00f      	beq.n	8001652 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001636:	2280      	movs	r2, #128	@ 0x80
 8001638:	02d2      	lsls	r2, r2, #11
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	0018      	movs	r0, r3
 8001644:	f000 fb62 	bl	8001d0c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2280      	movs	r2, #128	@ 0x80
 800164e:	0092      	lsls	r2, r2, #2
 8001650:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	2210      	movs	r2, #16
 8001656:	4013      	ands	r3, r2
 8001658:	d02b      	beq.n	80016b2 <HAL_ADC_IRQHandler+0x1fe>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2210      	movs	r2, #16
 800165e:	4013      	ands	r3, r2
 8001660:	d027      	beq.n	80016b2 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 800166a:	2301      	movs	r3, #1
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	e008      	b.n	8001682 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	0018      	movs	r0, r3
 8001676:	f7ff fc3c 	bl	8000ef2 <LL_ADC_REG_GetDMATransfer>
 800167a:	1e03      	subs	r3, r0, #0
 800167c:	d001      	beq.n	8001682 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 800167e:	2301      	movs	r3, #1
 8001680:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d110      	bne.n	80016aa <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168c:	2280      	movs	r2, #128	@ 0x80
 800168e:	00d2      	lsls	r2, r2, #3
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800169a:	2202      	movs	r2, #2
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	0018      	movs	r0, r3
 80016a6:	f000 f835 	bl	8001714 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2210      	movs	r2, #16
 80016b0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	2380      	movs	r3, #128	@ 0x80
 80016b6:	019b      	lsls	r3, r3, #6
 80016b8:	4013      	ands	r3, r2
 80016ba:	d00d      	beq.n	80016d8 <HAL_ADC_IRQHandler+0x224>
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	2380      	movs	r3, #128	@ 0x80
 80016c0:	019b      	lsls	r3, r3, #6
 80016c2:	4013      	ands	r3, r2
 80016c4:	d008      	beq.n	80016d8 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	0018      	movs	r0, r3
 80016ca:	f000 fb2f 	bl	8001d2c <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2280      	movs	r2, #128	@ 0x80
 80016d4:	0192      	lsls	r2, r2, #6
 80016d6:	601a      	str	r2, [r3, #0]
  }
}
 80016d8:	46c0      	nop			@ (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	b006      	add	sp, #24
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	fffffefe 	.word	0xfffffefe

080016e4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80016ec:	46c0      	nop			@ (mov r8, r8)
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b002      	add	sp, #8
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80016fc:	46c0      	nop			@ (mov r8, r8)
 80016fe:	46bd      	mov	sp, r7
 8001700:	b002      	add	sp, #8
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800170c:	46c0      	nop			@ (mov r8, r8)
 800170e:	46bd      	mov	sp, r7
 8001710:	b002      	add	sp, #8
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800171c:	46c0      	nop			@ (mov r8, r8)
 800171e:	46bd      	mov	sp, r7
 8001720:	b002      	add	sp, #8
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800172e:	2317      	movs	r3, #23
 8001730:	18fb      	adds	r3, r7, r3
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2254      	movs	r2, #84	@ 0x54
 800173e:	5c9b      	ldrb	r3, [r3, r2]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x24>
 8001744:	2302      	movs	r3, #2
 8001746:	e1c0      	b.n	8001aca <HAL_ADC_ConfigChannel+0x3a6>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2254      	movs	r2, #84	@ 0x54
 800174c:	2101      	movs	r1, #1
 800174e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	0018      	movs	r0, r3
 8001756:	f7ff fc65 	bl	8001024 <LL_ADC_REG_IsConversionOngoing>
 800175a:	1e03      	subs	r3, r0, #0
 800175c:	d000      	beq.n	8001760 <HAL_ADC_ConfigChannel+0x3c>
 800175e:	e1a3      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d100      	bne.n	800176a <HAL_ADC_ConfigChannel+0x46>
 8001768:	e143      	b.n	80019f2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691a      	ldr	r2, [r3, #16]
 800176e:	2380      	movs	r3, #128	@ 0x80
 8001770:	061b      	lsls	r3, r3, #24
 8001772:	429a      	cmp	r2, r3
 8001774:	d004      	beq.n	8001780 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800177a:	4ac1      	ldr	r2, [pc, #772]	@ (8001a80 <HAL_ADC_ConfigChannel+0x35c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d108      	bne.n	8001792 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	0019      	movs	r1, r3
 800178a:	0010      	movs	r0, r2
 800178c:	f7ff fb8e 	bl	8000eac <LL_ADC_REG_SetSequencerChAdd>
 8001790:	e0c9      	b.n	8001926 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	211f      	movs	r1, #31
 800179c:	400b      	ands	r3, r1
 800179e:	210f      	movs	r1, #15
 80017a0:	4099      	lsls	r1, r3
 80017a2:	000b      	movs	r3, r1
 80017a4:	43db      	mvns	r3, r3
 80017a6:	4013      	ands	r3, r2
 80017a8:	0019      	movs	r1, r3
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	035b      	lsls	r3, r3, #13
 80017b0:	0b5b      	lsrs	r3, r3, #13
 80017b2:	d105      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x9c>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	0e9b      	lsrs	r3, r3, #26
 80017ba:	221f      	movs	r2, #31
 80017bc:	4013      	ands	r3, r2
 80017be:	e098      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x1ce>
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2201      	movs	r2, #1
 80017c6:	4013      	ands	r3, r2
 80017c8:	d000      	beq.n	80017cc <HAL_ADC_ConfigChannel+0xa8>
 80017ca:	e091      	b.n	80018f0 <HAL_ADC_ConfigChannel+0x1cc>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2202      	movs	r2, #2
 80017d2:	4013      	ands	r3, r2
 80017d4:	d000      	beq.n	80017d8 <HAL_ADC_ConfigChannel+0xb4>
 80017d6:	e089      	b.n	80018ec <HAL_ADC_ConfigChannel+0x1c8>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2204      	movs	r2, #4
 80017de:	4013      	ands	r3, r2
 80017e0:	d000      	beq.n	80017e4 <HAL_ADC_ConfigChannel+0xc0>
 80017e2:	e081      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x1c4>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2208      	movs	r2, #8
 80017ea:	4013      	ands	r3, r2
 80017ec:	d000      	beq.n	80017f0 <HAL_ADC_ConfigChannel+0xcc>
 80017ee:	e079      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x1c0>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2210      	movs	r2, #16
 80017f6:	4013      	ands	r3, r2
 80017f8:	d000      	beq.n	80017fc <HAL_ADC_ConfigChannel+0xd8>
 80017fa:	e071      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x1bc>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2220      	movs	r2, #32
 8001802:	4013      	ands	r3, r2
 8001804:	d000      	beq.n	8001808 <HAL_ADC_ConfigChannel+0xe4>
 8001806:	e069      	b.n	80018dc <HAL_ADC_ConfigChannel+0x1b8>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2240      	movs	r2, #64	@ 0x40
 800180e:	4013      	ands	r3, r2
 8001810:	d000      	beq.n	8001814 <HAL_ADC_ConfigChannel+0xf0>
 8001812:	e061      	b.n	80018d8 <HAL_ADC_ConfigChannel+0x1b4>
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2280      	movs	r2, #128	@ 0x80
 800181a:	4013      	ands	r3, r2
 800181c:	d000      	beq.n	8001820 <HAL_ADC_ConfigChannel+0xfc>
 800181e:	e059      	b.n	80018d4 <HAL_ADC_ConfigChannel+0x1b0>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	2380      	movs	r3, #128	@ 0x80
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4013      	ands	r3, r2
 800182a:	d151      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x1ac>
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	2380      	movs	r3, #128	@ 0x80
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4013      	ands	r3, r2
 8001836:	d149      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x1a8>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	2380      	movs	r3, #128	@ 0x80
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4013      	ands	r3, r2
 8001842:	d141      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x1a4>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	2380      	movs	r3, #128	@ 0x80
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	4013      	ands	r3, r2
 800184e:	d139      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x1a0>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	2380      	movs	r3, #128	@ 0x80
 8001856:	015b      	lsls	r3, r3, #5
 8001858:	4013      	ands	r3, r2
 800185a:	d131      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x19c>
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	2380      	movs	r3, #128	@ 0x80
 8001862:	019b      	lsls	r3, r3, #6
 8001864:	4013      	ands	r3, r2
 8001866:	d129      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x198>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	2380      	movs	r3, #128	@ 0x80
 800186e:	01db      	lsls	r3, r3, #7
 8001870:	4013      	ands	r3, r2
 8001872:	d121      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x194>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	2380      	movs	r3, #128	@ 0x80
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	4013      	ands	r3, r2
 800187e:	d119      	bne.n	80018b4 <HAL_ADC_ConfigChannel+0x190>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	2380      	movs	r3, #128	@ 0x80
 8001886:	025b      	lsls	r3, r3, #9
 8001888:	4013      	ands	r3, r2
 800188a:	d111      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x18c>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	2380      	movs	r3, #128	@ 0x80
 8001892:	029b      	lsls	r3, r3, #10
 8001894:	4013      	ands	r3, r2
 8001896:	d109      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x188>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	2380      	movs	r3, #128	@ 0x80
 800189e:	02db      	lsls	r3, r3, #11
 80018a0:	4013      	ands	r3, r2
 80018a2:	d001      	beq.n	80018a8 <HAL_ADC_ConfigChannel+0x184>
 80018a4:	2312      	movs	r3, #18
 80018a6:	e024      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x1ce>
 80018a8:	2300      	movs	r3, #0
 80018aa:	e022      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x1ce>
 80018ac:	2311      	movs	r3, #17
 80018ae:	e020      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x1ce>
 80018b0:	2310      	movs	r3, #16
 80018b2:	e01e      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x1ce>
 80018b4:	230f      	movs	r3, #15
 80018b6:	e01c      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x1ce>
 80018b8:	230e      	movs	r3, #14
 80018ba:	e01a      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x1ce>
 80018bc:	230d      	movs	r3, #13
 80018be:	e018      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x1ce>
 80018c0:	230c      	movs	r3, #12
 80018c2:	e016      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x1ce>
 80018c4:	230b      	movs	r3, #11
 80018c6:	e014      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x1ce>
 80018c8:	230a      	movs	r3, #10
 80018ca:	e012      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x1ce>
 80018cc:	2309      	movs	r3, #9
 80018ce:	e010      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x1ce>
 80018d0:	2308      	movs	r3, #8
 80018d2:	e00e      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x1ce>
 80018d4:	2307      	movs	r3, #7
 80018d6:	e00c      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x1ce>
 80018d8:	2306      	movs	r3, #6
 80018da:	e00a      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x1ce>
 80018dc:	2305      	movs	r3, #5
 80018de:	e008      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x1ce>
 80018e0:	2304      	movs	r3, #4
 80018e2:	e006      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x1ce>
 80018e4:	2303      	movs	r3, #3
 80018e6:	e004      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x1ce>
 80018e8:	2302      	movs	r3, #2
 80018ea:	e002      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x1ce>
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x1ce>
 80018f0:	2300      	movs	r3, #0
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	6852      	ldr	r2, [r2, #4]
 80018f6:	201f      	movs	r0, #31
 80018f8:	4002      	ands	r2, r0
 80018fa:	4093      	lsls	r3, r2
 80018fc:	000a      	movs	r2, r1
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	089b      	lsrs	r3, r3, #2
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	429a      	cmp	r2, r3
 8001912:	d808      	bhi.n	8001926 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6818      	ldr	r0, [r3, #0]
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	6859      	ldr	r1, [r3, #4]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	001a      	movs	r2, r3
 8001922:	f7ff faa3 	bl	8000e6c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6818      	ldr	r0, [r3, #0]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	6819      	ldr	r1, [r3, #0]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	001a      	movs	r2, r3
 8001934:	f7ff faea 	bl	8000f0c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	db00      	blt.n	8001942 <HAL_ADC_ConfigChannel+0x21e>
 8001940:	e0bc      	b.n	8001abc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001942:	4b50      	ldr	r3, [pc, #320]	@ (8001a84 <HAL_ADC_ConfigChannel+0x360>)
 8001944:	0018      	movs	r0, r3
 8001946:	f7ff fa3f 	bl	8000dc8 <LL_ADC_GetCommonPathInternalCh>
 800194a:	0003      	movs	r3, r0
 800194c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a4d      	ldr	r2, [pc, #308]	@ (8001a88 <HAL_ADC_ConfigChannel+0x364>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d122      	bne.n	800199e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	2380      	movs	r3, #128	@ 0x80
 800195c:	041b      	lsls	r3, r3, #16
 800195e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001960:	d11d      	bne.n	800199e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	2280      	movs	r2, #128	@ 0x80
 8001966:	0412      	lsls	r2, r2, #16
 8001968:	4313      	orrs	r3, r2
 800196a:	4a46      	ldr	r2, [pc, #280]	@ (8001a84 <HAL_ADC_ConfigChannel+0x360>)
 800196c:	0019      	movs	r1, r3
 800196e:	0010      	movs	r0, r2
 8001970:	f7ff fa16 	bl	8000da0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001974:	4b45      	ldr	r3, [pc, #276]	@ (8001a8c <HAL_ADC_ConfigChannel+0x368>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4945      	ldr	r1, [pc, #276]	@ (8001a90 <HAL_ADC_ConfigChannel+0x36c>)
 800197a:	0018      	movs	r0, r3
 800197c:	f7fe fbc4 	bl	8000108 <__udivsi3>
 8001980:	0003      	movs	r3, r0
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	0013      	movs	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	189b      	adds	r3, r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800198e:	e002      	b.n	8001996 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3b01      	subs	r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1f9      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800199c:	e08e      	b.n	8001abc <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a3c      	ldr	r2, [pc, #240]	@ (8001a94 <HAL_ADC_ConfigChannel+0x370>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d10e      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	2380      	movs	r3, #128	@ 0x80
 80019ac:	045b      	lsls	r3, r3, #17
 80019ae:	4013      	ands	r3, r2
 80019b0:	d109      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	2280      	movs	r2, #128	@ 0x80
 80019b6:	0452      	lsls	r2, r2, #17
 80019b8:	4313      	orrs	r3, r2
 80019ba:	4a32      	ldr	r2, [pc, #200]	@ (8001a84 <HAL_ADC_ConfigChannel+0x360>)
 80019bc:	0019      	movs	r1, r3
 80019be:	0010      	movs	r0, r2
 80019c0:	f7ff f9ee 	bl	8000da0 <LL_ADC_SetCommonPathInternalCh>
 80019c4:	e07a      	b.n	8001abc <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a33      	ldr	r2, [pc, #204]	@ (8001a98 <HAL_ADC_ConfigChannel+0x374>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d000      	beq.n	80019d2 <HAL_ADC_ConfigChannel+0x2ae>
 80019d0:	e074      	b.n	8001abc <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	2380      	movs	r3, #128	@ 0x80
 80019d6:	03db      	lsls	r3, r3, #15
 80019d8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80019da:	d000      	beq.n	80019de <HAL_ADC_ConfigChannel+0x2ba>
 80019dc:	e06e      	b.n	8001abc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	2280      	movs	r2, #128	@ 0x80
 80019e2:	03d2      	lsls	r2, r2, #15
 80019e4:	4313      	orrs	r3, r2
 80019e6:	4a27      	ldr	r2, [pc, #156]	@ (8001a84 <HAL_ADC_ConfigChannel+0x360>)
 80019e8:	0019      	movs	r1, r3
 80019ea:	0010      	movs	r0, r2
 80019ec:	f7ff f9d8 	bl	8000da0 <LL_ADC_SetCommonPathInternalCh>
 80019f0:	e064      	b.n	8001abc <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691a      	ldr	r2, [r3, #16]
 80019f6:	2380      	movs	r3, #128	@ 0x80
 80019f8:	061b      	lsls	r3, r3, #24
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d004      	beq.n	8001a08 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a02:	4a1f      	ldr	r2, [pc, #124]	@ (8001a80 <HAL_ADC_ConfigChannel+0x35c>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d107      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	0019      	movs	r1, r3
 8001a12:	0010      	movs	r0, r2
 8001a14:	f7ff fa5b 	bl	8000ece <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	da4d      	bge.n	8001abc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a20:	4b18      	ldr	r3, [pc, #96]	@ (8001a84 <HAL_ADC_ConfigChannel+0x360>)
 8001a22:	0018      	movs	r0, r3
 8001a24:	f7ff f9d0 	bl	8000dc8 <LL_ADC_GetCommonPathInternalCh>
 8001a28:	0003      	movs	r3, r0
 8001a2a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a15      	ldr	r2, [pc, #84]	@ (8001a88 <HAL_ADC_ConfigChannel+0x364>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d108      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4a18      	ldr	r2, [pc, #96]	@ (8001a9c <HAL_ADC_ConfigChannel+0x378>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	4a11      	ldr	r2, [pc, #68]	@ (8001a84 <HAL_ADC_ConfigChannel+0x360>)
 8001a3e:	0019      	movs	r1, r3
 8001a40:	0010      	movs	r0, r2
 8001a42:	f7ff f9ad 	bl	8000da0 <LL_ADC_SetCommonPathInternalCh>
 8001a46:	e039      	b.n	8001abc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a11      	ldr	r2, [pc, #68]	@ (8001a94 <HAL_ADC_ConfigChannel+0x370>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d108      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4a12      	ldr	r2, [pc, #72]	@ (8001aa0 <HAL_ADC_ConfigChannel+0x37c>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	4a0a      	ldr	r2, [pc, #40]	@ (8001a84 <HAL_ADC_ConfigChannel+0x360>)
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	0010      	movs	r0, r2
 8001a5e:	f7ff f99f 	bl	8000da0 <LL_ADC_SetCommonPathInternalCh>
 8001a62:	e02b      	b.n	8001abc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a0b      	ldr	r2, [pc, #44]	@ (8001a98 <HAL_ADC_ConfigChannel+0x374>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d126      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4a0c      	ldr	r2, [pc, #48]	@ (8001aa4 <HAL_ADC_ConfigChannel+0x380>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	4a03      	ldr	r2, [pc, #12]	@ (8001a84 <HAL_ADC_ConfigChannel+0x360>)
 8001a76:	0019      	movs	r1, r3
 8001a78:	0010      	movs	r0, r2
 8001a7a:	f7ff f991 	bl	8000da0 <LL_ADC_SetCommonPathInternalCh>
 8001a7e:	e01d      	b.n	8001abc <HAL_ADC_ConfigChannel+0x398>
 8001a80:	80000004 	.word	0x80000004
 8001a84:	40012708 	.word	0x40012708
 8001a88:	b0001000 	.word	0xb0001000
 8001a8c:	20000000 	.word	0x20000000
 8001a90:	00030d40 	.word	0x00030d40
 8001a94:	b8004000 	.word	0xb8004000
 8001a98:	b4002000 	.word	0xb4002000
 8001a9c:	ff7fffff 	.word	0xff7fffff
 8001aa0:	feffffff 	.word	0xfeffffff
 8001aa4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aac:	2220      	movs	r2, #32
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ab4:	2317      	movs	r3, #23
 8001ab6:	18fb      	adds	r3, r7, r3
 8001ab8:	2201      	movs	r2, #1
 8001aba:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2254      	movs	r2, #84	@ 0x54
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001ac4:	2317      	movs	r3, #23
 8001ac6:	18fb      	adds	r3, r7, r3
 8001ac8:	781b      	ldrb	r3, [r3, #0]
}
 8001aca:	0018      	movs	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	b006      	add	sp, #24
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	46c0      	nop			@ (mov r8, r8)

08001ad4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f7ff fa79 	bl	8000fdc <LL_ADC_IsEnabled>
 8001aea:	1e03      	subs	r3, r0, #0
 8001aec:	d000      	beq.n	8001af0 <ADC_Enable+0x1c>
 8001aee:	e069      	b.n	8001bc4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	4a36      	ldr	r2, [pc, #216]	@ (8001bd0 <ADC_Enable+0xfc>)
 8001af8:	4013      	ands	r3, r2
 8001afa:	d00d      	beq.n	8001b18 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b00:	2210      	movs	r2, #16
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e056      	b.n	8001bc6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f7ff fa39 	bl	8000f94 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001b22:	4b2c      	ldr	r3, [pc, #176]	@ (8001bd4 <ADC_Enable+0x100>)
 8001b24:	0018      	movs	r0, r3
 8001b26:	f7ff f94f 	bl	8000dc8 <LL_ADC_GetCommonPathInternalCh>
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	2380      	movs	r3, #128	@ 0x80
 8001b2e:	041b      	lsls	r3, r3, #16
 8001b30:	4013      	ands	r3, r2
 8001b32:	d00f      	beq.n	8001b54 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b34:	4b28      	ldr	r3, [pc, #160]	@ (8001bd8 <ADC_Enable+0x104>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4928      	ldr	r1, [pc, #160]	@ (8001bdc <ADC_Enable+0x108>)
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f7fe fae4 	bl	8000108 <__udivsi3>
 8001b40:	0003      	movs	r3, r0
 8001b42:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001b44:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001b46:	e002      	b.n	8001b4e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1f9      	bne.n	8001b48 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	7e5b      	ldrb	r3, [r3, #25]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d033      	beq.n	8001bc4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001b5c:	f7ff f8dc 	bl	8000d18 <HAL_GetTick>
 8001b60:	0003      	movs	r3, r0
 8001b62:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b64:	e027      	b.n	8001bb6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f7ff fa36 	bl	8000fdc <LL_ADC_IsEnabled>
 8001b70:	1e03      	subs	r3, r0, #0
 8001b72:	d104      	bne.n	8001b7e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f7ff fa0b 	bl	8000f94 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b7e:	f7ff f8cb 	bl	8000d18 <HAL_GetTick>
 8001b82:	0002      	movs	r2, r0
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d914      	bls.n	8001bb6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2201      	movs	r2, #1
 8001b94:	4013      	ands	r3, r2
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d00d      	beq.n	8001bb6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9e:	2210      	movs	r2, #16
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001baa:	2201      	movs	r2, #1
 8001bac:	431a      	orrs	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e007      	b.n	8001bc6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d1d0      	bne.n	8001b66 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b004      	add	sp, #16
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	46c0      	nop			@ (mov r8, r8)
 8001bd0:	80000017 	.word	0x80000017
 8001bd4:	40012708 	.word	0x40012708
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	00030d40 	.word	0x00030d40

08001be0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf2:	2250      	movs	r2, #80	@ 0x50
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d141      	bne.n	8001c7c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfc:	2280      	movs	r2, #128	@ 0x80
 8001bfe:	0092      	lsls	r2, r2, #2
 8001c00:	431a      	orrs	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f7ff f91d 	bl	8000e4a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c10:	1e03      	subs	r3, r0, #0
 8001c12:	d02e      	beq.n	8001c72 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	7e9b      	ldrb	r3, [r3, #26]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d12a      	bne.n	8001c72 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2208      	movs	r2, #8
 8001c24:	4013      	ands	r3, r2
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d123      	bne.n	8001c72 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f7ff f9f8 	bl	8001024 <LL_ADC_REG_IsConversionOngoing>
 8001c34:	1e03      	subs	r3, r0, #0
 8001c36:	d110      	bne.n	8001c5a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	210c      	movs	r1, #12
 8001c44:	438a      	bics	r2, r1
 8001c46:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c4c:	4a15      	ldr	r2, [pc, #84]	@ (8001ca4 <ADC_DMAConvCplt+0xc4>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2201      	movs	r2, #1
 8001c52:	431a      	orrs	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	659a      	str	r2, [r3, #88]	@ 0x58
 8001c58:	e00b      	b.n	8001c72 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5e:	2220      	movs	r2, #32
 8001c60:	431a      	orrs	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	0018      	movs	r0, r3
 8001c76:	f7ff fd35 	bl	80016e4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001c7a:	e00f      	b.n	8001c9c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c80:	2210      	movs	r2, #16
 8001c82:	4013      	ands	r3, r2
 8001c84:	d004      	beq.n	8001c90 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f7ff fd43 	bl	8001714 <HAL_ADC_ErrorCallback>
}
 8001c8e:	e005      	b.n	8001c9c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	0010      	movs	r0, r2
 8001c9a:	4798      	blx	r3
}
 8001c9c:	46c0      	nop			@ (mov r8, r8)
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	b004      	add	sp, #16
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	fffffefe 	.word	0xfffffefe

08001ca8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f7ff fd1b 	bl	80016f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cbe:	46c0      	nop			@ (mov r8, r8)
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b004      	add	sp, #16
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b084      	sub	sp, #16
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd8:	2240      	movs	r2, #64	@ 0x40
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f7ff fd10 	bl	8001714 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cf4:	46c0      	nop			@ (mov r8, r8)
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b004      	add	sp, #16
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001d04:	46c0      	nop			@ (mov r8, r8)
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b002      	add	sp, #8
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001d14:	46c0      	nop			@ (mov r8, r8)
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b002      	add	sp, #8
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001d24:	46c0      	nop			@ (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b002      	add	sp, #8
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8001d34:	46c0      	nop			@ (mov r8, r8)
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b002      	add	sp, #8
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	0002      	movs	r2, r0
 8001d44:	1dfb      	adds	r3, r7, #7
 8001d46:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d48:	1dfb      	adds	r3, r7, #7
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d4e:	d809      	bhi.n	8001d64 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d50:	1dfb      	adds	r3, r7, #7
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	001a      	movs	r2, r3
 8001d56:	231f      	movs	r3, #31
 8001d58:	401a      	ands	r2, r3
 8001d5a:	4b04      	ldr	r3, [pc, #16]	@ (8001d6c <__NVIC_EnableIRQ+0x30>)
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	4091      	lsls	r1, r2
 8001d60:	000a      	movs	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001d64:	46c0      	nop			@ (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b002      	add	sp, #8
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	e000e100 	.word	0xe000e100

08001d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	0002      	movs	r2, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	1dfb      	adds	r3, r7, #7
 8001d7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d7e:	1dfb      	adds	r3, r7, #7
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d84:	d828      	bhi.n	8001dd8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d86:	4a2f      	ldr	r2, [pc, #188]	@ (8001e44 <__NVIC_SetPriority+0xd4>)
 8001d88:	1dfb      	adds	r3, r7, #7
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	b25b      	sxtb	r3, r3
 8001d8e:	089b      	lsrs	r3, r3, #2
 8001d90:	33c0      	adds	r3, #192	@ 0xc0
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	589b      	ldr	r3, [r3, r2]
 8001d96:	1dfa      	adds	r2, r7, #7
 8001d98:	7812      	ldrb	r2, [r2, #0]
 8001d9a:	0011      	movs	r1, r2
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	400a      	ands	r2, r1
 8001da0:	00d2      	lsls	r2, r2, #3
 8001da2:	21ff      	movs	r1, #255	@ 0xff
 8001da4:	4091      	lsls	r1, r2
 8001da6:	000a      	movs	r2, r1
 8001da8:	43d2      	mvns	r2, r2
 8001daa:	401a      	ands	r2, r3
 8001dac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	019b      	lsls	r3, r3, #6
 8001db2:	22ff      	movs	r2, #255	@ 0xff
 8001db4:	401a      	ands	r2, r3
 8001db6:	1dfb      	adds	r3, r7, #7
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	0018      	movs	r0, r3
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	4003      	ands	r3, r0
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dc4:	481f      	ldr	r0, [pc, #124]	@ (8001e44 <__NVIC_SetPriority+0xd4>)
 8001dc6:	1dfb      	adds	r3, r7, #7
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	b25b      	sxtb	r3, r3
 8001dcc:	089b      	lsrs	r3, r3, #2
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	33c0      	adds	r3, #192	@ 0xc0
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001dd6:	e031      	b.n	8001e3c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8001e48 <__NVIC_SetPriority+0xd8>)
 8001dda:	1dfb      	adds	r3, r7, #7
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	0019      	movs	r1, r3
 8001de0:	230f      	movs	r3, #15
 8001de2:	400b      	ands	r3, r1
 8001de4:	3b08      	subs	r3, #8
 8001de6:	089b      	lsrs	r3, r3, #2
 8001de8:	3306      	adds	r3, #6
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	18d3      	adds	r3, r2, r3
 8001dee:	3304      	adds	r3, #4
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	1dfa      	adds	r2, r7, #7
 8001df4:	7812      	ldrb	r2, [r2, #0]
 8001df6:	0011      	movs	r1, r2
 8001df8:	2203      	movs	r2, #3
 8001dfa:	400a      	ands	r2, r1
 8001dfc:	00d2      	lsls	r2, r2, #3
 8001dfe:	21ff      	movs	r1, #255	@ 0xff
 8001e00:	4091      	lsls	r1, r2
 8001e02:	000a      	movs	r2, r1
 8001e04:	43d2      	mvns	r2, r2
 8001e06:	401a      	ands	r2, r3
 8001e08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	019b      	lsls	r3, r3, #6
 8001e0e:	22ff      	movs	r2, #255	@ 0xff
 8001e10:	401a      	ands	r2, r3
 8001e12:	1dfb      	adds	r3, r7, #7
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	0018      	movs	r0, r3
 8001e18:	2303      	movs	r3, #3
 8001e1a:	4003      	ands	r3, r0
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e20:	4809      	ldr	r0, [pc, #36]	@ (8001e48 <__NVIC_SetPriority+0xd8>)
 8001e22:	1dfb      	adds	r3, r7, #7
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	001c      	movs	r4, r3
 8001e28:	230f      	movs	r3, #15
 8001e2a:	4023      	ands	r3, r4
 8001e2c:	3b08      	subs	r3, #8
 8001e2e:	089b      	lsrs	r3, r3, #2
 8001e30:	430a      	orrs	r2, r1
 8001e32:	3306      	adds	r3, #6
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	18c3      	adds	r3, r0, r3
 8001e38:	3304      	adds	r3, #4
 8001e3a:	601a      	str	r2, [r3, #0]
}
 8001e3c:	46c0      	nop			@ (mov r8, r8)
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b003      	add	sp, #12
 8001e42:	bd90      	pop	{r4, r7, pc}
 8001e44:	e000e100 	.word	0xe000e100
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	1e5a      	subs	r2, r3, #1
 8001e58:	2380      	movs	r3, #128	@ 0x80
 8001e5a:	045b      	lsls	r3, r3, #17
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d301      	bcc.n	8001e64 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e60:	2301      	movs	r3, #1
 8001e62:	e010      	b.n	8001e86 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e64:	4b0a      	ldr	r3, [pc, #40]	@ (8001e90 <SysTick_Config+0x44>)
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	3a01      	subs	r2, #1
 8001e6a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	425b      	negs	r3, r3
 8001e70:	2103      	movs	r1, #3
 8001e72:	0018      	movs	r0, r3
 8001e74:	f7ff ff7c 	bl	8001d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e78:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <SysTick_Config+0x44>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7e:	4b04      	ldr	r3, [pc, #16]	@ (8001e90 <SysTick_Config+0x44>)
 8001e80:	2207      	movs	r2, #7
 8001e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	0018      	movs	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b002      	add	sp, #8
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	46c0      	nop			@ (mov r8, r8)
 8001e90:	e000e010 	.word	0xe000e010

08001e94 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
 8001e9e:	210f      	movs	r1, #15
 8001ea0:	187b      	adds	r3, r7, r1
 8001ea2:	1c02      	adds	r2, r0, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	187b      	adds	r3, r7, r1
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	b25b      	sxtb	r3, r3
 8001eae:	0011      	movs	r1, r2
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f7ff ff5d 	bl	8001d70 <__NVIC_SetPriority>
}
 8001eb6:	46c0      	nop			@ (mov r8, r8)
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b004      	add	sp, #16
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	0002      	movs	r2, r0
 8001ec6:	1dfb      	adds	r3, r7, #7
 8001ec8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eca:	1dfb      	adds	r3, r7, #7
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	b25b      	sxtb	r3, r3
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f7ff ff33 	bl	8001d3c <__NVIC_EnableIRQ>
}
 8001ed6:	46c0      	nop			@ (mov r8, r8)
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b002      	add	sp, #8
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f7ff ffaf 	bl	8001e4c <SysTick_Config>
 8001eee:	0003      	movs	r3, r0
}
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b002      	add	sp, #8
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e091      	b.n	800202e <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	001a      	movs	r2, r3
 8001f10:	4b49      	ldr	r3, [pc, #292]	@ (8002038 <HAL_DMA_Init+0x140>)
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d810      	bhi.n	8001f38 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a48      	ldr	r2, [pc, #288]	@ (800203c <HAL_DMA_Init+0x144>)
 8001f1c:	4694      	mov	ip, r2
 8001f1e:	4463      	add	r3, ip
 8001f20:	2114      	movs	r1, #20
 8001f22:	0018      	movs	r0, r3
 8001f24:	f7fe f8f0 	bl	8000108 <__udivsi3>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	009a      	lsls	r2, r3, #2
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a43      	ldr	r2, [pc, #268]	@ (8002040 <HAL_DMA_Init+0x148>)
 8001f34:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f36:	e00f      	b.n	8001f58 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a41      	ldr	r2, [pc, #260]	@ (8002044 <HAL_DMA_Init+0x14c>)
 8001f3e:	4694      	mov	ip, r2
 8001f40:	4463      	add	r3, ip
 8001f42:	2114      	movs	r1, #20
 8001f44:	0018      	movs	r0, r3
 8001f46:	f7fe f8df 	bl	8000108 <__udivsi3>
 8001f4a:	0003      	movs	r3, r0
 8001f4c:	009a      	lsls	r2, r3, #2
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a3c      	ldr	r2, [pc, #240]	@ (8002048 <HAL_DMA_Init+0x150>)
 8001f56:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2225      	movs	r2, #37	@ 0x25
 8001f5c:	2102      	movs	r1, #2
 8001f5e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4938      	ldr	r1, [pc, #224]	@ (800204c <HAL_DMA_Init+0x154>)
 8001f6c:	400a      	ands	r2, r1
 8001f6e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6819      	ldr	r1, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	431a      	orrs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f000 fa3f 	bl	800242c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	2380      	movs	r3, #128	@ 0x80
 8001fb4:	01db      	lsls	r3, r3, #7
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d102      	bne.n	8001fc0 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fc8:	217f      	movs	r1, #127	@ 0x7f
 8001fca:	400a      	ands	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001fd6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d011      	beq.n	8002004 <HAL_DMA_Init+0x10c>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d80d      	bhi.n	8002004 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	0018      	movs	r0, r3
 8001fec:	f000 fa68 	bl	80024c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	e008      	b.n	8002016 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2225      	movs	r2, #37	@ 0x25
 8002020:	2101      	movs	r1, #1
 8002022:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2224      	movs	r2, #36	@ 0x24
 8002028:	2100      	movs	r1, #0
 800202a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b002      	add	sp, #8
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			@ (mov r8, r8)
 8002038:	40020407 	.word	0x40020407
 800203c:	bffdfff8 	.word	0xbffdfff8
 8002040:	40020000 	.word	0x40020000
 8002044:	bffdfbf8 	.word	0xbffdfbf8
 8002048:	40020400 	.word	0x40020400
 800204c:	ffff800f 	.word	0xffff800f

08002050 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
 800205c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800205e:	2317      	movs	r3, #23
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2224      	movs	r2, #36	@ 0x24
 800206a:	5c9b      	ldrb	r3, [r3, r2]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <HAL_DMA_Start_IT+0x24>
 8002070:	2302      	movs	r3, #2
 8002072:	e06f      	b.n	8002154 <HAL_DMA_Start_IT+0x104>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2224      	movs	r2, #36	@ 0x24
 8002078:	2101      	movs	r1, #1
 800207a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2225      	movs	r2, #37	@ 0x25
 8002080:	5c9b      	ldrb	r3, [r3, r2]
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b01      	cmp	r3, #1
 8002086:	d157      	bne.n	8002138 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2225      	movs	r2, #37	@ 0x25
 800208c:	2102      	movs	r1, #2
 800208e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2101      	movs	r1, #1
 80020a2:	438a      	bics	r2, r1
 80020a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	68b9      	ldr	r1, [r7, #8]
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 f981 	bl	80023b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d008      	beq.n	80020cc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	210e      	movs	r1, #14
 80020c6:	430a      	orrs	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	e00f      	b.n	80020ec <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2104      	movs	r1, #4
 80020d8:	438a      	bics	r2, r1
 80020da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	210a      	movs	r1, #10
 80020e8:	430a      	orrs	r2, r1
 80020ea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	2380      	movs	r3, #128	@ 0x80
 80020f4:	025b      	lsls	r3, r3, #9
 80020f6:	4013      	ands	r3, r2
 80020f8:	d008      	beq.n	800210c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002104:	2180      	movs	r1, #128	@ 0x80
 8002106:	0049      	lsls	r1, r1, #1
 8002108:	430a      	orrs	r2, r1
 800210a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211e:	2180      	movs	r1, #128	@ 0x80
 8002120:	0049      	lsls	r1, r1, #1
 8002122:	430a      	orrs	r2, r1
 8002124:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2101      	movs	r1, #1
 8002132:	430a      	orrs	r2, r1
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	e00a      	b.n	800214e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2280      	movs	r2, #128	@ 0x80
 800213c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2224      	movs	r2, #36	@ 0x24
 8002142:	2100      	movs	r1, #0
 8002144:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002146:	2317      	movs	r3, #23
 8002148:	18fb      	adds	r3, r7, r3
 800214a:	2201      	movs	r2, #1
 800214c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800214e:	2317      	movs	r3, #23
 8002150:	18fb      	adds	r3, r7, r3
 8002152:	781b      	ldrb	r3, [r3, #0]
}
 8002154:	0018      	movs	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	b006      	add	sp, #24
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002164:	210f      	movs	r1, #15
 8002166:	187b      	adds	r3, r7, r1
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2225      	movs	r2, #37	@ 0x25
 8002170:	5c9b      	ldrb	r3, [r3, r2]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d006      	beq.n	8002186 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2204      	movs	r2, #4
 800217c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800217e:	187b      	adds	r3, r7, r1
 8002180:	2201      	movs	r2, #1
 8002182:	701a      	strb	r2, [r3, #0]
 8002184:	e048      	b.n	8002218 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	210e      	movs	r1, #14
 8002192:	438a      	bics	r2, r1
 8002194:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2101      	movs	r1, #1
 80021a2:	438a      	bics	r2, r1
 80021a4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021b0:	491d      	ldr	r1, [pc, #116]	@ (8002228 <HAL_DMA_Abort_IT+0xcc>)
 80021b2:	400a      	ands	r2, r1
 80021b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ba:	221c      	movs	r2, #28
 80021bc:	401a      	ands	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	2101      	movs	r1, #1
 80021c4:	4091      	lsls	r1, r2
 80021c6:	000a      	movs	r2, r1
 80021c8:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80021d2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00c      	beq.n	80021f6 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e6:	4910      	ldr	r1, [pc, #64]	@ (8002228 <HAL_DMA_Abort_IT+0xcc>)
 80021e8:	400a      	ands	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80021f4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2225      	movs	r2, #37	@ 0x25
 80021fa:	2101      	movs	r1, #1
 80021fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2224      	movs	r2, #36	@ 0x24
 8002202:	2100      	movs	r1, #0
 8002204:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800220a:	2b00      	cmp	r3, #0
 800220c:	d004      	beq.n	8002218 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	0010      	movs	r0, r2
 8002216:	4798      	blx	r3
    }
  }
  return status;
 8002218:	230f      	movs	r3, #15
 800221a:	18fb      	adds	r3, r7, r3
 800221c:	781b      	ldrb	r3, [r3, #0]
}
 800221e:	0018      	movs	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	b004      	add	sp, #16
 8002224:	bd80      	pop	{r7, pc}
 8002226:	46c0      	nop			@ (mov r8, r8)
 8002228:	fffffeff 	.word	0xfffffeff

0800222c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002248:	221c      	movs	r2, #28
 800224a:	4013      	ands	r3, r2
 800224c:	2204      	movs	r2, #4
 800224e:	409a      	lsls	r2, r3
 8002250:	0013      	movs	r3, r2
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4013      	ands	r3, r2
 8002256:	d026      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x7a>
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2204      	movs	r2, #4
 800225c:	4013      	ands	r3, r2
 800225e:	d022      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2220      	movs	r2, #32
 8002268:	4013      	ands	r3, r2
 800226a:	d107      	bne.n	800227c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2104      	movs	r1, #4
 8002278:	438a      	bics	r2, r1
 800227a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002280:	221c      	movs	r2, #28
 8002282:	401a      	ands	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	2104      	movs	r1, #4
 800228a:	4091      	lsls	r1, r2
 800228c:	000a      	movs	r2, r1
 800228e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002294:	2b00      	cmp	r3, #0
 8002296:	d100      	bne.n	800229a <HAL_DMA_IRQHandler+0x6e>
 8002298:	e080      	b.n	800239c <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	0010      	movs	r0, r2
 80022a2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80022a4:	e07a      	b.n	800239c <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022aa:	221c      	movs	r2, #28
 80022ac:	4013      	ands	r3, r2
 80022ae:	2202      	movs	r2, #2
 80022b0:	409a      	lsls	r2, r3
 80022b2:	0013      	movs	r3, r2
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	4013      	ands	r3, r2
 80022b8:	d03c      	beq.n	8002334 <HAL_DMA_IRQHandler+0x108>
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2202      	movs	r2, #2
 80022be:	4013      	ands	r3, r2
 80022c0:	d038      	beq.n	8002334 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2220      	movs	r2, #32
 80022ca:	4013      	ands	r3, r2
 80022cc:	d10b      	bne.n	80022e6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	210a      	movs	r1, #10
 80022da:	438a      	bics	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2225      	movs	r2, #37	@ 0x25
 80022e2:	2101      	movs	r1, #1
 80022e4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	001a      	movs	r2, r3
 80022ec:	4b2e      	ldr	r3, [pc, #184]	@ (80023a8 <HAL_DMA_IRQHandler+0x17c>)
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d909      	bls.n	8002306 <HAL_DMA_IRQHandler+0xda>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f6:	221c      	movs	r2, #28
 80022f8:	401a      	ands	r2, r3
 80022fa:	4b2c      	ldr	r3, [pc, #176]	@ (80023ac <HAL_DMA_IRQHandler+0x180>)
 80022fc:	2102      	movs	r1, #2
 80022fe:	4091      	lsls	r1, r2
 8002300:	000a      	movs	r2, r1
 8002302:	605a      	str	r2, [r3, #4]
 8002304:	e008      	b.n	8002318 <HAL_DMA_IRQHandler+0xec>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230a:	221c      	movs	r2, #28
 800230c:	401a      	ands	r2, r3
 800230e:	4b28      	ldr	r3, [pc, #160]	@ (80023b0 <HAL_DMA_IRQHandler+0x184>)
 8002310:	2102      	movs	r1, #2
 8002312:	4091      	lsls	r1, r2
 8002314:	000a      	movs	r2, r1
 8002316:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2224      	movs	r2, #36	@ 0x24
 800231c:	2100      	movs	r1, #0
 800231e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002324:	2b00      	cmp	r3, #0
 8002326:	d039      	beq.n	800239c <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	0010      	movs	r0, r2
 8002330:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002332:	e033      	b.n	800239c <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002338:	221c      	movs	r2, #28
 800233a:	4013      	ands	r3, r2
 800233c:	2208      	movs	r2, #8
 800233e:	409a      	lsls	r2, r3
 8002340:	0013      	movs	r3, r2
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4013      	ands	r3, r2
 8002346:	d02a      	beq.n	800239e <HAL_DMA_IRQHandler+0x172>
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2208      	movs	r2, #8
 800234c:	4013      	ands	r3, r2
 800234e:	d026      	beq.n	800239e <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	210e      	movs	r1, #14
 800235c:	438a      	bics	r2, r1
 800235e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002364:	221c      	movs	r2, #28
 8002366:	401a      	ands	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236c:	2101      	movs	r1, #1
 800236e:	4091      	lsls	r1, r2
 8002370:	000a      	movs	r2, r1
 8002372:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2225      	movs	r2, #37	@ 0x25
 800237e:	2101      	movs	r1, #1
 8002380:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2224      	movs	r2, #36	@ 0x24
 8002386:	2100      	movs	r1, #0
 8002388:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800238e:	2b00      	cmp	r3, #0
 8002390:	d005      	beq.n	800239e <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	0010      	movs	r0, r2
 800239a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800239c:	46c0      	nop			@ (mov r8, r8)
 800239e:	46c0      	nop			@ (mov r8, r8)
}
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b004      	add	sp, #16
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	46c0      	nop			@ (mov r8, r8)
 80023a8:	40020080 	.word	0x40020080
 80023ac:	40020400 	.word	0x40020400
 80023b0:	40020000 	.word	0x40020000

080023b4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
 80023c0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023ca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d004      	beq.n	80023de <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80023dc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e2:	221c      	movs	r2, #28
 80023e4:	401a      	ands	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ea:	2101      	movs	r1, #1
 80023ec:	4091      	lsls	r1, r2
 80023ee:	000a      	movs	r2, r1
 80023f0:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b10      	cmp	r3, #16
 8002400:	d108      	bne.n	8002414 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002412:	e007      	b.n	8002424 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	60da      	str	r2, [r3, #12]
}
 8002424:	46c0      	nop			@ (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b004      	add	sp, #16
 800242a:	bd80      	pop	{r7, pc}

0800242c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	001a      	movs	r2, r3
 800243a:	4b1d      	ldr	r3, [pc, #116]	@ (80024b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800243c:	429a      	cmp	r2, r3
 800243e:	d814      	bhi.n	800246a <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002444:	089b      	lsrs	r3, r3, #2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4a1a      	ldr	r2, [pc, #104]	@ (80024b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800244a:	189a      	adds	r2, r3, r2
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	001a      	movs	r2, r3
 8002456:	23ff      	movs	r3, #255	@ 0xff
 8002458:	4013      	ands	r3, r2
 800245a:	3b08      	subs	r3, #8
 800245c:	2114      	movs	r1, #20
 800245e:	0018      	movs	r0, r3
 8002460:	f7fd fe52 	bl	8000108 <__udivsi3>
 8002464:	0003      	movs	r3, r0
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	e014      	b.n	8002494 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246e:	089b      	lsrs	r3, r3, #2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4a11      	ldr	r2, [pc, #68]	@ (80024b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002474:	189a      	adds	r2, r3, r2
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	001a      	movs	r2, r3
 8002480:	23ff      	movs	r3, #255	@ 0xff
 8002482:	4013      	ands	r3, r2
 8002484:	3b08      	subs	r3, #8
 8002486:	2114      	movs	r1, #20
 8002488:	0018      	movs	r0, r3
 800248a:	f7fd fe3d 	bl	8000108 <__udivsi3>
 800248e:	0003      	movs	r3, r0
 8002490:	3307      	adds	r3, #7
 8002492:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a09      	ldr	r2, [pc, #36]	@ (80024bc <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8002498:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	221f      	movs	r2, #31
 800249e:	4013      	ands	r3, r2
 80024a0:	2201      	movs	r2, #1
 80024a2:	409a      	lsls	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80024a8:	46c0      	nop			@ (mov r8, r8)
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b004      	add	sp, #16
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40020407 	.word	0x40020407
 80024b4:	40020800 	.word	0x40020800
 80024b8:	4002081c 	.word	0x4002081c
 80024bc:	40020880 	.word	0x40020880

080024c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	227f      	movs	r2, #127	@ 0x7f
 80024ce:	4013      	ands	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80024d6:	4694      	mov	ip, r2
 80024d8:	4463      	add	r3, ip
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	001a      	movs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a07      	ldr	r2, [pc, #28]	@ (8002504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80024e6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	2203      	movs	r2, #3
 80024ee:	4013      	ands	r3, r2
 80024f0:	2201      	movs	r2, #1
 80024f2:	409a      	lsls	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80024f8:	46c0      	nop			@ (mov r8, r8)
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b004      	add	sp, #16
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	1000823f 	.word	0x1000823f
 8002504:	40020940 	.word	0x40020940

08002508 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e14e      	b.n	80027b8 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	225c      	movs	r2, #92	@ 0x5c
 800251e:	5c9b      	ldrb	r3, [r3, r2]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d107      	bne.n	8002536 <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	225d      	movs	r2, #93	@ 0x5d
 800252a:	2100      	movs	r1, #0
 800252c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	0018      	movs	r0, r3
 8002532:	f7fe fa53 	bl	80009dc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	699a      	ldr	r2, [r3, #24]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2110      	movs	r1, #16
 8002542:	438a      	bics	r2, r1
 8002544:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002546:	f7fe fbe7 	bl	8000d18 <HAL_GetTick>
 800254a:	0003      	movs	r3, r0
 800254c:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800254e:	e012      	b.n	8002576 <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002550:	f7fe fbe2 	bl	8000d18 <HAL_GetTick>
 8002554:	0002      	movs	r2, r0
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b0a      	cmp	r3, #10
 800255c:	d90b      	bls.n	8002576 <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002562:	2201      	movs	r2, #1
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	225c      	movs	r2, #92	@ 0x5c
 800256e:	2103      	movs	r1, #3
 8002570:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e120      	b.n	80027b8 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	2208      	movs	r2, #8
 800257e:	4013      	ands	r3, r2
 8002580:	2b08      	cmp	r3, #8
 8002582:	d0e5      	beq.n	8002550 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699a      	ldr	r2, [r3, #24]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2101      	movs	r1, #1
 8002590:	430a      	orrs	r2, r1
 8002592:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002594:	f7fe fbc0 	bl	8000d18 <HAL_GetTick>
 8002598:	0003      	movs	r3, r0
 800259a:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800259c:	e012      	b.n	80025c4 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800259e:	f7fe fbbb 	bl	8000d18 <HAL_GetTick>
 80025a2:	0002      	movs	r2, r0
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b0a      	cmp	r3, #10
 80025aa:	d90b      	bls.n	80025c4 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025b0:	2201      	movs	r2, #1
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	225c      	movs	r2, #92	@ 0x5c
 80025bc:	2103      	movs	r1, #3
 80025be:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0f9      	b.n	80027b8 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2201      	movs	r2, #1
 80025cc:	4013      	ands	r3, r2
 80025ce:	d0e6      	beq.n	800259e <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699a      	ldr	r2, [r3, #24]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2102      	movs	r1, #2
 80025dc:	430a      	orrs	r2, r1
 80025de:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a76      	ldr	r2, [pc, #472]	@ (80027c0 <HAL_FDCAN_Init+0x2b8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d103      	bne.n	80025f2 <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80025ea:	4a76      	ldr	r2, [pc, #472]	@ (80027c4 <HAL_FDCAN_Init+0x2bc>)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	7c1b      	ldrb	r3, [r3, #16]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d108      	bne.n	800260c <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	699a      	ldr	r2, [r3, #24]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2140      	movs	r1, #64	@ 0x40
 8002606:	438a      	bics	r2, r1
 8002608:	619a      	str	r2, [r3, #24]
 800260a:	e007      	b.n	800261c <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699a      	ldr	r2, [r3, #24]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2140      	movs	r1, #64	@ 0x40
 8002618:	430a      	orrs	r2, r1
 800261a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7c5b      	ldrb	r3, [r3, #17]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d109      	bne.n	8002638 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699a      	ldr	r2, [r3, #24]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2180      	movs	r1, #128	@ 0x80
 8002630:	01c9      	lsls	r1, r1, #7
 8002632:	430a      	orrs	r2, r1
 8002634:	619a      	str	r2, [r3, #24]
 8002636:	e007      	b.n	8002648 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699a      	ldr	r2, [r3, #24]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4961      	ldr	r1, [pc, #388]	@ (80027c8 <HAL_FDCAN_Init+0x2c0>)
 8002644:	400a      	ands	r2, r1
 8002646:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	7c9b      	ldrb	r3, [r3, #18]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d108      	bne.n	8002662 <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699a      	ldr	r2, [r3, #24]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	495c      	ldr	r1, [pc, #368]	@ (80027cc <HAL_FDCAN_Init+0x2c4>)
 800265c:	400a      	ands	r2, r1
 800265e:	619a      	str	r2, [r3, #24]
 8002660:	e008      	b.n	8002674 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699a      	ldr	r2, [r3, #24]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2180      	movs	r1, #128	@ 0x80
 800266e:	0149      	lsls	r1, r1, #5
 8002670:	430a      	orrs	r2, r1
 8002672:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	4a55      	ldr	r2, [pc, #340]	@ (80027d0 <HAL_FDCAN_Init+0x2c8>)
 800267c:	4013      	ands	r3, r2
 800267e:	0019      	movs	r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	21a4      	movs	r1, #164	@ 0xa4
 8002698:	438a      	bics	r2, r1
 800269a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2110      	movs	r1, #16
 80026a8:	438a      	bics	r2, r1
 80026aa:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d108      	bne.n	80026c6 <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699a      	ldr	r2, [r3, #24]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2104      	movs	r1, #4
 80026c0:	430a      	orrs	r2, r1
 80026c2:	619a      	str	r2, [r3, #24]
 80026c4:	e02c      	b.n	8002720 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d028      	beq.n	8002720 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d01c      	beq.n	8002710 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	699a      	ldr	r2, [r3, #24]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2180      	movs	r1, #128	@ 0x80
 80026e2:	430a      	orrs	r2, r1
 80026e4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2110      	movs	r1, #16
 80026f2:	430a      	orrs	r2, r1
 80026f4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d110      	bne.n	8002720 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699a      	ldr	r2, [r3, #24]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2120      	movs	r1, #32
 800270a:	430a      	orrs	r2, r1
 800270c:	619a      	str	r2, [r3, #24]
 800270e:	e007      	b.n	8002720 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2120      	movs	r1, #32
 800271c:	430a      	orrs	r2, r1
 800271e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	3b01      	subs	r3, #1
 8002726:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	3b01      	subs	r3, #1
 800272e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002730:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002738:	431a      	orrs	r2, r3
 800273a:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	3b01      	subs	r3, #1
 8002742:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002748:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800274a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	23c0      	movs	r3, #192	@ 0xc0
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	429a      	cmp	r2, r3
 8002756:	d115      	bne.n	8002784 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002762:	3b01      	subs	r3, #1
 8002764:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002766:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276c:	3b01      	subs	r3, #1
 800276e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002770:	431a      	orrs	r2, r3
 8002772:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002778:	3b01      	subs	r3, #1
 800277a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002780:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002782:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	22c0      	movs	r2, #192	@ 0xc0
 800278a:	5899      	ldr	r1, [r3, r2]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	21c0      	movs	r1, #192	@ 0xc0
 8002798:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	0018      	movs	r0, r3
 800279e:	f000 f819 	bl	80027d4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	225c      	movs	r2, #92	@ 0x5c
 80027b2:	2101      	movs	r1, #1
 80027b4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	0018      	movs	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b004      	add	sp, #16
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40006400 	.word	0x40006400
 80027c4:	40006500 	.word	0x40006500
 80027c8:	ffffbfff 	.word	0xffffbfff
 80027cc:	ffffefff 	.word	0xffffefff
 80027d0:	fffffcff 	.word	0xfffffcff

080027d4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80027dc:	4b2f      	ldr	r3, [pc, #188]	@ (800289c <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 80027de:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a2e      	ldr	r2, [pc, #184]	@ (80028a0 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d105      	bne.n	80027f6 <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	22d4      	movs	r2, #212	@ 0xd4
 80027ee:	0092      	lsls	r2, r2, #2
 80027f0:	4694      	mov	ip, r2
 80027f2:	4463      	add	r3, ip
 80027f4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2280      	movs	r2, #128	@ 0x80
 8002802:	589b      	ldr	r3, [r3, r2]
 8002804:	4a27      	ldr	r2, [pc, #156]	@ (80028a4 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8002806:	4013      	ands	r3, r2
 8002808:	0019      	movs	r1, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800280e:	041a      	lsls	r2, r3, #16
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	2180      	movs	r1, #128	@ 0x80
 8002818:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	3370      	adds	r3, #112	@ 0x70
 800281e:	001a      	movs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2280      	movs	r2, #128	@ 0x80
 800282a:	589b      	ldr	r3, [r3, r2]
 800282c:	4a1e      	ldr	r2, [pc, #120]	@ (80028a8 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800282e:	4013      	ands	r3, r2
 8002830:	0019      	movs	r1, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002836:	061a      	lsls	r2, r3, #24
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	2180      	movs	r1, #128	@ 0x80
 8002840:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	33b0      	adds	r3, #176	@ 0xb0
 8002846:	001a      	movs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	3389      	adds	r3, #137	@ 0x89
 8002850:	33ff      	adds	r3, #255	@ 0xff
 8002852:	001a      	movs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2298      	movs	r2, #152	@ 0x98
 800285c:	0092      	lsls	r2, r2, #2
 800285e:	189a      	adds	r2, r3, r2
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	229e      	movs	r2, #158	@ 0x9e
 8002868:	0092      	lsls	r2, r2, #2
 800286a:	189a      	adds	r2, r3, r2
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	e005      	b.n	8002882 <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	3304      	adds	r3, #4
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	22d4      	movs	r2, #212	@ 0xd4
 8002886:	0092      	lsls	r2, r2, #2
 8002888:	4694      	mov	ip, r2
 800288a:	4463      	add	r3, ip
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	429a      	cmp	r2, r3
 8002890:	d3f1      	bcc.n	8002876 <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 8002892:	46c0      	nop			@ (mov r8, r8)
 8002894:	46c0      	nop			@ (mov r8, r8)
 8002896:	46bd      	mov	sp, r7
 8002898:	b004      	add	sp, #16
 800289a:	bd80      	pop	{r7, pc}
 800289c:	4000b400 	.word	0x4000b400
 80028a0:	40006800 	.word	0x40006800
 80028a4:	ffe0ffff 	.word	0xffe0ffff
 80028a8:	f0ffffff 	.word	0xf0ffffff

080028ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ba:	e14d      	b.n	8002b58 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2101      	movs	r1, #1
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	4091      	lsls	r1, r2
 80028c6:	000a      	movs	r2, r1
 80028c8:	4013      	ands	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d100      	bne.n	80028d4 <HAL_GPIO_Init+0x28>
 80028d2:	e13e      	b.n	8002b52 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2203      	movs	r2, #3
 80028da:	4013      	ands	r3, r2
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d005      	beq.n	80028ec <HAL_GPIO_Init+0x40>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2203      	movs	r2, #3
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d130      	bne.n	800294e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	2203      	movs	r2, #3
 80028f8:	409a      	lsls	r2, r3
 80028fa:	0013      	movs	r3, r2
 80028fc:	43da      	mvns	r2, r3
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	4013      	ands	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	409a      	lsls	r2, r3
 800290e:	0013      	movs	r3, r2
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002922:	2201      	movs	r2, #1
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	409a      	lsls	r2, r3
 8002928:	0013      	movs	r3, r2
 800292a:	43da      	mvns	r2, r3
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4013      	ands	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	091b      	lsrs	r3, r3, #4
 8002938:	2201      	movs	r2, #1
 800293a:	401a      	ands	r2, r3
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	409a      	lsls	r2, r3
 8002940:	0013      	movs	r3, r2
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2203      	movs	r2, #3
 8002954:	4013      	ands	r3, r2
 8002956:	2b03      	cmp	r3, #3
 8002958:	d017      	beq.n	800298a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	2203      	movs	r2, #3
 8002966:	409a      	lsls	r2, r3
 8002968:	0013      	movs	r3, r2
 800296a:	43da      	mvns	r2, r3
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4013      	ands	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	409a      	lsls	r2, r3
 800297c:	0013      	movs	r3, r2
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2203      	movs	r2, #3
 8002990:	4013      	ands	r3, r2
 8002992:	2b02      	cmp	r3, #2
 8002994:	d123      	bne.n	80029de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	08da      	lsrs	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3208      	adds	r2, #8
 800299e:	0092      	lsls	r2, r2, #2
 80029a0:	58d3      	ldr	r3, [r2, r3]
 80029a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	2207      	movs	r2, #7
 80029a8:	4013      	ands	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	220f      	movs	r2, #15
 80029ae:	409a      	lsls	r2, r3
 80029b0:	0013      	movs	r3, r2
 80029b2:	43da      	mvns	r2, r3
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4013      	ands	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2107      	movs	r1, #7
 80029c2:	400b      	ands	r3, r1
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	409a      	lsls	r2, r3
 80029c8:	0013      	movs	r3, r2
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	08da      	lsrs	r2, r3, #3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3208      	adds	r2, #8
 80029d8:	0092      	lsls	r2, r2, #2
 80029da:	6939      	ldr	r1, [r7, #16]
 80029dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	2203      	movs	r2, #3
 80029ea:	409a      	lsls	r2, r3
 80029ec:	0013      	movs	r3, r2
 80029ee:	43da      	mvns	r2, r3
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4013      	ands	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2203      	movs	r2, #3
 80029fc:	401a      	ands	r2, r3
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	409a      	lsls	r2, r3
 8002a04:	0013      	movs	r3, r2
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	23c0      	movs	r3, #192	@ 0xc0
 8002a18:	029b      	lsls	r3, r3, #10
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d100      	bne.n	8002a20 <HAL_GPIO_Init+0x174>
 8002a1e:	e098      	b.n	8002b52 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002a20:	4a53      	ldr	r2, [pc, #332]	@ (8002b70 <HAL_GPIO_Init+0x2c4>)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	089b      	lsrs	r3, r3, #2
 8002a26:	3318      	adds	r3, #24
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	589b      	ldr	r3, [r3, r2]
 8002a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2203      	movs	r2, #3
 8002a32:	4013      	ands	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	220f      	movs	r2, #15
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	0013      	movs	r3, r2
 8002a3c:	43da      	mvns	r2, r3
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4013      	ands	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	23a0      	movs	r3, #160	@ 0xa0
 8002a48:	05db      	lsls	r3, r3, #23
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d019      	beq.n	8002a82 <HAL_GPIO_Init+0x1d6>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a48      	ldr	r2, [pc, #288]	@ (8002b74 <HAL_GPIO_Init+0x2c8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d013      	beq.n	8002a7e <HAL_GPIO_Init+0x1d2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a47      	ldr	r2, [pc, #284]	@ (8002b78 <HAL_GPIO_Init+0x2cc>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00d      	beq.n	8002a7a <HAL_GPIO_Init+0x1ce>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a46      	ldr	r2, [pc, #280]	@ (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d007      	beq.n	8002a76 <HAL_GPIO_Init+0x1ca>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a45      	ldr	r2, [pc, #276]	@ (8002b80 <HAL_GPIO_Init+0x2d4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d101      	bne.n	8002a72 <HAL_GPIO_Init+0x1c6>
 8002a6e:	2304      	movs	r3, #4
 8002a70:	e008      	b.n	8002a84 <HAL_GPIO_Init+0x1d8>
 8002a72:	2305      	movs	r3, #5
 8002a74:	e006      	b.n	8002a84 <HAL_GPIO_Init+0x1d8>
 8002a76:	2303      	movs	r3, #3
 8002a78:	e004      	b.n	8002a84 <HAL_GPIO_Init+0x1d8>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e002      	b.n	8002a84 <HAL_GPIO_Init+0x1d8>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <HAL_GPIO_Init+0x1d8>
 8002a82:	2300      	movs	r3, #0
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	2103      	movs	r1, #3
 8002a88:	400a      	ands	r2, r1
 8002a8a:	00d2      	lsls	r2, r2, #3
 8002a8c:	4093      	lsls	r3, r2
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002a94:	4936      	ldr	r1, [pc, #216]	@ (8002b70 <HAL_GPIO_Init+0x2c4>)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	089b      	lsrs	r3, r3, #2
 8002a9a:	3318      	adds	r3, #24
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002aa2:	4b33      	ldr	r3, [pc, #204]	@ (8002b70 <HAL_GPIO_Init+0x2c4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	43da      	mvns	r2, r3
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	2380      	movs	r3, #128	@ 0x80
 8002ab8:	035b      	lsls	r3, r3, #13
 8002aba:	4013      	ands	r3, r2
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8002b70 <HAL_GPIO_Init+0x2c4>)
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002acc:	4b28      	ldr	r3, [pc, #160]	@ (8002b70 <HAL_GPIO_Init+0x2c4>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	43da      	mvns	r2, r3
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	2380      	movs	r3, #128	@ 0x80
 8002ae2:	039b      	lsls	r3, r3, #14
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d003      	beq.n	8002af0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002af0:	4b1f      	ldr	r3, [pc, #124]	@ (8002b70 <HAL_GPIO_Init+0x2c4>)
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002af6:	4a1e      	ldr	r2, [pc, #120]	@ (8002b70 <HAL_GPIO_Init+0x2c4>)
 8002af8:	2384      	movs	r3, #132	@ 0x84
 8002afa:	58d3      	ldr	r3, [r2, r3]
 8002afc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	43da      	mvns	r2, r3
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	2380      	movs	r3, #128	@ 0x80
 8002b0e:	029b      	lsls	r3, r3, #10
 8002b10:	4013      	ands	r3, r2
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b1c:	4914      	ldr	r1, [pc, #80]	@ (8002b70 <HAL_GPIO_Init+0x2c4>)
 8002b1e:	2284      	movs	r2, #132	@ 0x84
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002b24:	4a12      	ldr	r2, [pc, #72]	@ (8002b70 <HAL_GPIO_Init+0x2c4>)
 8002b26:	2380      	movs	r3, #128	@ 0x80
 8002b28:	58d3      	ldr	r3, [r2, r3]
 8002b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	43da      	mvns	r2, r3
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4013      	ands	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	2380      	movs	r3, #128	@ 0x80
 8002b3c:	025b      	lsls	r3, r3, #9
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b4a:	4909      	ldr	r1, [pc, #36]	@ (8002b70 <HAL_GPIO_Init+0x2c4>)
 8002b4c:	2280      	movs	r2, #128	@ 0x80
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	3301      	adds	r3, #1
 8002b56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	40da      	lsrs	r2, r3
 8002b60:	1e13      	subs	r3, r2, #0
 8002b62:	d000      	beq.n	8002b66 <HAL_GPIO_Init+0x2ba>
 8002b64:	e6aa      	b.n	80028bc <HAL_GPIO_Init+0x10>
  }
}
 8002b66:	46c0      	nop			@ (mov r8, r8)
 8002b68:	46c0      	nop			@ (mov r8, r8)
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	b006      	add	sp, #24
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40021800 	.word	0x40021800
 8002b74:	50000400 	.word	0x50000400
 8002b78:	50000800 	.word	0x50000800
 8002b7c:	50000c00 	.word	0x50000c00
 8002b80:	50001000 	.word	0x50001000

08002b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	0008      	movs	r0, r1
 8002b8e:	0011      	movs	r1, r2
 8002b90:	1cbb      	adds	r3, r7, #2
 8002b92:	1c02      	adds	r2, r0, #0
 8002b94:	801a      	strh	r2, [r3, #0]
 8002b96:	1c7b      	adds	r3, r7, #1
 8002b98:	1c0a      	adds	r2, r1, #0
 8002b9a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b9c:	1c7b      	adds	r3, r7, #1
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d004      	beq.n	8002bae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ba4:	1cbb      	adds	r3, r7, #2
 8002ba6:	881a      	ldrh	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bac:	e003      	b.n	8002bb6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bae:	1cbb      	adds	r3, r7, #2
 8002bb0:	881a      	ldrh	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002bb6:	46c0      	nop			@ (mov r8, r8)
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b002      	add	sp, #8
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	000a      	movs	r2, r1
 8002bc8:	1cbb      	adds	r3, r7, #2
 8002bca:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bd2:	1cbb      	adds	r3, r7, #2
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	041a      	lsls	r2, r3, #16
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	1cb9      	adds	r1, r7, #2
 8002be2:	8809      	ldrh	r1, [r1, #0]
 8002be4:	400b      	ands	r3, r1
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	619a      	str	r2, [r3, #24]
}
 8002bec:	46c0      	nop			@ (mov r8, r8)
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b004      	add	sp, #16
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002bfc:	4b19      	ldr	r3, [pc, #100]	@ (8002c64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a19      	ldr	r2, [pc, #100]	@ (8002c68 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	0019      	movs	r1, r3
 8002c06:	4b17      	ldr	r3, [pc, #92]	@ (8002c64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	2380      	movs	r3, #128	@ 0x80
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d11f      	bne.n	8002c58 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002c18:	4b14      	ldr	r3, [pc, #80]	@ (8002c6c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	0013      	movs	r3, r2
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	189b      	adds	r3, r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4912      	ldr	r1, [pc, #72]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002c26:	0018      	movs	r0, r3
 8002c28:	f7fd fa6e 	bl	8000108 <__udivsi3>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	3301      	adds	r3, #1
 8002c30:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c32:	e008      	b.n	8002c46 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	e001      	b.n	8002c46 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e009      	b.n	8002c5a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c46:	4b07      	ldr	r3, [pc, #28]	@ (8002c64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002c48:	695a      	ldr	r2, [r3, #20]
 8002c4a:	2380      	movs	r3, #128	@ 0x80
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	401a      	ands	r2, r3
 8002c50:	2380      	movs	r3, #128	@ 0x80
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d0ed      	beq.n	8002c34 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b004      	add	sp, #16
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			@ (mov r8, r8)
 8002c64:	40007000 	.word	0x40007000
 8002c68:	fffff9ff 	.word	0xfffff9ff
 8002c6c:	20000000 	.word	0x20000000
 8002c70:	000f4240 	.word	0x000f4240

08002c74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d102      	bne.n	8002c88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	f000 fb50 	bl	8003328 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d100      	bne.n	8002c94 <HAL_RCC_OscConfig+0x20>
 8002c92:	e07c      	b.n	8002d8e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c94:	4bc3      	ldr	r3, [pc, #780]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2238      	movs	r2, #56	@ 0x38
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c9e:	4bc1      	ldr	r3, [pc, #772]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	2b10      	cmp	r3, #16
 8002cac:	d102      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x40>
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d002      	beq.n	8002cba <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d10b      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cba:	4bba      	ldr	r3, [pc, #744]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	2380      	movs	r3, #128	@ 0x80
 8002cc0:	029b      	lsls	r3, r3, #10
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d062      	beq.n	8002d8c <HAL_RCC_OscConfig+0x118>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d15e      	bne.n	8002d8c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e32a      	b.n	8003328 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	2380      	movs	r3, #128	@ 0x80
 8002cd8:	025b      	lsls	r3, r3, #9
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d107      	bne.n	8002cee <HAL_RCC_OscConfig+0x7a>
 8002cde:	4bb1      	ldr	r3, [pc, #708]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	4bb0      	ldr	r3, [pc, #704]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002ce4:	2180      	movs	r1, #128	@ 0x80
 8002ce6:	0249      	lsls	r1, r1, #9
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	e020      	b.n	8002d30 <HAL_RCC_OscConfig+0xbc>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	23a0      	movs	r3, #160	@ 0xa0
 8002cf4:	02db      	lsls	r3, r3, #11
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d10e      	bne.n	8002d18 <HAL_RCC_OscConfig+0xa4>
 8002cfa:	4baa      	ldr	r3, [pc, #680]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	4ba9      	ldr	r3, [pc, #676]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002d00:	2180      	movs	r1, #128	@ 0x80
 8002d02:	02c9      	lsls	r1, r1, #11
 8002d04:	430a      	orrs	r2, r1
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	4ba6      	ldr	r3, [pc, #664]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4ba5      	ldr	r3, [pc, #660]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002d0e:	2180      	movs	r1, #128	@ 0x80
 8002d10:	0249      	lsls	r1, r1, #9
 8002d12:	430a      	orrs	r2, r1
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	e00b      	b.n	8002d30 <HAL_RCC_OscConfig+0xbc>
 8002d18:	4ba2      	ldr	r3, [pc, #648]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4ba1      	ldr	r3, [pc, #644]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002d1e:	49a2      	ldr	r1, [pc, #648]	@ (8002fa8 <HAL_RCC_OscConfig+0x334>)
 8002d20:	400a      	ands	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	4b9f      	ldr	r3, [pc, #636]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	4b9e      	ldr	r3, [pc, #632]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002d2a:	49a0      	ldr	r1, [pc, #640]	@ (8002fac <HAL_RCC_OscConfig+0x338>)
 8002d2c:	400a      	ands	r2, r1
 8002d2e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d014      	beq.n	8002d62 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7fd ffee 	bl	8000d18 <HAL_GetTick>
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d42:	f7fd ffe9 	bl	8000d18 <HAL_GetTick>
 8002d46:	0002      	movs	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b64      	cmp	r3, #100	@ 0x64
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e2e9      	b.n	8003328 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d54:	4b93      	ldr	r3, [pc, #588]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	2380      	movs	r3, #128	@ 0x80
 8002d5a:	029b      	lsls	r3, r3, #10
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d0f0      	beq.n	8002d42 <HAL_RCC_OscConfig+0xce>
 8002d60:	e015      	b.n	8002d8e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d62:	f7fd ffd9 	bl	8000d18 <HAL_GetTick>
 8002d66:	0003      	movs	r3, r0
 8002d68:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d6c:	f7fd ffd4 	bl	8000d18 <HAL_GetTick>
 8002d70:	0002      	movs	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b64      	cmp	r3, #100	@ 0x64
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e2d4      	b.n	8003328 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d7e:	4b89      	ldr	r3, [pc, #548]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	2380      	movs	r3, #128	@ 0x80
 8002d84:	029b      	lsls	r3, r3, #10
 8002d86:	4013      	ands	r3, r2
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0xf8>
 8002d8a:	e000      	b.n	8002d8e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2202      	movs	r2, #2
 8002d94:	4013      	ands	r3, r2
 8002d96:	d100      	bne.n	8002d9a <HAL_RCC_OscConfig+0x126>
 8002d98:	e099      	b.n	8002ece <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d9a:	4b82      	ldr	r3, [pc, #520]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2238      	movs	r2, #56	@ 0x38
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002da4:	4b7f      	ldr	r3, [pc, #508]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2203      	movs	r2, #3
 8002daa:	4013      	ands	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	2b10      	cmp	r3, #16
 8002db2:	d102      	bne.n	8002dba <HAL_RCC_OscConfig+0x146>
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d002      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d135      	bne.n	8002e2c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dc0:	4b78      	ldr	r3, [pc, #480]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	2380      	movs	r3, #128	@ 0x80
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d005      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x164>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e2a7      	b.n	8003328 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd8:	4b72      	ldr	r3, [pc, #456]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	4a74      	ldr	r2, [pc, #464]	@ (8002fb0 <HAL_RCC_OscConfig+0x33c>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	0019      	movs	r1, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	021a      	lsls	r2, r3, #8
 8002de8:	4b6e      	ldr	r3, [pc, #440]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002dea:	430a      	orrs	r2, r1
 8002dec:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d112      	bne.n	8002e1a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002df4:	4b6b      	ldr	r3, [pc, #428]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a6e      	ldr	r2, [pc, #440]	@ (8002fb4 <HAL_RCC_OscConfig+0x340>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	0019      	movs	r1, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691a      	ldr	r2, [r3, #16]
 8002e02:	4b68      	ldr	r3, [pc, #416]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002e04:	430a      	orrs	r2, r1
 8002e06:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002e08:	4b66      	ldr	r3, [pc, #408]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	0adb      	lsrs	r3, r3, #11
 8002e0e:	2207      	movs	r2, #7
 8002e10:	4013      	ands	r3, r2
 8002e12:	4a69      	ldr	r2, [pc, #420]	@ (8002fb8 <HAL_RCC_OscConfig+0x344>)
 8002e14:	40da      	lsrs	r2, r3
 8002e16:	4b69      	ldr	r3, [pc, #420]	@ (8002fbc <HAL_RCC_OscConfig+0x348>)
 8002e18:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e1a:	4b69      	ldr	r3, [pc, #420]	@ (8002fc0 <HAL_RCC_OscConfig+0x34c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f7fd ff1e 	bl	8000c60 <HAL_InitTick>
 8002e24:	1e03      	subs	r3, r0, #0
 8002e26:	d051      	beq.n	8002ecc <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e27d      	b.n	8003328 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d030      	beq.n	8002e96 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002e34:	4b5b      	ldr	r3, [pc, #364]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a5e      	ldr	r2, [pc, #376]	@ (8002fb4 <HAL_RCC_OscConfig+0x340>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	0019      	movs	r1, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	4b58      	ldr	r3, [pc, #352]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002e44:	430a      	orrs	r2, r1
 8002e46:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002e48:	4b56      	ldr	r3, [pc, #344]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4b55      	ldr	r3, [pc, #340]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002e4e:	2180      	movs	r1, #128	@ 0x80
 8002e50:	0049      	lsls	r1, r1, #1
 8002e52:	430a      	orrs	r2, r1
 8002e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e56:	f7fd ff5f 	bl	8000d18 <HAL_GetTick>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e60:	f7fd ff5a 	bl	8000d18 <HAL_GetTick>
 8002e64:	0002      	movs	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e25a      	b.n	8003328 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e72:	4b4c      	ldr	r3, [pc, #304]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	2380      	movs	r3, #128	@ 0x80
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7e:	4b49      	ldr	r3, [pc, #292]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4a4b      	ldr	r2, [pc, #300]	@ (8002fb0 <HAL_RCC_OscConfig+0x33c>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	0019      	movs	r1, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	021a      	lsls	r2, r3, #8
 8002e8e:	4b45      	ldr	r3, [pc, #276]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002e90:	430a      	orrs	r2, r1
 8002e92:	605a      	str	r2, [r3, #4]
 8002e94:	e01b      	b.n	8002ece <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002e96:	4b43      	ldr	r3, [pc, #268]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	4b42      	ldr	r3, [pc, #264]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002e9c:	4949      	ldr	r1, [pc, #292]	@ (8002fc4 <HAL_RCC_OscConfig+0x350>)
 8002e9e:	400a      	ands	r2, r1
 8002ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea2:	f7fd ff39 	bl	8000d18 <HAL_GetTick>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eac:	f7fd ff34 	bl	8000d18 <HAL_GetTick>
 8002eb0:	0002      	movs	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e234      	b.n	8003328 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ebe:	4b39      	ldr	r3, [pc, #228]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	2380      	movs	r3, #128	@ 0x80
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x238>
 8002eca:	e000      	b.n	8002ece <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ecc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2208      	movs	r2, #8
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d047      	beq.n	8002f68 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ed8:	4b32      	ldr	r3, [pc, #200]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2238      	movs	r2, #56	@ 0x38
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b18      	cmp	r3, #24
 8002ee2:	d10a      	bne.n	8002efa <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002ee4:	4b2f      	ldr	r3, [pc, #188]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002ee6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ee8:	2202      	movs	r2, #2
 8002eea:	4013      	ands	r3, r2
 8002eec:	d03c      	beq.n	8002f68 <HAL_RCC_OscConfig+0x2f4>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d138      	bne.n	8002f68 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e216      	b.n	8003328 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d019      	beq.n	8002f36 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002f02:	4b28      	ldr	r3, [pc, #160]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002f04:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f06:	4b27      	ldr	r3, [pc, #156]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002f08:	2101      	movs	r1, #1
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0e:	f7fd ff03 	bl	8000d18 <HAL_GetTick>
 8002f12:	0003      	movs	r3, r0
 8002f14:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f18:	f7fd fefe 	bl	8000d18 <HAL_GetTick>
 8002f1c:	0002      	movs	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e1fe      	b.n	8003328 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f2e:	2202      	movs	r2, #2
 8002f30:	4013      	ands	r3, r2
 8002f32:	d0f1      	beq.n	8002f18 <HAL_RCC_OscConfig+0x2a4>
 8002f34:	e018      	b.n	8002f68 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002f36:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002f38:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	438a      	bics	r2, r1
 8002f40:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f42:	f7fd fee9 	bl	8000d18 <HAL_GetTick>
 8002f46:	0003      	movs	r3, r0
 8002f48:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f4c:	f7fd fee4 	bl	8000d18 <HAL_GetTick>
 8002f50:	0002      	movs	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e1e4      	b.n	8003328 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f5e:	4b11      	ldr	r3, [pc, #68]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002f60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f62:	2202      	movs	r2, #2
 8002f64:	4013      	ands	r3, r2
 8002f66:	d1f1      	bne.n	8002f4c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d100      	bne.n	8002f74 <HAL_RCC_OscConfig+0x300>
 8002f72:	e0c7      	b.n	8003104 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f74:	231f      	movs	r3, #31
 8002f76:	18fb      	adds	r3, r7, r3
 8002f78:	2200      	movs	r2, #0
 8002f7a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f7c:	4b09      	ldr	r3, [pc, #36]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2238      	movs	r2, #56	@ 0x38
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b20      	cmp	r3, #32
 8002f86:	d11f      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002f88:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <HAL_RCC_OscConfig+0x330>)
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d100      	bne.n	8002f94 <HAL_RCC_OscConfig+0x320>
 8002f92:	e0b7      	b.n	8003104 <HAL_RCC_OscConfig+0x490>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d000      	beq.n	8002f9e <HAL_RCC_OscConfig+0x32a>
 8002f9c:	e0b2      	b.n	8003104 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e1c2      	b.n	8003328 <HAL_RCC_OscConfig+0x6b4>
 8002fa2:	46c0      	nop			@ (mov r8, r8)
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	fffeffff 	.word	0xfffeffff
 8002fac:	fffbffff 	.word	0xfffbffff
 8002fb0:	ffff80ff 	.word	0xffff80ff
 8002fb4:	ffffc7ff 	.word	0xffffc7ff
 8002fb8:	00f42400 	.word	0x00f42400
 8002fbc:	20000000 	.word	0x20000000
 8002fc0:	20000004 	.word	0x20000004
 8002fc4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fc8:	4bb5      	ldr	r3, [pc, #724]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 8002fca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fcc:	2380      	movs	r3, #128	@ 0x80
 8002fce:	055b      	lsls	r3, r3, #21
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x364>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e000      	b.n	8002fda <HAL_RCC_OscConfig+0x366>
 8002fd8:	2300      	movs	r3, #0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d011      	beq.n	8003002 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002fde:	4bb0      	ldr	r3, [pc, #704]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 8002fe0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fe2:	4baf      	ldr	r3, [pc, #700]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 8002fe4:	2180      	movs	r1, #128	@ 0x80
 8002fe6:	0549      	lsls	r1, r1, #21
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002fec:	4bac      	ldr	r3, [pc, #688]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 8002fee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ff0:	2380      	movs	r3, #128	@ 0x80
 8002ff2:	055b      	lsls	r3, r3, #21
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002ffa:	231f      	movs	r3, #31
 8002ffc:	18fb      	adds	r3, r7, r3
 8002ffe:	2201      	movs	r2, #1
 8003000:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003002:	4ba8      	ldr	r3, [pc, #672]	@ (80032a4 <HAL_RCC_OscConfig+0x630>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	2380      	movs	r3, #128	@ 0x80
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	4013      	ands	r3, r2
 800300c:	d11a      	bne.n	8003044 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800300e:	4ba5      	ldr	r3, [pc, #660]	@ (80032a4 <HAL_RCC_OscConfig+0x630>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	4ba4      	ldr	r3, [pc, #656]	@ (80032a4 <HAL_RCC_OscConfig+0x630>)
 8003014:	2180      	movs	r1, #128	@ 0x80
 8003016:	0049      	lsls	r1, r1, #1
 8003018:	430a      	orrs	r2, r1
 800301a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800301c:	f7fd fe7c 	bl	8000d18 <HAL_GetTick>
 8003020:	0003      	movs	r3, r0
 8003022:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003026:	f7fd fe77 	bl	8000d18 <HAL_GetTick>
 800302a:	0002      	movs	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e177      	b.n	8003328 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003038:	4b9a      	ldr	r3, [pc, #616]	@ (80032a4 <HAL_RCC_OscConfig+0x630>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	2380      	movs	r3, #128	@ 0x80
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4013      	ands	r3, r2
 8003042:	d0f0      	beq.n	8003026 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d106      	bne.n	800305a <HAL_RCC_OscConfig+0x3e6>
 800304c:	4b94      	ldr	r3, [pc, #592]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 800304e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003050:	4b93      	ldr	r3, [pc, #588]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 8003052:	2101      	movs	r1, #1
 8003054:	430a      	orrs	r2, r1
 8003056:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003058:	e01c      	b.n	8003094 <HAL_RCC_OscConfig+0x420>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b05      	cmp	r3, #5
 8003060:	d10c      	bne.n	800307c <HAL_RCC_OscConfig+0x408>
 8003062:	4b8f      	ldr	r3, [pc, #572]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 8003064:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003066:	4b8e      	ldr	r3, [pc, #568]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 8003068:	2104      	movs	r1, #4
 800306a:	430a      	orrs	r2, r1
 800306c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800306e:	4b8c      	ldr	r3, [pc, #560]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 8003070:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003072:	4b8b      	ldr	r3, [pc, #556]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 8003074:	2101      	movs	r1, #1
 8003076:	430a      	orrs	r2, r1
 8003078:	65da      	str	r2, [r3, #92]	@ 0x5c
 800307a:	e00b      	b.n	8003094 <HAL_RCC_OscConfig+0x420>
 800307c:	4b88      	ldr	r3, [pc, #544]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 800307e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003080:	4b87      	ldr	r3, [pc, #540]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 8003082:	2101      	movs	r1, #1
 8003084:	438a      	bics	r2, r1
 8003086:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003088:	4b85      	ldr	r3, [pc, #532]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 800308a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800308c:	4b84      	ldr	r3, [pc, #528]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 800308e:	2104      	movs	r1, #4
 8003090:	438a      	bics	r2, r1
 8003092:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d014      	beq.n	80030c6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fd fe3c 	bl	8000d18 <HAL_GetTick>
 80030a0:	0003      	movs	r3, r0
 80030a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a4:	e009      	b.n	80030ba <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a6:	f7fd fe37 	bl	8000d18 <HAL_GetTick>
 80030aa:	0002      	movs	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	4a7d      	ldr	r2, [pc, #500]	@ (80032a8 <HAL_RCC_OscConfig+0x634>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e136      	b.n	8003328 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ba:	4b79      	ldr	r3, [pc, #484]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 80030bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030be:	2202      	movs	r2, #2
 80030c0:	4013      	ands	r3, r2
 80030c2:	d0f0      	beq.n	80030a6 <HAL_RCC_OscConfig+0x432>
 80030c4:	e013      	b.n	80030ee <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c6:	f7fd fe27 	bl	8000d18 <HAL_GetTick>
 80030ca:	0003      	movs	r3, r0
 80030cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030ce:	e009      	b.n	80030e4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d0:	f7fd fe22 	bl	8000d18 <HAL_GetTick>
 80030d4:	0002      	movs	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	4a73      	ldr	r2, [pc, #460]	@ (80032a8 <HAL_RCC_OscConfig+0x634>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e121      	b.n	8003328 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030e4:	4b6e      	ldr	r3, [pc, #440]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 80030e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e8:	2202      	movs	r2, #2
 80030ea:	4013      	ands	r3, r2
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80030ee:	231f      	movs	r3, #31
 80030f0:	18fb      	adds	r3, r7, r3
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d105      	bne.n	8003104 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80030f8:	4b69      	ldr	r3, [pc, #420]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 80030fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030fc:	4b68      	ldr	r3, [pc, #416]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 80030fe:	496b      	ldr	r1, [pc, #428]	@ (80032ac <HAL_RCC_OscConfig+0x638>)
 8003100:	400a      	ands	r2, r1
 8003102:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2220      	movs	r2, #32
 800310a:	4013      	ands	r3, r2
 800310c:	d039      	beq.n	8003182 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d01b      	beq.n	800314e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003116:	4b62      	ldr	r3, [pc, #392]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	4b61      	ldr	r3, [pc, #388]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 800311c:	2180      	movs	r1, #128	@ 0x80
 800311e:	03c9      	lsls	r1, r1, #15
 8003120:	430a      	orrs	r2, r1
 8003122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003124:	f7fd fdf8 	bl	8000d18 <HAL_GetTick>
 8003128:	0003      	movs	r3, r0
 800312a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800312e:	f7fd fdf3 	bl	8000d18 <HAL_GetTick>
 8003132:	0002      	movs	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e0f3      	b.n	8003328 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003140:	4b57      	ldr	r3, [pc, #348]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	2380      	movs	r3, #128	@ 0x80
 8003146:	041b      	lsls	r3, r3, #16
 8003148:	4013      	ands	r3, r2
 800314a:	d0f0      	beq.n	800312e <HAL_RCC_OscConfig+0x4ba>
 800314c:	e019      	b.n	8003182 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800314e:	4b54      	ldr	r3, [pc, #336]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	4b53      	ldr	r3, [pc, #332]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 8003154:	4956      	ldr	r1, [pc, #344]	@ (80032b0 <HAL_RCC_OscConfig+0x63c>)
 8003156:	400a      	ands	r2, r1
 8003158:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315a:	f7fd fddd 	bl	8000d18 <HAL_GetTick>
 800315e:	0003      	movs	r3, r0
 8003160:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003164:	f7fd fdd8 	bl	8000d18 <HAL_GetTick>
 8003168:	0002      	movs	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e0d8      	b.n	8003328 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003176:	4b4a      	ldr	r3, [pc, #296]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	2380      	movs	r3, #128	@ 0x80
 800317c:	041b      	lsls	r3, r3, #16
 800317e:	4013      	ands	r3, r2
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d100      	bne.n	800318c <HAL_RCC_OscConfig+0x518>
 800318a:	e0cc      	b.n	8003326 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800318c:	4b44      	ldr	r3, [pc, #272]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2238      	movs	r2, #56	@ 0x38
 8003192:	4013      	ands	r3, r2
 8003194:	2b10      	cmp	r3, #16
 8003196:	d100      	bne.n	800319a <HAL_RCC_OscConfig+0x526>
 8003198:	e07b      	b.n	8003292 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d156      	bne.n	8003250 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a2:	4b3f      	ldr	r3, [pc, #252]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	4b3e      	ldr	r3, [pc, #248]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 80031a8:	4942      	ldr	r1, [pc, #264]	@ (80032b4 <HAL_RCC_OscConfig+0x640>)
 80031aa:	400a      	ands	r2, r1
 80031ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ae:	f7fd fdb3 	bl	8000d18 <HAL_GetTick>
 80031b2:	0003      	movs	r3, r0
 80031b4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b8:	f7fd fdae 	bl	8000d18 <HAL_GetTick>
 80031bc:	0002      	movs	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e0ae      	b.n	8003328 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ca:	4b35      	ldr	r3, [pc, #212]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	2380      	movs	r3, #128	@ 0x80
 80031d0:	049b      	lsls	r3, r3, #18
 80031d2:	4013      	ands	r3, r2
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031d6:	4b32      	ldr	r3, [pc, #200]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	4a37      	ldr	r2, [pc, #220]	@ (80032b8 <HAL_RCC_OscConfig+0x644>)
 80031dc:	4013      	ands	r3, r2
 80031de:	0019      	movs	r1, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ee:	021b      	lsls	r3, r3, #8
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003202:	431a      	orrs	r2, r3
 8003204:	4b26      	ldr	r3, [pc, #152]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 8003206:	430a      	orrs	r2, r1
 8003208:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800320a:	4b25      	ldr	r3, [pc, #148]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	4b24      	ldr	r3, [pc, #144]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 8003210:	2180      	movs	r1, #128	@ 0x80
 8003212:	0449      	lsls	r1, r1, #17
 8003214:	430a      	orrs	r2, r1
 8003216:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003218:	4b21      	ldr	r3, [pc, #132]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	4b20      	ldr	r3, [pc, #128]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 800321e:	2180      	movs	r1, #128	@ 0x80
 8003220:	0549      	lsls	r1, r1, #21
 8003222:	430a      	orrs	r2, r1
 8003224:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003226:	f7fd fd77 	bl	8000d18 <HAL_GetTick>
 800322a:	0003      	movs	r3, r0
 800322c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003230:	f7fd fd72 	bl	8000d18 <HAL_GetTick>
 8003234:	0002      	movs	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e072      	b.n	8003328 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003242:	4b17      	ldr	r3, [pc, #92]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	2380      	movs	r3, #128	@ 0x80
 8003248:	049b      	lsls	r3, r3, #18
 800324a:	4013      	ands	r3, r2
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x5bc>
 800324e:	e06a      	b.n	8003326 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003250:	4b13      	ldr	r3, [pc, #76]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4b12      	ldr	r3, [pc, #72]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 8003256:	4917      	ldr	r1, [pc, #92]	@ (80032b4 <HAL_RCC_OscConfig+0x640>)
 8003258:	400a      	ands	r2, r1
 800325a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fd fd5c 	bl	8000d18 <HAL_GetTick>
 8003260:	0003      	movs	r3, r0
 8003262:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003266:	f7fd fd57 	bl	8000d18 <HAL_GetTick>
 800326a:	0002      	movs	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e057      	b.n	8003328 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003278:	4b09      	ldr	r3, [pc, #36]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	2380      	movs	r3, #128	@ 0x80
 800327e:	049b      	lsls	r3, r3, #18
 8003280:	4013      	ands	r3, r2
 8003282:	d1f0      	bne.n	8003266 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003284:	4b06      	ldr	r3, [pc, #24]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	4b05      	ldr	r3, [pc, #20]	@ (80032a0 <HAL_RCC_OscConfig+0x62c>)
 800328a:	490c      	ldr	r1, [pc, #48]	@ (80032bc <HAL_RCC_OscConfig+0x648>)
 800328c:	400a      	ands	r2, r1
 800328e:	60da      	str	r2, [r3, #12]
 8003290:	e049      	b.n	8003326 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d112      	bne.n	80032c0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e044      	b.n	8003328 <HAL_RCC_OscConfig+0x6b4>
 800329e:	46c0      	nop			@ (mov r8, r8)
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40007000 	.word	0x40007000
 80032a8:	00001388 	.word	0x00001388
 80032ac:	efffffff 	.word	0xefffffff
 80032b0:	ffbfffff 	.word	0xffbfffff
 80032b4:	feffffff 	.word	0xfeffffff
 80032b8:	11c1808c 	.word	0x11c1808c
 80032bc:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80032c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003330 <HAL_RCC_OscConfig+0x6bc>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2203      	movs	r2, #3
 80032ca:	401a      	ands	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d126      	bne.n	8003322 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2270      	movs	r2, #112	@ 0x70
 80032d8:	401a      	ands	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032de:	429a      	cmp	r2, r3
 80032e0:	d11f      	bne.n	8003322 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	23fe      	movs	r3, #254	@ 0xfe
 80032e6:	01db      	lsls	r3, r3, #7
 80032e8:	401a      	ands	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ee:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d116      	bne.n	8003322 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	23f8      	movs	r3, #248	@ 0xf8
 80032f8:	039b      	lsls	r3, r3, #14
 80032fa:	401a      	ands	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d10e      	bne.n	8003322 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	23e0      	movs	r3, #224	@ 0xe0
 8003308:	051b      	lsls	r3, r3, #20
 800330a:	401a      	ands	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d106      	bne.n	8003322 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	0f5b      	lsrs	r3, r3, #29
 8003318:	075a      	lsls	r2, r3, #29
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800331e:	429a      	cmp	r2, r3
 8003320:	d001      	beq.n	8003326 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	0018      	movs	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	b008      	add	sp, #32
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40021000 	.word	0x40021000

08003334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0e9      	b.n	800351c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003348:	4b76      	ldr	r3, [pc, #472]	@ (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2207      	movs	r2, #7
 800334e:	4013      	ands	r3, r2
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d91e      	bls.n	8003394 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003356:	4b73      	ldr	r3, [pc, #460]	@ (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2207      	movs	r2, #7
 800335c:	4393      	bics	r3, r2
 800335e:	0019      	movs	r1, r3
 8003360:	4b70      	ldr	r3, [pc, #448]	@ (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003368:	f7fd fcd6 	bl	8000d18 <HAL_GetTick>
 800336c:	0003      	movs	r3, r0
 800336e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003370:	e009      	b.n	8003386 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003372:	f7fd fcd1 	bl	8000d18 <HAL_GetTick>
 8003376:	0002      	movs	r2, r0
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	4a6a      	ldr	r2, [pc, #424]	@ (8003528 <HAL_RCC_ClockConfig+0x1f4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e0ca      	b.n	800351c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003386:	4b67      	ldr	r3, [pc, #412]	@ (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2207      	movs	r2, #7
 800338c:	4013      	ands	r3, r2
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d1ee      	bne.n	8003372 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2202      	movs	r2, #2
 800339a:	4013      	ands	r3, r2
 800339c:	d015      	beq.n	80033ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2204      	movs	r2, #4
 80033a4:	4013      	ands	r3, r2
 80033a6:	d006      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80033a8:	4b60      	ldr	r3, [pc, #384]	@ (800352c <HAL_RCC_ClockConfig+0x1f8>)
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	4b5f      	ldr	r3, [pc, #380]	@ (800352c <HAL_RCC_ClockConfig+0x1f8>)
 80033ae:	21e0      	movs	r1, #224	@ 0xe0
 80033b0:	01c9      	lsls	r1, r1, #7
 80033b2:	430a      	orrs	r2, r1
 80033b4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b6:	4b5d      	ldr	r3, [pc, #372]	@ (800352c <HAL_RCC_ClockConfig+0x1f8>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	4a5d      	ldr	r2, [pc, #372]	@ (8003530 <HAL_RCC_ClockConfig+0x1fc>)
 80033bc:	4013      	ands	r3, r2
 80033be:	0019      	movs	r1, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	4b59      	ldr	r3, [pc, #356]	@ (800352c <HAL_RCC_ClockConfig+0x1f8>)
 80033c6:	430a      	orrs	r2, r1
 80033c8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2201      	movs	r2, #1
 80033d0:	4013      	ands	r3, r2
 80033d2:	d057      	beq.n	8003484 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d107      	bne.n	80033ec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033dc:	4b53      	ldr	r3, [pc, #332]	@ (800352c <HAL_RCC_ClockConfig+0x1f8>)
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	2380      	movs	r3, #128	@ 0x80
 80033e2:	029b      	lsls	r3, r3, #10
 80033e4:	4013      	ands	r3, r2
 80033e6:	d12b      	bne.n	8003440 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e097      	b.n	800351c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d107      	bne.n	8003404 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033f4:	4b4d      	ldr	r3, [pc, #308]	@ (800352c <HAL_RCC_ClockConfig+0x1f8>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	2380      	movs	r3, #128	@ 0x80
 80033fa:	049b      	lsls	r3, r3, #18
 80033fc:	4013      	ands	r3, r2
 80033fe:	d11f      	bne.n	8003440 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e08b      	b.n	800351c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d107      	bne.n	800341c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800340c:	4b47      	ldr	r3, [pc, #284]	@ (800352c <HAL_RCC_ClockConfig+0x1f8>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	2380      	movs	r3, #128	@ 0x80
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4013      	ands	r3, r2
 8003416:	d113      	bne.n	8003440 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e07f      	b.n	800351c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b03      	cmp	r3, #3
 8003422:	d106      	bne.n	8003432 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003424:	4b41      	ldr	r3, [pc, #260]	@ (800352c <HAL_RCC_ClockConfig+0x1f8>)
 8003426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003428:	2202      	movs	r2, #2
 800342a:	4013      	ands	r3, r2
 800342c:	d108      	bne.n	8003440 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e074      	b.n	800351c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003432:	4b3e      	ldr	r3, [pc, #248]	@ (800352c <HAL_RCC_ClockConfig+0x1f8>)
 8003434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003436:	2202      	movs	r2, #2
 8003438:	4013      	ands	r3, r2
 800343a:	d101      	bne.n	8003440 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e06d      	b.n	800351c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003440:	4b3a      	ldr	r3, [pc, #232]	@ (800352c <HAL_RCC_ClockConfig+0x1f8>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2207      	movs	r2, #7
 8003446:	4393      	bics	r3, r2
 8003448:	0019      	movs	r1, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	4b37      	ldr	r3, [pc, #220]	@ (800352c <HAL_RCC_ClockConfig+0x1f8>)
 8003450:	430a      	orrs	r2, r1
 8003452:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003454:	f7fd fc60 	bl	8000d18 <HAL_GetTick>
 8003458:	0003      	movs	r3, r0
 800345a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345c:	e009      	b.n	8003472 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800345e:	f7fd fc5b 	bl	8000d18 <HAL_GetTick>
 8003462:	0002      	movs	r2, r0
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	4a2f      	ldr	r2, [pc, #188]	@ (8003528 <HAL_RCC_ClockConfig+0x1f4>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e054      	b.n	800351c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003472:	4b2e      	ldr	r3, [pc, #184]	@ (800352c <HAL_RCC_ClockConfig+0x1f8>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	2238      	movs	r2, #56	@ 0x38
 8003478:	401a      	ands	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	429a      	cmp	r2, r3
 8003482:	d1ec      	bne.n	800345e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003484:	4b27      	ldr	r3, [pc, #156]	@ (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2207      	movs	r2, #7
 800348a:	4013      	ands	r3, r2
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	d21e      	bcs.n	80034d0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003492:	4b24      	ldr	r3, [pc, #144]	@ (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2207      	movs	r2, #7
 8003498:	4393      	bics	r3, r2
 800349a:	0019      	movs	r1, r3
 800349c:	4b21      	ldr	r3, [pc, #132]	@ (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034a4:	f7fd fc38 	bl	8000d18 <HAL_GetTick>
 80034a8:	0003      	movs	r3, r0
 80034aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034ac:	e009      	b.n	80034c2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ae:	f7fd fc33 	bl	8000d18 <HAL_GetTick>
 80034b2:	0002      	movs	r2, r0
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003528 <HAL_RCC_ClockConfig+0x1f4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e02c      	b.n	800351c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034c2:	4b18      	ldr	r3, [pc, #96]	@ (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2207      	movs	r2, #7
 80034c8:	4013      	ands	r3, r2
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d1ee      	bne.n	80034ae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2204      	movs	r2, #4
 80034d6:	4013      	ands	r3, r2
 80034d8:	d009      	beq.n	80034ee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80034da:	4b14      	ldr	r3, [pc, #80]	@ (800352c <HAL_RCC_ClockConfig+0x1f8>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	4a15      	ldr	r2, [pc, #84]	@ (8003534 <HAL_RCC_ClockConfig+0x200>)
 80034e0:	4013      	ands	r3, r2
 80034e2:	0019      	movs	r1, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	4b10      	ldr	r3, [pc, #64]	@ (800352c <HAL_RCC_ClockConfig+0x1f8>)
 80034ea:	430a      	orrs	r2, r1
 80034ec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80034ee:	f000 f829 	bl	8003544 <HAL_RCC_GetSysClockFreq>
 80034f2:	0001      	movs	r1, r0
 80034f4:	4b0d      	ldr	r3, [pc, #52]	@ (800352c <HAL_RCC_ClockConfig+0x1f8>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	0a1b      	lsrs	r3, r3, #8
 80034fa:	220f      	movs	r2, #15
 80034fc:	401a      	ands	r2, r3
 80034fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003538 <HAL_RCC_ClockConfig+0x204>)
 8003500:	0092      	lsls	r2, r2, #2
 8003502:	58d3      	ldr	r3, [r2, r3]
 8003504:	221f      	movs	r2, #31
 8003506:	4013      	ands	r3, r2
 8003508:	000a      	movs	r2, r1
 800350a:	40da      	lsrs	r2, r3
 800350c:	4b0b      	ldr	r3, [pc, #44]	@ (800353c <HAL_RCC_ClockConfig+0x208>)
 800350e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003510:	4b0b      	ldr	r3, [pc, #44]	@ (8003540 <HAL_RCC_ClockConfig+0x20c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	0018      	movs	r0, r3
 8003516:	f7fd fba3 	bl	8000c60 <HAL_InitTick>
 800351a:	0003      	movs	r3, r0
}
 800351c:	0018      	movs	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	b004      	add	sp, #16
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40022000 	.word	0x40022000
 8003528:	00001388 	.word	0x00001388
 800352c:	40021000 	.word	0x40021000
 8003530:	fffff0ff 	.word	0xfffff0ff
 8003534:	ffff8fff 	.word	0xffff8fff
 8003538:	080045a0 	.word	0x080045a0
 800353c:	20000000 	.word	0x20000000
 8003540:	20000004 	.word	0x20000004

08003544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800354a:	4b3c      	ldr	r3, [pc, #240]	@ (800363c <HAL_RCC_GetSysClockFreq+0xf8>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2238      	movs	r2, #56	@ 0x38
 8003550:	4013      	ands	r3, r2
 8003552:	d10f      	bne.n	8003574 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003554:	4b39      	ldr	r3, [pc, #228]	@ (800363c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	0adb      	lsrs	r3, r3, #11
 800355a:	2207      	movs	r2, #7
 800355c:	4013      	ands	r3, r2
 800355e:	2201      	movs	r2, #1
 8003560:	409a      	lsls	r2, r3
 8003562:	0013      	movs	r3, r2
 8003564:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003566:	6839      	ldr	r1, [r7, #0]
 8003568:	4835      	ldr	r0, [pc, #212]	@ (8003640 <HAL_RCC_GetSysClockFreq+0xfc>)
 800356a:	f7fc fdcd 	bl	8000108 <__udivsi3>
 800356e:	0003      	movs	r3, r0
 8003570:	613b      	str	r3, [r7, #16]
 8003572:	e05d      	b.n	8003630 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003574:	4b31      	ldr	r3, [pc, #196]	@ (800363c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2238      	movs	r2, #56	@ 0x38
 800357a:	4013      	ands	r3, r2
 800357c:	2b08      	cmp	r3, #8
 800357e:	d102      	bne.n	8003586 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003580:	4b30      	ldr	r3, [pc, #192]	@ (8003644 <HAL_RCC_GetSysClockFreq+0x100>)
 8003582:	613b      	str	r3, [r7, #16]
 8003584:	e054      	b.n	8003630 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003586:	4b2d      	ldr	r3, [pc, #180]	@ (800363c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2238      	movs	r2, #56	@ 0x38
 800358c:	4013      	ands	r3, r2
 800358e:	2b10      	cmp	r3, #16
 8003590:	d138      	bne.n	8003604 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003592:	4b2a      	ldr	r3, [pc, #168]	@ (800363c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	2203      	movs	r2, #3
 8003598:	4013      	ands	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800359c:	4b27      	ldr	r3, [pc, #156]	@ (800363c <HAL_RCC_GetSysClockFreq+0xf8>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	091b      	lsrs	r3, r3, #4
 80035a2:	2207      	movs	r2, #7
 80035a4:	4013      	ands	r3, r2
 80035a6:	3301      	adds	r3, #1
 80035a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d10d      	bne.n	80035cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	4824      	ldr	r0, [pc, #144]	@ (8003644 <HAL_RCC_GetSysClockFreq+0x100>)
 80035b4:	f7fc fda8 	bl	8000108 <__udivsi3>
 80035b8:	0003      	movs	r3, r0
 80035ba:	0019      	movs	r1, r3
 80035bc:	4b1f      	ldr	r3, [pc, #124]	@ (800363c <HAL_RCC_GetSysClockFreq+0xf8>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	0a1b      	lsrs	r3, r3, #8
 80035c2:	227f      	movs	r2, #127	@ 0x7f
 80035c4:	4013      	ands	r3, r2
 80035c6:	434b      	muls	r3, r1
 80035c8:	617b      	str	r3, [r7, #20]
        break;
 80035ca:	e00d      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80035cc:	68b9      	ldr	r1, [r7, #8]
 80035ce:	481c      	ldr	r0, [pc, #112]	@ (8003640 <HAL_RCC_GetSysClockFreq+0xfc>)
 80035d0:	f7fc fd9a 	bl	8000108 <__udivsi3>
 80035d4:	0003      	movs	r3, r0
 80035d6:	0019      	movs	r1, r3
 80035d8:	4b18      	ldr	r3, [pc, #96]	@ (800363c <HAL_RCC_GetSysClockFreq+0xf8>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	0a1b      	lsrs	r3, r3, #8
 80035de:	227f      	movs	r2, #127	@ 0x7f
 80035e0:	4013      	ands	r3, r2
 80035e2:	434b      	muls	r3, r1
 80035e4:	617b      	str	r3, [r7, #20]
        break;
 80035e6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80035e8:	4b14      	ldr	r3, [pc, #80]	@ (800363c <HAL_RCC_GetSysClockFreq+0xf8>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	0f5b      	lsrs	r3, r3, #29
 80035ee:	2207      	movs	r2, #7
 80035f0:	4013      	ands	r3, r2
 80035f2:	3301      	adds	r3, #1
 80035f4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	6978      	ldr	r0, [r7, #20]
 80035fa:	f7fc fd85 	bl	8000108 <__udivsi3>
 80035fe:	0003      	movs	r3, r0
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	e015      	b.n	8003630 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003604:	4b0d      	ldr	r3, [pc, #52]	@ (800363c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2238      	movs	r2, #56	@ 0x38
 800360a:	4013      	ands	r3, r2
 800360c:	2b20      	cmp	r3, #32
 800360e:	d103      	bne.n	8003618 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003610:	2380      	movs	r3, #128	@ 0x80
 8003612:	021b      	lsls	r3, r3, #8
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	e00b      	b.n	8003630 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003618:	4b08      	ldr	r3, [pc, #32]	@ (800363c <HAL_RCC_GetSysClockFreq+0xf8>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2238      	movs	r2, #56	@ 0x38
 800361e:	4013      	ands	r3, r2
 8003620:	2b18      	cmp	r3, #24
 8003622:	d103      	bne.n	800362c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003624:	23fa      	movs	r3, #250	@ 0xfa
 8003626:	01db      	lsls	r3, r3, #7
 8003628:	613b      	str	r3, [r7, #16]
 800362a:	e001      	b.n	8003630 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003630:	693b      	ldr	r3, [r7, #16]
}
 8003632:	0018      	movs	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	b006      	add	sp, #24
 8003638:	bd80      	pop	{r7, pc}
 800363a:	46c0      	nop			@ (mov r8, r8)
 800363c:	40021000 	.word	0x40021000
 8003640:	00f42400 	.word	0x00f42400
 8003644:	007a1200 	.word	0x007a1200

08003648 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003650:	2313      	movs	r3, #19
 8003652:	18fb      	adds	r3, r7, r3
 8003654:	2200      	movs	r2, #0
 8003656:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003658:	2312      	movs	r3, #18
 800365a:	18fb      	adds	r3, r7, r3
 800365c:	2200      	movs	r2, #0
 800365e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	2380      	movs	r3, #128	@ 0x80
 8003666:	029b      	lsls	r3, r3, #10
 8003668:	4013      	ands	r3, r2
 800366a:	d100      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800366c:	e0ad      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800366e:	2011      	movs	r0, #17
 8003670:	183b      	adds	r3, r7, r0
 8003672:	2200      	movs	r2, #0
 8003674:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003676:	4b47      	ldr	r3, [pc, #284]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003678:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800367a:	2380      	movs	r3, #128	@ 0x80
 800367c:	055b      	lsls	r3, r3, #21
 800367e:	4013      	ands	r3, r2
 8003680:	d110      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003682:	4b44      	ldr	r3, [pc, #272]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003684:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003686:	4b43      	ldr	r3, [pc, #268]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003688:	2180      	movs	r1, #128	@ 0x80
 800368a:	0549      	lsls	r1, r1, #21
 800368c:	430a      	orrs	r2, r1
 800368e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003690:	4b40      	ldr	r3, [pc, #256]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003692:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003694:	2380      	movs	r3, #128	@ 0x80
 8003696:	055b      	lsls	r3, r3, #21
 8003698:	4013      	ands	r3, r2
 800369a:	60bb      	str	r3, [r7, #8]
 800369c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800369e:	183b      	adds	r3, r7, r0
 80036a0:	2201      	movs	r2, #1
 80036a2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036a4:	4b3c      	ldr	r3, [pc, #240]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80036aa:	2180      	movs	r1, #128	@ 0x80
 80036ac:	0049      	lsls	r1, r1, #1
 80036ae:	430a      	orrs	r2, r1
 80036b0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036b2:	f7fd fb31 	bl	8000d18 <HAL_GetTick>
 80036b6:	0003      	movs	r3, r0
 80036b8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036ba:	e00b      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036bc:	f7fd fb2c 	bl	8000d18 <HAL_GetTick>
 80036c0:	0002      	movs	r2, r0
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d904      	bls.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80036ca:	2313      	movs	r3, #19
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	2203      	movs	r2, #3
 80036d0:	701a      	strb	r2, [r3, #0]
        break;
 80036d2:	e005      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036d4:	4b30      	ldr	r3, [pc, #192]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	2380      	movs	r3, #128	@ 0x80
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	4013      	ands	r3, r2
 80036de:	d0ed      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80036e0:	2313      	movs	r3, #19
 80036e2:	18fb      	adds	r3, r7, r3
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d15e      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80036ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80036ee:	23c0      	movs	r3, #192	@ 0xc0
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4013      	ands	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d019      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	429a      	cmp	r2, r3
 8003704:	d014      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003706:	4b23      	ldr	r3, [pc, #140]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370a:	4a24      	ldr	r2, [pc, #144]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800370c:	4013      	ands	r3, r2
 800370e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003710:	4b20      	ldr	r3, [pc, #128]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003712:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003714:	4b1f      	ldr	r3, [pc, #124]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003716:	2180      	movs	r1, #128	@ 0x80
 8003718:	0249      	lsls	r1, r1, #9
 800371a:	430a      	orrs	r2, r1
 800371c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800371e:	4b1d      	ldr	r3, [pc, #116]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003720:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003722:	4b1c      	ldr	r3, [pc, #112]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003724:	491e      	ldr	r1, [pc, #120]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8003726:	400a      	ands	r2, r1
 8003728:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800372a:	4b1a      	ldr	r3, [pc, #104]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	2201      	movs	r2, #1
 8003734:	4013      	ands	r3, r2
 8003736:	d016      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003738:	f7fd faee 	bl	8000d18 <HAL_GetTick>
 800373c:	0003      	movs	r3, r0
 800373e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003740:	e00c      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003742:	f7fd fae9 	bl	8000d18 <HAL_GetTick>
 8003746:	0002      	movs	r2, r0
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	4a15      	ldr	r2, [pc, #84]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d904      	bls.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003752:	2313      	movs	r3, #19
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	2203      	movs	r2, #3
 8003758:	701a      	strb	r2, [r3, #0]
            break;
 800375a:	e004      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800375c:	4b0d      	ldr	r3, [pc, #52]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800375e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003760:	2202      	movs	r2, #2
 8003762:	4013      	ands	r3, r2
 8003764:	d0ed      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003766:	2313      	movs	r3, #19
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10a      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003770:	4b08      	ldr	r3, [pc, #32]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003774:	4a09      	ldr	r2, [pc, #36]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003776:	4013      	ands	r3, r2
 8003778:	0019      	movs	r1, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800377e:	4b05      	ldr	r3, [pc, #20]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003780:	430a      	orrs	r2, r1
 8003782:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003784:	e016      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003786:	2312      	movs	r3, #18
 8003788:	18fb      	adds	r3, r7, r3
 800378a:	2213      	movs	r2, #19
 800378c:	18ba      	adds	r2, r7, r2
 800378e:	7812      	ldrb	r2, [r2, #0]
 8003790:	701a      	strb	r2, [r3, #0]
 8003792:	e00f      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003794:	40021000 	.word	0x40021000
 8003798:	40007000 	.word	0x40007000
 800379c:	fffffcff 	.word	0xfffffcff
 80037a0:	fffeffff 	.word	0xfffeffff
 80037a4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a8:	2312      	movs	r3, #18
 80037aa:	18fb      	adds	r3, r7, r3
 80037ac:	2213      	movs	r2, #19
 80037ae:	18ba      	adds	r2, r7, r2
 80037b0:	7812      	ldrb	r2, [r2, #0]
 80037b2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037b4:	2311      	movs	r3, #17
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d105      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037be:	4bc5      	ldr	r3, [pc, #788]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80037c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037c2:	4bc4      	ldr	r3, [pc, #784]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80037c4:	49c4      	ldr	r1, [pc, #784]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037c6:	400a      	ands	r2, r1
 80037c8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2201      	movs	r2, #1
 80037d0:	4013      	ands	r3, r2
 80037d2:	d009      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037d4:	4bbf      	ldr	r3, [pc, #764]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80037d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d8:	2203      	movs	r2, #3
 80037da:	4393      	bics	r3, r2
 80037dc:	0019      	movs	r1, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	4bbc      	ldr	r3, [pc, #752]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80037e4:	430a      	orrs	r2, r1
 80037e6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2202      	movs	r2, #2
 80037ee:	4013      	ands	r3, r2
 80037f0:	d009      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037f2:	4bb8      	ldr	r3, [pc, #736]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80037f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f6:	220c      	movs	r2, #12
 80037f8:	4393      	bics	r3, r2
 80037fa:	0019      	movs	r1, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	4bb4      	ldr	r3, [pc, #720]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003802:	430a      	orrs	r2, r1
 8003804:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2204      	movs	r2, #4
 800380c:	4013      	ands	r3, r2
 800380e:	d009      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003810:	4bb0      	ldr	r3, [pc, #704]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003814:	2230      	movs	r2, #48	@ 0x30
 8003816:	4393      	bics	r3, r2
 8003818:	0019      	movs	r1, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	4bad      	ldr	r3, [pc, #692]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003820:	430a      	orrs	r2, r1
 8003822:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2210      	movs	r2, #16
 800382a:	4013      	ands	r3, r2
 800382c:	d009      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800382e:	4ba9      	ldr	r3, [pc, #676]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003832:	4aaa      	ldr	r2, [pc, #680]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003834:	4013      	ands	r3, r2
 8003836:	0019      	movs	r1, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	4ba5      	ldr	r3, [pc, #660]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800383e:	430a      	orrs	r2, r1
 8003840:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	2380      	movs	r3, #128	@ 0x80
 8003848:	015b      	lsls	r3, r3, #5
 800384a:	4013      	ands	r3, r2
 800384c:	d009      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800384e:	4ba1      	ldr	r3, [pc, #644]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003852:	4aa3      	ldr	r2, [pc, #652]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003854:	4013      	ands	r3, r2
 8003856:	0019      	movs	r1, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	695a      	ldr	r2, [r3, #20]
 800385c:	4b9d      	ldr	r3, [pc, #628]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800385e:	430a      	orrs	r2, r1
 8003860:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	2380      	movs	r3, #128	@ 0x80
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4013      	ands	r3, r2
 800386c:	d009      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800386e:	4b99      	ldr	r3, [pc, #612]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003872:	4a9c      	ldr	r2, [pc, #624]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x49c>)
 8003874:	4013      	ands	r3, r2
 8003876:	0019      	movs	r1, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800387c:	4b95      	ldr	r3, [pc, #596]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800387e:	430a      	orrs	r2, r1
 8003880:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	2380      	movs	r3, #128	@ 0x80
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	4013      	ands	r3, r2
 800388c:	d009      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800388e:	4b91      	ldr	r3, [pc, #580]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003892:	4a95      	ldr	r2, [pc, #596]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003894:	4013      	ands	r3, r2
 8003896:	0019      	movs	r1, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800389c:	4b8d      	ldr	r3, [pc, #564]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800389e:	430a      	orrs	r2, r1
 80038a0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2220      	movs	r2, #32
 80038a8:	4013      	ands	r3, r2
 80038aa:	d009      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038ac:	4b89      	ldr	r3, [pc, #548]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80038ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b0:	4a8e      	ldr	r2, [pc, #568]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	0019      	movs	r1, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699a      	ldr	r2, [r3, #24]
 80038ba:	4b86      	ldr	r3, [pc, #536]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80038bc:	430a      	orrs	r2, r1
 80038be:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2240      	movs	r2, #64	@ 0x40
 80038c6:	4013      	ands	r3, r2
 80038c8:	d009      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038ca:	4b82      	ldr	r3, [pc, #520]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80038cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ce:	4a88      	ldr	r2, [pc, #544]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	0019      	movs	r1, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69da      	ldr	r2, [r3, #28]
 80038d8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80038da:	430a      	orrs	r2, r1
 80038dc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	2380      	movs	r3, #128	@ 0x80
 80038e4:	02db      	lsls	r3, r3, #11
 80038e6:	4013      	ands	r3, r2
 80038e8:	d016      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038ea:	4b7a      	ldr	r3, [pc, #488]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80038ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ee:	4a81      	ldr	r2, [pc, #516]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	0019      	movs	r1, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038f8:	4b76      	ldr	r3, [pc, #472]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80038fa:	430a      	orrs	r2, r1
 80038fc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003902:	23c0      	movs	r3, #192	@ 0xc0
 8003904:	051b      	lsls	r3, r3, #20
 8003906:	429a      	cmp	r2, r3
 8003908:	d106      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800390a:	4b72      	ldr	r3, [pc, #456]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	4b71      	ldr	r3, [pc, #452]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003910:	2180      	movs	r1, #128	@ 0x80
 8003912:	0449      	lsls	r1, r1, #17
 8003914:	430a      	orrs	r2, r1
 8003916:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	2380      	movs	r3, #128	@ 0x80
 800391e:	01db      	lsls	r3, r3, #7
 8003920:	4013      	ands	r3, r2
 8003922:	d015      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x308>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003924:	4b6b      	ldr	r3, [pc, #428]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	0899      	lsrs	r1, r3, #2
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003930:	4b68      	ldr	r3, [pc, #416]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003932:	430a      	orrs	r2, r1
 8003934:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800393a:	2380      	movs	r3, #128	@ 0x80
 800393c:	05db      	lsls	r3, r3, #23
 800393e:	429a      	cmp	r2, r3
 8003940:	d106      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003942:	4b64      	ldr	r3, [pc, #400]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	4b63      	ldr	r3, [pc, #396]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003948:	2180      	movs	r1, #128	@ 0x80
 800394a:	0249      	lsls	r1, r1, #9
 800394c:	430a      	orrs	r2, r1
 800394e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	2380      	movs	r3, #128	@ 0x80
 8003956:	031b      	lsls	r3, r3, #12
 8003958:	4013      	ands	r3, r2
 800395a:	d009      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800395c:	4b5d      	ldr	r3, [pc, #372]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800395e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003960:	2240      	movs	r2, #64	@ 0x40
 8003962:	4393      	bics	r3, r2
 8003964:	0019      	movs	r1, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800396a:	4b5a      	ldr	r3, [pc, #360]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800396c:	430a      	orrs	r2, r1
 800396e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	2380      	movs	r3, #128	@ 0x80
 8003976:	039b      	lsls	r3, r3, #14
 8003978:	4013      	ands	r3, r2
 800397a:	d016      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800397c:	4b55      	ldr	r3, [pc, #340]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800397e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003980:	4a5d      	ldr	r2, [pc, #372]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003982:	4013      	ands	r3, r2
 8003984:	0019      	movs	r1, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800398a:	4b52      	ldr	r3, [pc, #328]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800398c:	430a      	orrs	r2, r1
 800398e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003994:	2380      	movs	r3, #128	@ 0x80
 8003996:	03db      	lsls	r3, r3, #15
 8003998:	429a      	cmp	r2, r3
 800399a:	d106      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800399c:	4b4d      	ldr	r3, [pc, #308]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	4b4c      	ldr	r3, [pc, #304]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80039a2:	2180      	movs	r1, #128	@ 0x80
 80039a4:	0449      	lsls	r1, r1, #17
 80039a6:	430a      	orrs	r2, r1
 80039a8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	2380      	movs	r3, #128	@ 0x80
 80039b0:	03db      	lsls	r3, r3, #15
 80039b2:	4013      	ands	r3, r2
 80039b4:	d016      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80039b6:	4b47      	ldr	r3, [pc, #284]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80039b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ba:	4a50      	ldr	r2, [pc, #320]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 80039bc:	4013      	ands	r3, r2
 80039be:	0019      	movs	r1, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039c4:	4b43      	ldr	r3, [pc, #268]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80039c6:	430a      	orrs	r2, r1
 80039c8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039ce:	2380      	movs	r3, #128	@ 0x80
 80039d0:	045b      	lsls	r3, r3, #17
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d106      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80039d6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	4b3e      	ldr	r3, [pc, #248]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80039dc:	2180      	movs	r1, #128	@ 0x80
 80039de:	0449      	lsls	r1, r1, #17
 80039e0:	430a      	orrs	r2, r1
 80039e2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	2380      	movs	r3, #128	@ 0x80
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	4013      	ands	r3, r2
 80039ee:	d014      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80039f0:	4b38      	ldr	r3, [pc, #224]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80039f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f4:	2203      	movs	r2, #3
 80039f6:	4393      	bics	r3, r2
 80039f8:	0019      	movs	r1, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1a      	ldr	r2, [r3, #32]
 80039fe:	4b35      	ldr	r3, [pc, #212]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003a00:	430a      	orrs	r2, r1
 8003a02:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d106      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003a0c:	4b31      	ldr	r3, [pc, #196]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	4b30      	ldr	r3, [pc, #192]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003a12:	2180      	movs	r1, #128	@ 0x80
 8003a14:	0249      	lsls	r1, r1, #9
 8003a16:	430a      	orrs	r2, r1
 8003a18:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	2380      	movs	r3, #128	@ 0x80
 8003a20:	019b      	lsls	r3, r3, #6
 8003a22:	4013      	ands	r3, r2
 8003a24:	d014      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003a26:	4b2b      	ldr	r3, [pc, #172]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a2a:	220c      	movs	r2, #12
 8003a2c:	4393      	bics	r3, r2
 8003a2e:	0019      	movs	r1, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a34:	4b27      	ldr	r3, [pc, #156]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003a36:	430a      	orrs	r2, r1
 8003a38:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d106      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003a42:	4b24      	ldr	r3, [pc, #144]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	4b23      	ldr	r3, [pc, #140]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003a48:	2180      	movs	r1, #128	@ 0x80
 8003a4a:	0249      	lsls	r1, r1, #9
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	2380      	movs	r3, #128	@ 0x80
 8003a56:	045b      	lsls	r3, r3, #17
 8003a58:	4013      	ands	r3, r2
 8003a5a:	d016      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a60:	4a22      	ldr	r2, [pc, #136]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	0019      	movs	r1, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a74:	2380      	movs	r3, #128	@ 0x80
 8003a76:	019b      	lsls	r3, r3, #6
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d106      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003a7c:	4b15      	ldr	r3, [pc, #84]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	4b14      	ldr	r3, [pc, #80]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003a82:	2180      	movs	r1, #128	@ 0x80
 8003a84:	0449      	lsls	r1, r1, #17
 8003a86:	430a      	orrs	r2, r1
 8003a88:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	2380      	movs	r3, #128	@ 0x80
 8003a90:	049b      	lsls	r3, r3, #18
 8003a92:	4013      	ands	r3, r2
 8003a94:	d016      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a96:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a9a:	4a11      	ldr	r2, [pc, #68]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	0019      	movs	r1, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003aae:	2380      	movs	r3, #128	@ 0x80
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d106      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003ab6:	4b07      	ldr	r3, [pc, #28]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	4b06      	ldr	r3, [pc, #24]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003abc:	2180      	movs	r1, #128	@ 0x80
 8003abe:	0449      	lsls	r1, r1, #17
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003ac4:	2312      	movs	r3, #18
 8003ac6:	18fb      	adds	r3, r7, r3
 8003ac8:	781b      	ldrb	r3, [r3, #0]
}
 8003aca:	0018      	movs	r0, r3
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b006      	add	sp, #24
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	efffffff 	.word	0xefffffff
 8003adc:	fffff3ff 	.word	0xfffff3ff
 8003ae0:	fffffcff 	.word	0xfffffcff
 8003ae4:	fff3ffff 	.word	0xfff3ffff
 8003ae8:	ffcfffff 	.word	0xffcfffff
 8003aec:	ffffcfff 	.word	0xffffcfff
 8003af0:	ffff3fff 	.word	0xffff3fff
 8003af4:	f3ffffff 	.word	0xf3ffffff
 8003af8:	ffbfffff 	.word	0xffbfffff
 8003afc:	feffffff 	.word	0xfeffffff

08003b00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e0a8      	b.n	8003c64 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d109      	bne.n	8003b2e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	2382      	movs	r3, #130	@ 0x82
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d009      	beq.n	8003b3a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	61da      	str	r2, [r3, #28]
 8003b2c:	e005      	b.n	8003b3a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	225d      	movs	r2, #93	@ 0x5d
 8003b44:	5c9b      	ldrb	r3, [r3, r2]
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d107      	bne.n	8003b5c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	225c      	movs	r2, #92	@ 0x5c
 8003b50:	2100      	movs	r1, #0
 8003b52:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	0018      	movs	r0, r3
 8003b58:	f7fc ffa2 	bl	8000aa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	225d      	movs	r2, #93	@ 0x5d
 8003b60:	2102      	movs	r1, #2
 8003b62:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2140      	movs	r1, #64	@ 0x40
 8003b70:	438a      	bics	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	23e0      	movs	r3, #224	@ 0xe0
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d902      	bls.n	8003b86 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	e002      	b.n	8003b8c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b86:	2380      	movs	r3, #128	@ 0x80
 8003b88:	015b      	lsls	r3, r3, #5
 8003b8a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68da      	ldr	r2, [r3, #12]
 8003b90:	23f0      	movs	r3, #240	@ 0xf0
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d008      	beq.n	8003baa <HAL_SPI_Init+0xaa>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	23e0      	movs	r3, #224	@ 0xe0
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d002      	beq.n	8003baa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	2382      	movs	r3, #130	@ 0x82
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	401a      	ands	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6899      	ldr	r1, [r3, #8]
 8003bb8:	2384      	movs	r3, #132	@ 0x84
 8003bba:	021b      	lsls	r3, r3, #8
 8003bbc:	400b      	ands	r3, r1
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	2102      	movs	r1, #2
 8003bc6:	400b      	ands	r3, r1
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	2101      	movs	r1, #1
 8003bd0:	400b      	ands	r3, r1
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6999      	ldr	r1, [r3, #24]
 8003bd8:	2380      	movs	r3, #128	@ 0x80
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	400b      	ands	r3, r1
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	2138      	movs	r1, #56	@ 0x38
 8003be6:	400b      	ands	r3, r1
 8003be8:	431a      	orrs	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	2180      	movs	r1, #128	@ 0x80
 8003bf0:	400b      	ands	r3, r1
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	0011      	movs	r1, r2
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bfa:	2380      	movs	r3, #128	@ 0x80
 8003bfc:	019b      	lsls	r3, r3, #6
 8003bfe:	401a      	ands	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	0c1b      	lsrs	r3, r3, #16
 8003c0e:	2204      	movs	r2, #4
 8003c10:	401a      	ands	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c16:	2110      	movs	r1, #16
 8003c18:	400b      	ands	r3, r1
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c20:	2108      	movs	r1, #8
 8003c22:	400b      	ands	r3, r1
 8003c24:	431a      	orrs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68d9      	ldr	r1, [r3, #12]
 8003c2a:	23f0      	movs	r3, #240	@ 0xf0
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	400b      	ands	r3, r1
 8003c30:	431a      	orrs	r2, r3
 8003c32:	0011      	movs	r1, r2
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	2380      	movs	r3, #128	@ 0x80
 8003c38:	015b      	lsls	r3, r3, #5
 8003c3a:	401a      	ands	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	69da      	ldr	r2, [r3, #28]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4907      	ldr	r1, [pc, #28]	@ (8003c6c <HAL_SPI_Init+0x16c>)
 8003c50:	400a      	ands	r2, r1
 8003c52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	225d      	movs	r2, #93	@ 0x5d
 8003c5e:	2101      	movs	r1, #1
 8003c60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	0018      	movs	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b004      	add	sp, #16
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	fffff7ff 	.word	0xfffff7ff

08003c70 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08a      	sub	sp, #40	@ 0x28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	001a      	movs	r2, r3
 8003c7e:	1cbb      	adds	r3, r7, #2
 8003c80:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c82:	2301      	movs	r3, #1
 8003c84:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c86:	2323      	movs	r3, #35	@ 0x23
 8003c88:	18fb      	adds	r3, r7, r3
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	225c      	movs	r2, #92	@ 0x5c
 8003c92:	5c9b      	ldrb	r3, [r3, r2]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d101      	bne.n	8003c9c <HAL_SPI_TransmitReceive+0x2c>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	e1c4      	b.n	8004026 <HAL_SPI_TransmitReceive+0x3b6>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	225c      	movs	r2, #92	@ 0x5c
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ca4:	f7fd f838 	bl	8000d18 <HAL_GetTick>
 8003ca8:	0003      	movs	r3, r0
 8003caa:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cac:	201b      	movs	r0, #27
 8003cae:	183b      	adds	r3, r7, r0
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	215d      	movs	r1, #93	@ 0x5d
 8003cb4:	5c52      	ldrb	r2, [r2, r1]
 8003cb6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003cbe:	2312      	movs	r3, #18
 8003cc0:	18fb      	adds	r3, r7, r3
 8003cc2:	1cba      	adds	r2, r7, #2
 8003cc4:	8812      	ldrh	r2, [r2, #0]
 8003cc6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cc8:	183b      	adds	r3, r7, r0
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d011      	beq.n	8003cf4 <HAL_SPI_TransmitReceive+0x84>
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	2382      	movs	r3, #130	@ 0x82
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d107      	bne.n	8003cea <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d103      	bne.n	8003cea <HAL_SPI_TransmitReceive+0x7a>
 8003ce2:	183b      	adds	r3, r7, r0
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d004      	beq.n	8003cf4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003cea:	2323      	movs	r3, #35	@ 0x23
 8003cec:	18fb      	adds	r3, r7, r3
 8003cee:	2202      	movs	r2, #2
 8003cf0:	701a      	strb	r2, [r3, #0]
    goto error;
 8003cf2:	e191      	b.n	8004018 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d006      	beq.n	8003d08 <HAL_SPI_TransmitReceive+0x98>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_SPI_TransmitReceive+0x98>
 8003d00:	1cbb      	adds	r3, r7, #2
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d104      	bne.n	8003d12 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003d08:	2323      	movs	r3, #35	@ 0x23
 8003d0a:	18fb      	adds	r3, r7, r3
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003d10:	e182      	b.n	8004018 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	225d      	movs	r2, #93	@ 0x5d
 8003d16:	5c9b      	ldrb	r3, [r3, r2]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d003      	beq.n	8003d26 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	225d      	movs	r2, #93	@ 0x5d
 8003d22:	2105      	movs	r1, #5
 8003d24:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1cba      	adds	r2, r7, #2
 8003d36:	2146      	movs	r1, #70	@ 0x46
 8003d38:	8812      	ldrh	r2, [r2, #0]
 8003d3a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	1cba      	adds	r2, r7, #2
 8003d40:	2144      	movs	r1, #68	@ 0x44
 8003d42:	8812      	ldrh	r2, [r2, #0]
 8003d44:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1cba      	adds	r2, r7, #2
 8003d50:	8812      	ldrh	r2, [r2, #0]
 8003d52:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	1cba      	adds	r2, r7, #2
 8003d58:	8812      	ldrh	r2, [r2, #0]
 8003d5a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	23e0      	movs	r3, #224	@ 0xe0
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d908      	bls.n	8003d86 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	49ac      	ldr	r1, [pc, #688]	@ (8004030 <HAL_SPI_TransmitReceive+0x3c0>)
 8003d80:	400a      	ands	r2, r1
 8003d82:	605a      	str	r2, [r3, #4]
 8003d84:	e008      	b.n	8003d98 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2180      	movs	r1, #128	@ 0x80
 8003d92:	0149      	lsls	r1, r1, #5
 8003d94:	430a      	orrs	r2, r1
 8003d96:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2240      	movs	r2, #64	@ 0x40
 8003da0:	4013      	ands	r3, r2
 8003da2:	2b40      	cmp	r3, #64	@ 0x40
 8003da4:	d007      	beq.n	8003db6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2140      	movs	r1, #64	@ 0x40
 8003db2:	430a      	orrs	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	23e0      	movs	r3, #224	@ 0xe0
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d800      	bhi.n	8003dc4 <HAL_SPI_TransmitReceive+0x154>
 8003dc2:	e083      	b.n	8003ecc <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <HAL_SPI_TransmitReceive+0x168>
 8003dcc:	2312      	movs	r3, #18
 8003dce:	18fb      	adds	r3, r7, r3
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d000      	beq.n	8003dd8 <HAL_SPI_TransmitReceive+0x168>
 8003dd6:	e06d      	b.n	8003eb4 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ddc:	881a      	ldrh	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de8:	1c9a      	adds	r2, r3, #2
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dfc:	e05a      	b.n	8003eb4 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2202      	movs	r2, #2
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d11b      	bne.n	8003e44 <HAL_SPI_TransmitReceive+0x1d4>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d016      	beq.n	8003e44 <HAL_SPI_TransmitReceive+0x1d4>
 8003e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d113      	bne.n	8003e44 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e20:	881a      	ldrh	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2c:	1c9a      	adds	r2, r3, #2
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d11c      	bne.n	8003e8c <HAL_SPI_TransmitReceive+0x21c>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2246      	movs	r2, #70	@ 0x46
 8003e56:	5a9b      	ldrh	r3, [r3, r2]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d016      	beq.n	8003e8c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e68:	b292      	uxth	r2, r2
 8003e6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	1c9a      	adds	r2, r3, #2
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2246      	movs	r2, #70	@ 0x46
 8003e7a:	5a9b      	ldrh	r3, [r3, r2]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b299      	uxth	r1, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2246      	movs	r2, #70	@ 0x46
 8003e86:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e8c:	f7fc ff44 	bl	8000d18 <HAL_GetTick>
 8003e90:	0002      	movs	r2, r0
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d80b      	bhi.n	8003eb4 <HAL_SPI_TransmitReceive+0x244>
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	d008      	beq.n	8003eb4 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8003ea2:	2323      	movs	r3, #35	@ 0x23
 8003ea4:	18fb      	adds	r3, r7, r3
 8003ea6:	2203      	movs	r2, #3
 8003ea8:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	225d      	movs	r2, #93	@ 0x5d
 8003eae:	2101      	movs	r1, #1
 8003eb0:	5499      	strb	r1, [r3, r2]
        goto error;
 8003eb2:	e0b1      	b.n	8004018 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d19f      	bne.n	8003dfe <HAL_SPI_TransmitReceive+0x18e>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2246      	movs	r2, #70	@ 0x46
 8003ec2:	5a9b      	ldrh	r3, [r3, r2]
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d199      	bne.n	8003dfe <HAL_SPI_TransmitReceive+0x18e>
 8003eca:	e089      	b.n	8003fe0 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_SPI_TransmitReceive+0x270>
 8003ed4:	2312      	movs	r3, #18
 8003ed6:	18fb      	adds	r3, r7, r3
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d000      	beq.n	8003ee0 <HAL_SPI_TransmitReceive+0x270>
 8003ede:	e074      	b.n	8003fca <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	330c      	adds	r3, #12
 8003eea:	7812      	ldrb	r2, [r2, #0]
 8003eec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f06:	e060      	b.n	8003fca <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	4013      	ands	r3, r2
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d11c      	bne.n	8003f50 <HAL_SPI_TransmitReceive+0x2e0>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d017      	beq.n	8003f50 <HAL_SPI_TransmitReceive+0x2e0>
 8003f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d114      	bne.n	8003f50 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	330c      	adds	r3, #12
 8003f30:	7812      	ldrb	r2, [r2, #0]
 8003f32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2201      	movs	r2, #1
 8003f58:	4013      	ands	r3, r2
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d11e      	bne.n	8003f9c <HAL_SPI_TransmitReceive+0x32c>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2246      	movs	r2, #70	@ 0x46
 8003f62:	5a9b      	ldrh	r3, [r3, r2]
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d018      	beq.n	8003f9c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	330c      	adds	r3, #12
 8003f70:	001a      	movs	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f76:	7812      	ldrb	r2, [r2, #0]
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2246      	movs	r2, #70	@ 0x46
 8003f8a:	5a9b      	ldrh	r3, [r3, r2]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b299      	uxth	r1, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2246      	movs	r2, #70	@ 0x46
 8003f96:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f9c:	f7fc febc 	bl	8000d18 <HAL_GetTick>
 8003fa0:	0002      	movs	r2, r0
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d802      	bhi.n	8003fb2 <HAL_SPI_TransmitReceive+0x342>
 8003fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fae:	3301      	adds	r3, #1
 8003fb0:	d102      	bne.n	8003fb8 <HAL_SPI_TransmitReceive+0x348>
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d108      	bne.n	8003fca <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8003fb8:	2323      	movs	r3, #35	@ 0x23
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	2203      	movs	r2, #3
 8003fbe:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	225d      	movs	r2, #93	@ 0x5d
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	5499      	strb	r1, [r3, r2]
        goto error;
 8003fc8:	e026      	b.n	8004018 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d199      	bne.n	8003f08 <HAL_SPI_TransmitReceive+0x298>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2246      	movs	r2, #70	@ 0x46
 8003fd8:	5a9b      	ldrh	r3, [r3, r2]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d193      	bne.n	8003f08 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fe0:	69fa      	ldr	r2, [r7, #28]
 8003fe2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f000 fa5c 	bl	80044a4 <SPI_EndRxTxTransaction>
 8003fec:	1e03      	subs	r3, r0, #0
 8003fee:	d006      	beq.n	8003ffe <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8003ff0:	2323      	movs	r3, #35	@ 0x23
 8003ff2:	18fb      	adds	r3, r7, r3
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004002:	2b00      	cmp	r3, #0
 8004004:	d004      	beq.n	8004010 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8004006:	2323      	movs	r3, #35	@ 0x23
 8004008:	18fb      	adds	r3, r7, r3
 800400a:	2201      	movs	r2, #1
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	e003      	b.n	8004018 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	225d      	movs	r2, #93	@ 0x5d
 8004014:	2101      	movs	r1, #1
 8004016:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	225c      	movs	r2, #92	@ 0x5c
 800401c:	2100      	movs	r1, #0
 800401e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004020:	2323      	movs	r3, #35	@ 0x23
 8004022:	18fb      	adds	r3, r7, r3
 8004024:	781b      	ldrb	r3, [r3, #0]
}
 8004026:	0018      	movs	r0, r3
 8004028:	46bd      	mov	sp, r7
 800402a:	b00a      	add	sp, #40	@ 0x28
 800402c:	bd80      	pop	{r7, pc}
 800402e:	46c0      	nop			@ (mov r8, r8)
 8004030:	ffffefff 	.word	0xffffefff

08004034 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b088      	sub	sp, #32
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	2240      	movs	r2, #64	@ 0x40
 8004050:	4013      	ands	r3, r2
 8004052:	d10d      	bne.n	8004070 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	2201      	movs	r2, #1
 8004058:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800405a:	d009      	beq.n	8004070 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	2240      	movs	r2, #64	@ 0x40
 8004060:	4013      	ands	r3, r2
 8004062:	d005      	beq.n	8004070 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	0010      	movs	r0, r2
 800406c:	4798      	blx	r3
    return;
 800406e:	e0c5      	b.n	80041fc <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	2202      	movs	r2, #2
 8004074:	4013      	ands	r3, r2
 8004076:	d009      	beq.n	800408c <HAL_SPI_IRQHandler+0x58>
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	2280      	movs	r2, #128	@ 0x80
 800407c:	4013      	ands	r3, r2
 800407e:	d005      	beq.n	800408c <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	0010      	movs	r0, r2
 8004088:	4798      	blx	r3
    return;
 800408a:	e0b7      	b.n	80041fc <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	2220      	movs	r2, #32
 8004090:	4013      	ands	r3, r2
 8004092:	d109      	bne.n	80040a8 <HAL_SPI_IRQHandler+0x74>
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	2240      	movs	r2, #64	@ 0x40
 8004098:	4013      	ands	r3, r2
 800409a:	d105      	bne.n	80040a8 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	2380      	movs	r3, #128	@ 0x80
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	4013      	ands	r3, r2
 80040a4:	d100      	bne.n	80040a8 <HAL_SPI_IRQHandler+0x74>
 80040a6:	e0a9      	b.n	80041fc <HAL_SPI_IRQHandler+0x1c8>
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	2220      	movs	r2, #32
 80040ac:	4013      	ands	r3, r2
 80040ae:	d100      	bne.n	80040b2 <HAL_SPI_IRQHandler+0x7e>
 80040b0:	e0a4      	b.n	80041fc <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	2240      	movs	r2, #64	@ 0x40
 80040b6:	4013      	ands	r3, r2
 80040b8:	d023      	beq.n	8004102 <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	225d      	movs	r2, #93	@ 0x5d
 80040be:	5c9b      	ldrb	r3, [r3, r2]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d011      	beq.n	80040ea <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ca:	2204      	movs	r2, #4
 80040cc:	431a      	orrs	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	e00b      	b.n	8004102 <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040ea:	2300      	movs	r3, #0
 80040ec:	613b      	str	r3, [r7, #16]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	613b      	str	r3, [r7, #16]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	613b      	str	r3, [r7, #16]
 80040fe:	693b      	ldr	r3, [r7, #16]
        return;
 8004100:	e07c      	b.n	80041fc <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	2220      	movs	r2, #32
 8004106:	4013      	ands	r3, r2
 8004108:	d014      	beq.n	8004134 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800410e:	2201      	movs	r2, #1
 8004110:	431a      	orrs	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2140      	movs	r1, #64	@ 0x40
 800412e:	438a      	bics	r2, r1
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	2380      	movs	r3, #128	@ 0x80
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	4013      	ands	r3, r2
 800413c:	d00c      	beq.n	8004158 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004142:	2208      	movs	r2, #8
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800414a:	2300      	movs	r3, #0
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	60bb      	str	r3, [r7, #8]
 8004156:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800415c:	2b00      	cmp	r3, #0
 800415e:	d04c      	beq.n	80041fa <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	21e0      	movs	r1, #224	@ 0xe0
 800416c:	438a      	bics	r2, r1
 800416e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	225d      	movs	r2, #93	@ 0x5d
 8004174:	2101      	movs	r1, #1
 8004176:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	2202      	movs	r2, #2
 800417c:	4013      	ands	r3, r2
 800417e:	d103      	bne.n	8004188 <HAL_SPI_IRQHandler+0x154>
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	2201      	movs	r2, #1
 8004184:	4013      	ands	r3, r2
 8004186:	d032      	beq.n	80041ee <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2103      	movs	r1, #3
 8004194:	438a      	bics	r2, r1
 8004196:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800419c:	2b00      	cmp	r3, #0
 800419e:	d010      	beq.n	80041c2 <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a4:	4a17      	ldr	r2, [pc, #92]	@ (8004204 <HAL_SPI_IRQHandler+0x1d0>)
 80041a6:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ac:	0018      	movs	r0, r3
 80041ae:	f7fd ffd5 	bl	800215c <HAL_DMA_Abort_IT>
 80041b2:	1e03      	subs	r3, r0, #0
 80041b4:	d005      	beq.n	80041c2 <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ba:	2240      	movs	r2, #64	@ 0x40
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d016      	beq.n	80041f8 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ce:	4a0d      	ldr	r2, [pc, #52]	@ (8004204 <HAL_SPI_IRQHandler+0x1d0>)
 80041d0:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d6:	0018      	movs	r0, r3
 80041d8:	f7fd ffc0 	bl	800215c <HAL_DMA_Abort_IT>
 80041dc:	1e03      	subs	r3, r0, #0
 80041de:	d00b      	beq.n	80041f8 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041e4:	2240      	movs	r2, #64	@ 0x40
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80041ec:	e004      	b.n	80041f8 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	0018      	movs	r0, r3
 80041f2:	f000 f809 	bl	8004208 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80041f6:	e000      	b.n	80041fa <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 80041f8:	46c0      	nop			@ (mov r8, r8)
    return;
 80041fa:	46c0      	nop			@ (mov r8, r8)
  }
}
 80041fc:	46bd      	mov	sp, r7
 80041fe:	b008      	add	sp, #32
 8004200:	bd80      	pop	{r7, pc}
 8004202:	46c0      	nop			@ (mov r8, r8)
 8004204:	08004219 	.word	0x08004219

08004208 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004210:	46c0      	nop			@ (mov r8, r8)
 8004212:	46bd      	mov	sp, r7
 8004214:	b002      	add	sp, #8
 8004216:	bd80      	pop	{r7, pc}

08004218 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004224:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2246      	movs	r2, #70	@ 0x46
 800422a:	2100      	movs	r1, #0
 800422c:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	0018      	movs	r0, r3
 8004238:	f7ff ffe6 	bl	8004208 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800423c:	46c0      	nop			@ (mov r8, r8)
 800423e:	46bd      	mov	sp, r7
 8004240:	b004      	add	sp, #16
 8004242:	bd80      	pop	{r7, pc}

08004244 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	603b      	str	r3, [r7, #0]
 8004250:	1dfb      	adds	r3, r7, #7
 8004252:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004254:	f7fc fd60 	bl	8000d18 <HAL_GetTick>
 8004258:	0002      	movs	r2, r0
 800425a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800425c:	1a9b      	subs	r3, r3, r2
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	18d3      	adds	r3, r2, r3
 8004262:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004264:	f7fc fd58 	bl	8000d18 <HAL_GetTick>
 8004268:	0003      	movs	r3, r0
 800426a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800426c:	4b3a      	ldr	r3, [pc, #232]	@ (8004358 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	015b      	lsls	r3, r3, #5
 8004272:	0d1b      	lsrs	r3, r3, #20
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	4353      	muls	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800427a:	e058      	b.n	800432e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	3301      	adds	r3, #1
 8004280:	d055      	beq.n	800432e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004282:	f7fc fd49 	bl	8000d18 <HAL_GetTick>
 8004286:	0002      	movs	r2, r0
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	69fa      	ldr	r2, [r7, #28]
 800428e:	429a      	cmp	r2, r3
 8004290:	d902      	bls.n	8004298 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d142      	bne.n	800431e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	21e0      	movs	r1, #224	@ 0xe0
 80042a4:	438a      	bics	r2, r1
 80042a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	2382      	movs	r3, #130	@ 0x82
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d113      	bne.n	80042dc <SPI_WaitFlagStateUntilTimeout+0x98>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	2380      	movs	r3, #128	@ 0x80
 80042ba:	021b      	lsls	r3, r3, #8
 80042bc:	429a      	cmp	r2, r3
 80042be:	d005      	beq.n	80042cc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	2380      	movs	r3, #128	@ 0x80
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d107      	bne.n	80042dc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2140      	movs	r1, #64	@ 0x40
 80042d8:	438a      	bics	r2, r1
 80042da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042e0:	2380      	movs	r3, #128	@ 0x80
 80042e2:	019b      	lsls	r3, r3, #6
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d110      	bne.n	800430a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	491a      	ldr	r1, [pc, #104]	@ (800435c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80042f4:	400a      	ands	r2, r1
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2180      	movs	r1, #128	@ 0x80
 8004304:	0189      	lsls	r1, r1, #6
 8004306:	430a      	orrs	r2, r1
 8004308:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	225d      	movs	r2, #93	@ 0x5d
 800430e:	2101      	movs	r1, #1
 8004310:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	225c      	movs	r2, #92	@ 0x5c
 8004316:	2100      	movs	r1, #0
 8004318:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e017      	b.n	800434e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	3b01      	subs	r3, #1
 800432c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	4013      	ands	r3, r2
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	425a      	negs	r2, r3
 800433e:	4153      	adcs	r3, r2
 8004340:	b2db      	uxtb	r3, r3
 8004342:	001a      	movs	r2, r3
 8004344:	1dfb      	adds	r3, r7, #7
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	429a      	cmp	r2, r3
 800434a:	d197      	bne.n	800427c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	0018      	movs	r0, r3
 8004350:	46bd      	mov	sp, r7
 8004352:	b008      	add	sp, #32
 8004354:	bd80      	pop	{r7, pc}
 8004356:	46c0      	nop			@ (mov r8, r8)
 8004358:	20000000 	.word	0x20000000
 800435c:	ffffdfff 	.word	0xffffdfff

08004360 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08a      	sub	sp, #40	@ 0x28
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
 800436c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800436e:	2317      	movs	r3, #23
 8004370:	18fb      	adds	r3, r7, r3
 8004372:	2200      	movs	r2, #0
 8004374:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004376:	f7fc fccf 	bl	8000d18 <HAL_GetTick>
 800437a:	0002      	movs	r2, r0
 800437c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437e:	1a9b      	subs	r3, r3, r2
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	18d3      	adds	r3, r2, r3
 8004384:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004386:	f7fc fcc7 	bl	8000d18 <HAL_GetTick>
 800438a:	0003      	movs	r3, r0
 800438c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	330c      	adds	r3, #12
 8004394:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004396:	4b41      	ldr	r3, [pc, #260]	@ (800449c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	0013      	movs	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	189b      	adds	r3, r3, r2
 80043a0:	00da      	lsls	r2, r3, #3
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	0d1b      	lsrs	r3, r3, #20
 80043a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043a8:	4353      	muls	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80043ac:	e068      	b.n	8004480 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	23c0      	movs	r3, #192	@ 0xc0
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d10a      	bne.n	80043ce <SPI_WaitFifoStateUntilTimeout+0x6e>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d107      	bne.n	80043ce <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	2117      	movs	r1, #23
 80043c6:	187b      	adds	r3, r7, r1
 80043c8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80043ca:	187b      	adds	r3, r7, r1
 80043cc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	3301      	adds	r3, #1
 80043d2:	d055      	beq.n	8004480 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043d4:	f7fc fca0 	bl	8000d18 <HAL_GetTick>
 80043d8:	0002      	movs	r2, r0
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d902      	bls.n	80043ea <SPI_WaitFifoStateUntilTimeout+0x8a>
 80043e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d142      	bne.n	8004470 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	21e0      	movs	r1, #224	@ 0xe0
 80043f6:	438a      	bics	r2, r1
 80043f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	2382      	movs	r3, #130	@ 0x82
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	429a      	cmp	r2, r3
 8004404:	d113      	bne.n	800442e <SPI_WaitFifoStateUntilTimeout+0xce>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	689a      	ldr	r2, [r3, #8]
 800440a:	2380      	movs	r3, #128	@ 0x80
 800440c:	021b      	lsls	r3, r3, #8
 800440e:	429a      	cmp	r2, r3
 8004410:	d005      	beq.n	800441e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	2380      	movs	r3, #128	@ 0x80
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	429a      	cmp	r2, r3
 800441c:	d107      	bne.n	800442e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2140      	movs	r1, #64	@ 0x40
 800442a:	438a      	bics	r2, r1
 800442c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004432:	2380      	movs	r3, #128	@ 0x80
 8004434:	019b      	lsls	r3, r3, #6
 8004436:	429a      	cmp	r2, r3
 8004438:	d110      	bne.n	800445c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4916      	ldr	r1, [pc, #88]	@ (80044a0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004446:	400a      	ands	r2, r1
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2180      	movs	r1, #128	@ 0x80
 8004456:	0189      	lsls	r1, r1, #6
 8004458:	430a      	orrs	r2, r1
 800445a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	225d      	movs	r2, #93	@ 0x5d
 8004460:	2101      	movs	r1, #1
 8004462:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	225c      	movs	r2, #92	@ 0x5c
 8004468:	2100      	movs	r1, #0
 800446a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e010      	b.n	8004492 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	3b01      	subs	r3, #1
 800447e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	4013      	ands	r3, r2
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	429a      	cmp	r2, r3
 800448e:	d18e      	bne.n	80043ae <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	0018      	movs	r0, r3
 8004494:	46bd      	mov	sp, r7
 8004496:	b00a      	add	sp, #40	@ 0x28
 8004498:	bd80      	pop	{r7, pc}
 800449a:	46c0      	nop			@ (mov r8, r8)
 800449c:	20000000 	.word	0x20000000
 80044a0:	ffffdfff 	.word	0xffffdfff

080044a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af02      	add	r7, sp, #8
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	23c0      	movs	r3, #192	@ 0xc0
 80044b4:	0159      	lsls	r1, r3, #5
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	0013      	movs	r3, r2
 80044be:	2200      	movs	r2, #0
 80044c0:	f7ff ff4e 	bl	8004360 <SPI_WaitFifoStateUntilTimeout>
 80044c4:	1e03      	subs	r3, r0, #0
 80044c6:	d007      	beq.n	80044d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044cc:	2220      	movs	r2, #32
 80044ce:	431a      	orrs	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e027      	b.n	8004528 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	0013      	movs	r3, r2
 80044e2:	2200      	movs	r2, #0
 80044e4:	2180      	movs	r1, #128	@ 0x80
 80044e6:	f7ff fead 	bl	8004244 <SPI_WaitFlagStateUntilTimeout>
 80044ea:	1e03      	subs	r3, r0, #0
 80044ec:	d007      	beq.n	80044fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044f2:	2220      	movs	r2, #32
 80044f4:	431a      	orrs	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e014      	b.n	8004528 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	23c0      	movs	r3, #192	@ 0xc0
 8004502:	00d9      	lsls	r1, r3, #3
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	0013      	movs	r3, r2
 800450c:	2200      	movs	r2, #0
 800450e:	f7ff ff27 	bl	8004360 <SPI_WaitFifoStateUntilTimeout>
 8004512:	1e03      	subs	r3, r0, #0
 8004514:	d007      	beq.n	8004526 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800451a:	2220      	movs	r2, #32
 800451c:	431a      	orrs	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e000      	b.n	8004528 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	0018      	movs	r0, r3
 800452a:	46bd      	mov	sp, r7
 800452c:	b004      	add	sp, #16
 800452e:	bd80      	pop	{r7, pc}

08004530 <memset>:
 8004530:	0003      	movs	r3, r0
 8004532:	1882      	adds	r2, r0, r2
 8004534:	4293      	cmp	r3, r2
 8004536:	d100      	bne.n	800453a <memset+0xa>
 8004538:	4770      	bx	lr
 800453a:	7019      	strb	r1, [r3, #0]
 800453c:	3301      	adds	r3, #1
 800453e:	e7f9      	b.n	8004534 <memset+0x4>

08004540 <__libc_init_array>:
 8004540:	b570      	push	{r4, r5, r6, lr}
 8004542:	2600      	movs	r6, #0
 8004544:	4c0c      	ldr	r4, [pc, #48]	@ (8004578 <__libc_init_array+0x38>)
 8004546:	4d0d      	ldr	r5, [pc, #52]	@ (800457c <__libc_init_array+0x3c>)
 8004548:	1b64      	subs	r4, r4, r5
 800454a:	10a4      	asrs	r4, r4, #2
 800454c:	42a6      	cmp	r6, r4
 800454e:	d109      	bne.n	8004564 <__libc_init_array+0x24>
 8004550:	2600      	movs	r6, #0
 8004552:	f000 f819 	bl	8004588 <_init>
 8004556:	4c0a      	ldr	r4, [pc, #40]	@ (8004580 <__libc_init_array+0x40>)
 8004558:	4d0a      	ldr	r5, [pc, #40]	@ (8004584 <__libc_init_array+0x44>)
 800455a:	1b64      	subs	r4, r4, r5
 800455c:	10a4      	asrs	r4, r4, #2
 800455e:	42a6      	cmp	r6, r4
 8004560:	d105      	bne.n	800456e <__libc_init_array+0x2e>
 8004562:	bd70      	pop	{r4, r5, r6, pc}
 8004564:	00b3      	lsls	r3, r6, #2
 8004566:	58eb      	ldr	r3, [r5, r3]
 8004568:	4798      	blx	r3
 800456a:	3601      	adds	r6, #1
 800456c:	e7ee      	b.n	800454c <__libc_init_array+0xc>
 800456e:	00b3      	lsls	r3, r6, #2
 8004570:	58eb      	ldr	r3, [r5, r3]
 8004572:	4798      	blx	r3
 8004574:	3601      	adds	r6, #1
 8004576:	e7f2      	b.n	800455e <__libc_init_array+0x1e>
 8004578:	080045e0 	.word	0x080045e0
 800457c:	080045e0 	.word	0x080045e0
 8004580:	080045e4 	.word	0x080045e4
 8004584:	080045e0 	.word	0x080045e0

08004588 <_init>:
 8004588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458a:	46c0      	nop			@ (mov r8, r8)
 800458c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800458e:	bc08      	pop	{r3}
 8004590:	469e      	mov	lr, r3
 8004592:	4770      	bx	lr

08004594 <_fini>:
 8004594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004596:	46c0      	nop			@ (mov r8, r8)
 8004598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800459a:	bc08      	pop	{r3}
 800459c:	469e      	mov	lr, r3
 800459e:	4770      	bx	lr
